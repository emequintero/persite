{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { FocusTrap } from '@material/dom/focus-trap';\nimport { closest, matches } from '@material/dom/ponyfill';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCDialogFoundation } from './foundation';\nimport * as util from './util';\nvar strings = MDCDialogFoundation.strings;\n\nvar MDCDialog =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCDialog, _super);\n\n  function MDCDialog() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MDCDialog.prototype, \"isOpen\", {\n    get: function () {\n      return this.foundation_.isOpen();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDialog.prototype, \"escapeKeyAction\", {\n    get: function () {\n      return this.foundation_.getEscapeKeyAction();\n    },\n    set: function (action) {\n      this.foundation_.setEscapeKeyAction(action);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDialog.prototype, \"scrimClickAction\", {\n    get: function () {\n      return this.foundation_.getScrimClickAction();\n    },\n    set: function (action) {\n      this.foundation_.setScrimClickAction(action);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCDialog.prototype, \"autoStackButtons\", {\n    get: function () {\n      return this.foundation_.getAutoStackButtons();\n    },\n    set: function (autoStack) {\n      this.foundation_.setAutoStackButtons(autoStack);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCDialog.attachTo = function (root) {\n    return new MDCDialog(root);\n  };\n\n  MDCDialog.prototype.initialize = function (focusTrapFactory) {\n    var e_1, _a;\n\n    if (focusTrapFactory === void 0) {\n      focusTrapFactory = function (el, focusOptions) {\n        return new FocusTrap(el, focusOptions);\n      };\n    }\n\n    var container = this.root_.querySelector(strings.CONTAINER_SELECTOR);\n\n    if (!container) {\n      throw new Error(\"Dialog component requires a \" + strings.CONTAINER_SELECTOR + \" container element\");\n    }\n\n    this.container_ = container;\n    this.content_ = this.root_.querySelector(strings.CONTENT_SELECTOR);\n    this.buttons_ = [].slice.call(this.root_.querySelectorAll(strings.BUTTON_SELECTOR));\n    this.defaultButton_ = this.root_.querySelector(\"[\" + strings.BUTTON_DEFAULT_ATTRIBUTE + \"]\");\n    this.focusTrapFactory_ = focusTrapFactory;\n    this.buttonRipples_ = [];\n\n    try {\n      for (var _b = tslib_1.__values(this.buttons_), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var buttonEl = _c.value;\n        this.buttonRipples_.push(new MDCRipple(buttonEl));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  MDCDialog.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.focusTrap_ = util.createFocusTrapInstance(this.container_, this.focusTrapFactory_, this.getInitialFocusEl_() || undefined);\n    this.handleClick_ = this.foundation_.handleClick.bind(this.foundation_);\n    this.handleKeydown_ = this.foundation_.handleKeydown.bind(this.foundation_);\n    this.handleDocumentKeydown_ = this.foundation_.handleDocumentKeydown.bind(this.foundation_);\n    this.handleLayout_ = this.layout.bind(this);\n    var LAYOUT_EVENTS = ['resize', 'orientationchange'];\n\n    this.handleOpening_ = function () {\n      LAYOUT_EVENTS.forEach(function (evtType) {\n        return window.addEventListener(evtType, _this.handleLayout_);\n      });\n      document.addEventListener('keydown', _this.handleDocumentKeydown_);\n    };\n\n    this.handleClosing_ = function () {\n      LAYOUT_EVENTS.forEach(function (evtType) {\n        return window.removeEventListener(evtType, _this.handleLayout_);\n      });\n      document.removeEventListener('keydown', _this.handleDocumentKeydown_);\n    };\n\n    this.listen('click', this.handleClick_);\n    this.listen('keydown', this.handleKeydown_);\n    this.listen(strings.OPENING_EVENT, this.handleOpening_);\n    this.listen(strings.CLOSING_EVENT, this.handleClosing_);\n  };\n\n  MDCDialog.prototype.destroy = function () {\n    this.unlisten('click', this.handleClick_);\n    this.unlisten('keydown', this.handleKeydown_);\n    this.unlisten(strings.OPENING_EVENT, this.handleOpening_);\n    this.unlisten(strings.CLOSING_EVENT, this.handleClosing_);\n    this.handleClosing_();\n    this.buttonRipples_.forEach(function (ripple) {\n      return ripple.destroy();\n    });\n\n    _super.prototype.destroy.call(this);\n  };\n\n  MDCDialog.prototype.layout = function () {\n    this.foundation_.layout();\n  };\n\n  MDCDialog.prototype.open = function () {\n    this.foundation_.open();\n  };\n\n  MDCDialog.prototype.close = function (action) {\n    if (action === void 0) {\n      action = '';\n    }\n\n    this.foundation_.close(action);\n  };\n\n  MDCDialog.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addBodyClass: function (className) {\n        return document.body.classList.add(className);\n      },\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      areButtonsStacked: function () {\n        return util.areTopsMisaligned(_this.buttons_);\n      },\n      clickDefaultButton: function () {\n        return _this.defaultButton_ && _this.defaultButton_.click();\n      },\n      eventTargetMatches: function (target, selector) {\n        return target ? matches(target, selector) : false;\n      },\n      getActionFromEvent: function (evt) {\n        if (!evt.target) {\n          return '';\n        }\n\n        var element = closest(evt.target, \"[\" + strings.ACTION_ATTRIBUTE + \"]\");\n        return element && element.getAttribute(strings.ACTION_ATTRIBUTE);\n      },\n      getInitialFocusEl: function () {\n        return _this.getInitialFocusEl_();\n      },\n      hasClass: function (className) {\n        return _this.root_.classList.contains(className);\n      },\n      isContentScrollable: function () {\n        return util.isScrollable(_this.content_);\n      },\n      notifyClosed: function (action) {\n        return _this.emit(strings.CLOSED_EVENT, action ? {\n          action: action\n        } : {});\n      },\n      notifyClosing: function (action) {\n        return _this.emit(strings.CLOSING_EVENT, action ? {\n          action: action\n        } : {});\n      },\n      notifyOpened: function () {\n        return _this.emit(strings.OPENED_EVENT, {});\n      },\n      notifyOpening: function () {\n        return _this.emit(strings.OPENING_EVENT, {});\n      },\n      releaseFocus: function () {\n        return _this.focusTrap_.releaseFocus();\n      },\n      removeBodyClass: function (className) {\n        return document.body.classList.remove(className);\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      reverseButtons: function () {\n        _this.buttons_.reverse();\n\n        _this.buttons_.forEach(function (button) {\n          button.parentElement.appendChild(button);\n        });\n      },\n      trapFocus: function () {\n        return _this.focusTrap_.trapFocus();\n      }\n    };\n    return new MDCDialogFoundation(adapter);\n  };\n\n  MDCDialog.prototype.getInitialFocusEl_ = function () {\n    return document.querySelector(\"[\" + strings.INITIAL_FOCUS_ATTRIBUTE + \"]\");\n  };\n\n  return MDCDialog;\n}(MDCComponent);\n\nexport { MDCDialog }; //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}