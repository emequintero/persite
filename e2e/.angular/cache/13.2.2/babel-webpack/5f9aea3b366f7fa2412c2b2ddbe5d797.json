{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { Corner } from '@material/menu-surface/constants';\nimport { cssClasses, numbers, strings } from './constants';\n\nvar MDCSelectFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCSelectFoundation, _super);\n  /* istanbul ignore next: optional argument is not a branch statement */\n\n  /**\n   * @param adapter\n   * @param foundationMap Map from subcomponent names to their subfoundations.\n   */\n\n\n  function MDCSelectFoundation(adapter, foundationMap) {\n    if (foundationMap === void 0) {\n      foundationMap = {};\n    }\n\n    var _this = _super.call(this, tslib_1.__assign({}, MDCSelectFoundation.defaultAdapter, adapter)) || this; // Index of the currently selected menu item.\n\n\n    _this.selectedIndex_ = numbers.UNSET_INDEX; // Disabled state\n\n    _this.disabled_ = false; // isMenuOpen_ is used to track the state of the menu by listening to the MDCMenuSurface:closed event\n    // For reference, menu.open will return false if the menu is still closing, but isMenuOpen_ returns false only after\n    // the menu has closed\n\n    _this.isMenuOpen_ = false;\n    _this.leadingIcon_ = foundationMap.leadingIcon;\n    _this.helperText_ = foundationMap.helperText;\n    _this.menuItemValues_ = _this.adapter_.getMenuItemValues();\n    return _this;\n  }\n\n  Object.defineProperty(MDCSelectFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelectFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCSelectAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        activateBottomLine: function () {\n          return undefined;\n        },\n        deactivateBottomLine: function () {\n          return undefined;\n        },\n        getSelectedMenuItem: function () {\n          return null;\n        },\n        hasLabel: function () {\n          return false;\n        },\n        floatLabel: function () {\n          return undefined;\n        },\n        getLabelWidth: function () {\n          return 0;\n        },\n        hasOutline: function () {\n          return false;\n        },\n        notchOutline: function () {\n          return undefined;\n        },\n        closeOutline: function () {\n          return undefined;\n        },\n        setRippleCenter: function () {\n          return undefined;\n        },\n        notifyChange: function () {\n          return undefined;\n        },\n        setSelectedText: function () {\n          return undefined;\n        },\n        isSelectedTextFocused: function () {\n          return false;\n        },\n        getSelectedTextAttr: function () {\n          return '';\n        },\n        setSelectedTextAttr: function () {\n          return undefined;\n        },\n        openMenu: function () {\n          return undefined;\n        },\n        closeMenu: function () {\n          return undefined;\n        },\n        getAnchorElement: function () {\n          return null;\n        },\n        setMenuAnchorElement: function () {\n          return undefined;\n        },\n        setMenuAnchorCorner: function () {\n          return undefined;\n        },\n        setMenuWrapFocus: function () {\n          return undefined;\n        },\n        setAttributeAtIndex: function () {\n          return undefined;\n        },\n        removeAttributeAtIndex: function () {\n          return undefined;\n        },\n        focusMenuItemAtIndex: function () {\n          return undefined;\n        },\n        getMenuItemCount: function () {\n          return 0;\n        },\n        getMenuItemValues: function () {\n          return [];\n        },\n        getMenuItemTextAtIndex: function () {\n          return '';\n        },\n        getMenuItemAttr: function () {\n          return '';\n        },\n        addClassAtIndex: function () {\n          return undefined;\n        },\n        removeClassAtIndex: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** Returns the index of the currently selected menu item, or -1 if none. */\n\n  MDCSelectFoundation.prototype.getSelectedIndex = function () {\n    return this.selectedIndex_;\n  };\n\n  MDCSelectFoundation.prototype.setSelectedIndex = function (index, closeMenu) {\n    if (closeMenu === void 0) {\n      closeMenu = false;\n    }\n\n    if (index >= this.adapter_.getMenuItemCount()) {\n      return;\n    }\n\n    var previouslySelectedIndex = this.selectedIndex_;\n    this.selectedIndex_ = index;\n\n    if (this.selectedIndex_ === numbers.UNSET_INDEX) {\n      this.adapter_.setSelectedText('');\n    } else {\n      this.adapter_.setSelectedText(this.adapter_.getMenuItemTextAtIndex(this.selectedIndex_).trim());\n    }\n\n    if (previouslySelectedIndex !== numbers.UNSET_INDEX) {\n      this.adapter_.removeClassAtIndex(previouslySelectedIndex, cssClasses.SELECTED_ITEM_CLASS);\n      this.adapter_.removeAttributeAtIndex(previouslySelectedIndex, strings.ARIA_SELECTED_ATTR);\n    }\n\n    if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      this.adapter_.addClassAtIndex(this.selectedIndex_, cssClasses.SELECTED_ITEM_CLASS);\n      this.adapter_.setAttributeAtIndex(this.selectedIndex_, strings.ARIA_SELECTED_ATTR, 'true');\n    }\n\n    this.layout();\n\n    if (closeMenu) {\n      this.adapter_.closeMenu();\n    }\n\n    this.handleChange();\n  };\n\n  MDCSelectFoundation.prototype.setValue = function (value) {\n    var index = this.menuItemValues_.indexOf(value);\n    this.setSelectedIndex(index);\n    this.handleChange();\n  };\n\n  MDCSelectFoundation.prototype.getValue = function () {\n    var listItem = this.adapter_.getSelectedMenuItem();\n\n    if (listItem) {\n      return this.adapter_.getMenuItemAttr(listItem, strings.VALUE_ATTR) || '';\n    }\n\n    return '';\n  };\n\n  MDCSelectFoundation.prototype.getDisabled = function () {\n    return this.disabled_;\n  };\n\n  MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {\n    this.disabled_ = isDisabled;\n\n    if (this.disabled_) {\n      this.adapter_.addClass(cssClasses.DISABLED);\n      this.adapter_.closeMenu();\n    } else {\n      this.adapter_.removeClass(cssClasses.DISABLED);\n    }\n\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setDisabled(this.disabled_);\n    }\n\n    this.adapter_.setSelectedTextAttr('tabindex', this.disabled_ ? '-1' : '0');\n    this.adapter_.setSelectedTextAttr('aria-disabled', this.disabled_.toString());\n  };\n  /**\n   * @param content Sets the content of the helper text.\n   */\n\n\n  MDCSelectFoundation.prototype.setHelperTextContent = function (content) {\n    if (this.helperText_) {\n      this.helperText_.setContent(content);\n    }\n  };\n\n  MDCSelectFoundation.prototype.layout = function () {\n    if (this.adapter_.hasLabel()) {\n      var openNotch = this.getValue().length > 0;\n      this.notchOutline(openNotch);\n    }\n  };\n\n  MDCSelectFoundation.prototype.handleMenuOpened = function () {\n    if (this.adapter_.getMenuItemValues().length === 0) {\n      return;\n    }\n\n    this.adapter_.addClass(cssClasses.ACTIVATED); // Menu should open to the last selected element, should open to first menu item otherwise.\n\n    var focusItemIndex = this.selectedIndex_ >= 0 ? this.selectedIndex_ : 0;\n    this.adapter_.focusMenuItemAtIndex(focusItemIndex);\n  };\n\n  MDCSelectFoundation.prototype.handleMenuClosed = function () {\n    this.adapter_.removeClass(cssClasses.ACTIVATED);\n    this.isMenuOpen_ = false;\n    this.adapter_.setSelectedTextAttr('aria-expanded', 'false'); // Unfocus the select if menu is closed without a selection\n\n    if (!this.adapter_.isSelectedTextFocused()) {\n      this.blur_();\n    }\n  };\n  /**\n   * Handles value changes, via change event or programmatic updates.\n   */\n\n\n  MDCSelectFoundation.prototype.handleChange = function () {\n    this.updateLabel_();\n    this.adapter_.notifyChange(this.getValue());\n    var isRequired = this.adapter_.hasClass(cssClasses.REQUIRED);\n\n    if (isRequired) {\n      this.setValid(this.isValid());\n\n      if (this.helperText_) {\n        this.helperText_.setValidity(this.isValid());\n      }\n    }\n  };\n\n  MDCSelectFoundation.prototype.handleMenuItemAction = function (index) {\n    this.setSelectedIndex(index,\n    /** closeMenu */\n    true);\n  };\n  /**\n   * Handles focus events from select element.\n   */\n\n\n  MDCSelectFoundation.prototype.handleFocus = function () {\n    this.adapter_.addClass(cssClasses.FOCUSED);\n\n    if (this.adapter_.hasLabel()) {\n      this.notchOutline(true);\n      this.adapter_.floatLabel(true);\n    }\n\n    this.adapter_.activateBottomLine();\n\n    if (this.helperText_) {\n      this.helperText_.showToScreenReader();\n    }\n  };\n  /**\n   * Handles blur events from select element.\n   */\n\n\n  MDCSelectFoundation.prototype.handleBlur = function () {\n    if (this.isMenuOpen_) {\n      return;\n    }\n\n    this.blur_();\n  };\n\n  MDCSelectFoundation.prototype.handleClick = function (normalizedX) {\n    if (this.isMenuOpen_) {\n      return;\n    }\n\n    this.adapter_.setRippleCenter(normalizedX);\n    this.adapter_.openMenu();\n    this.isMenuOpen_ = true;\n    this.adapter_.setSelectedTextAttr('aria-expanded', 'true');\n  };\n\n  MDCSelectFoundation.prototype.handleKeydown = function (event) {\n    if (this.isMenuOpen_) {\n      return;\n    }\n\n    var isEnter = event.key === 'Enter' || event.keyCode === 13;\n    var isSpace = event.key === 'Space' || event.keyCode === 32;\n    var arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n    var arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n    if (this.adapter_.hasClass(cssClasses.FOCUSED) && (isEnter || isSpace || arrowUp || arrowDown)) {\n      this.adapter_.openMenu();\n      this.isMenuOpen_ = true;\n      this.adapter_.setSelectedTextAttr('aria-expanded', 'true');\n      event.preventDefault();\n    }\n  };\n  /**\n   * Opens/closes the notched outline.\n   */\n\n\n  MDCSelectFoundation.prototype.notchOutline = function (openNotch) {\n    if (!this.adapter_.hasOutline()) {\n      return;\n    }\n\n    var isFocused = this.adapter_.hasClass(cssClasses.FOCUSED);\n\n    if (openNotch) {\n      var labelScale = numbers.LABEL_SCALE;\n      var labelWidth = this.adapter_.getLabelWidth() * labelScale;\n      this.adapter_.notchOutline(labelWidth);\n    } else if (!isFocused) {\n      this.adapter_.closeOutline();\n    }\n  };\n  /**\n   * Sets the aria label of the leading icon.\n   */\n\n\n  MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setAriaLabel(label);\n    }\n  };\n  /**\n   * Sets the text content of the leading icon.\n   */\n\n\n  MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setContent(content);\n    }\n  };\n\n  MDCSelectFoundation.prototype.setValid = function (isValid) {\n    this.adapter_.setSelectedTextAttr('aria-invalid', (!isValid).toString());\n\n    if (isValid) {\n      this.adapter_.removeClass(cssClasses.INVALID);\n    } else {\n      this.adapter_.addClass(cssClasses.INVALID);\n    }\n  };\n\n  MDCSelectFoundation.prototype.isValid = function () {\n    if (this.adapter_.hasClass(cssClasses.REQUIRED) && !this.adapter_.hasClass(cssClasses.DISABLED)) {\n      // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element\n      // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.\n      return this.selectedIndex_ !== numbers.UNSET_INDEX && (this.selectedIndex_ !== 0 || Boolean(this.getValue()));\n    }\n\n    return true;\n  };\n\n  MDCSelectFoundation.prototype.setRequired = function (isRequired) {\n    if (isRequired) {\n      this.adapter_.addClass(cssClasses.REQUIRED);\n    } else {\n      this.adapter_.removeClass(cssClasses.REQUIRED);\n    }\n\n    this.adapter_.setSelectedTextAttr('aria-required', isRequired.toString());\n  };\n\n  MDCSelectFoundation.prototype.getRequired = function () {\n    return this.adapter_.getSelectedTextAttr('aria-required') === 'true';\n  };\n\n  MDCSelectFoundation.prototype.init = function () {\n    var anchorEl = this.adapter_.getAnchorElement();\n\n    if (anchorEl) {\n      this.adapter_.setMenuAnchorElement(anchorEl);\n      this.adapter_.setMenuAnchorCorner(Corner.BOTTOM_START);\n    }\n\n    this.adapter_.setMenuWrapFocus(false);\n    var value = this.getValue();\n\n    if (value) {\n      this.setValue(value);\n    } // Initially sync floating label\n\n\n    this.updateLabel_();\n  };\n  /**\n   * Notches the outline and floats the label when appropriate.\n   */\n\n\n  MDCSelectFoundation.prototype.updateLabel_ = function () {\n    var value = this.getValue();\n    var optionHasValue = value.length > 0;\n\n    if (this.adapter_.hasLabel()) {\n      this.notchOutline(optionHasValue);\n\n      if (!this.adapter_.hasClass(cssClasses.FOCUSED)) {\n        this.adapter_.floatLabel(optionHasValue);\n      }\n    }\n  };\n  /**\n   * Unfocuses the select component.\n   */\n\n\n  MDCSelectFoundation.prototype.blur_ = function () {\n    this.adapter_.removeClass(cssClasses.FOCUSED);\n    this.updateLabel_();\n    this.adapter_.deactivateBottomLine();\n    var isRequired = this.adapter_.hasClass(cssClasses.REQUIRED);\n\n    if (isRequired) {\n      this.setValid(this.isValid());\n\n      if (this.helperText_) {\n        this.helperText_.setValidity(this.isValid());\n      }\n    }\n  };\n\n  return MDCSelectFoundation;\n}(MDCFoundation);\n\nexport { MDCSelectFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCSelectFoundation; //# sourceMappingURL=foundation.js.map","map":null,"metadata":{},"sourceType":"module"}