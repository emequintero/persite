{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Priorities for the announce function\n */\nexport var AnnouncerPriority = /*#__PURE__*/(() => {\n  (function (AnnouncerPriority) {\n    AnnouncerPriority[\"POLITE\"] = \"polite\";\n    AnnouncerPriority[\"ASSERTIVE\"] = \"assertive\";\n  })(AnnouncerPriority || (AnnouncerPriority = {}));\n\n  return AnnouncerPriority;\n})();\n\n/**\n * Announces the given message with optional priority, defaulting to \"polite\"\n */\nexport function announce(message, priority) {\n  Announcer.getInstance().say(message, priority);\n}\n\nvar Announcer =\n/** @class */\nfunction () {\n  // Constructor made private to ensure only the singleton is used\n  function Announcer() {\n    this.liveRegions = new Map();\n  }\n\n  Announcer.getInstance = function () {\n    if (!Announcer.instance) {\n      Announcer.instance = new Announcer();\n    }\n\n    return Announcer.instance;\n  };\n\n  Announcer.prototype.say = function (message, priority) {\n    if (priority === void 0) {\n      priority = AnnouncerPriority.POLITE;\n    }\n\n    var liveRegion = this.getLiveRegion(priority); // Reset the region to pick up the message, even if the message is the\n    // exact same as before.\n\n    liveRegion.textContent = ''; // Timeout is necessary for screen readers like NVDA and VoiceOver.\n\n    setTimeout(function () {\n      liveRegion.textContent = message;\n    }, 1);\n  };\n\n  Announcer.prototype.getLiveRegion = function (priority) {\n    var existingLiveRegion = this.liveRegions.get(priority);\n\n    if (existingLiveRegion && document.body.contains(existingLiveRegion)) {\n      return existingLiveRegion;\n    }\n\n    var liveRegion = this.createLiveRegion(priority);\n    this.liveRegions.set(priority, liveRegion);\n    return liveRegion;\n  };\n\n  Announcer.prototype.createLiveRegion = function (priority) {\n    var el = document.createElement('div');\n    el.style.position = 'absolute';\n    el.style.top = '-9999px';\n    el.style.left = '-9999px';\n    el.style.height = '1px';\n    el.style.overflow = 'hidden';\n    el.setAttribute('aria-atomic', 'true');\n    el.setAttribute('aria-live', priority);\n    document.body.appendChild(el);\n    return el;\n  };\n\n  return Announcer;\n}(); //# sourceMappingURL=announce.js.map","map":null,"metadata":{},"sourceType":"module"}