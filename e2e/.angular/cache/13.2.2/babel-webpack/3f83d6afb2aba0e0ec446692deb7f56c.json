{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCCheckbox } from '@material/checkbox/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { cssClasses, events, strings } from './constants';\nimport { MDCDataTableFoundation } from './foundation';\n\nvar MDCDataTable =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCDataTable, _super);\n\n  function MDCDataTable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCDataTable.attachTo = function (root) {\n    return new MDCDataTable(root);\n  };\n\n  MDCDataTable.prototype.initialize = function (checkboxFactory) {\n    if (checkboxFactory === void 0) {\n      checkboxFactory = function (el) {\n        return new MDCCheckbox(el);\n      };\n    }\n\n    this.checkboxFactory_ = checkboxFactory;\n  };\n\n  MDCDataTable.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.headerRow_ = this.root_.querySelector(\".\" + cssClasses.HEADER_ROW);\n\n    this.handleHeaderRowCheckboxChange_ = function () {\n      return _this.foundation_.handleHeaderRowCheckboxChange();\n    };\n\n    this.headerRow_.addEventListener('change', this.handleHeaderRowCheckboxChange_);\n    this.content_ = this.root_.querySelector(\".\" + cssClasses.CONTENT);\n\n    this.handleRowCheckboxChange_ = function (event) {\n      return _this.foundation_.handleRowCheckboxChange(event);\n    };\n\n    this.content_.addEventListener('change', this.handleRowCheckboxChange_);\n    this.layout();\n  };\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   */\n\n\n  MDCDataTable.prototype.layout = function () {\n    this.foundation_.layout();\n  };\n  /**\n   * @return Returns array of row elements.\n   */\n\n\n  MDCDataTable.prototype.getRows = function () {\n    return this.foundation_.getRows();\n  };\n  /**\n   * @return Returns array of selected row ids.\n   */\n\n\n  MDCDataTable.prototype.getSelectedRowIds = function () {\n    return this.foundation_.getSelectedRowIds();\n  };\n  /**\n   * Sets selected row ids. Overwrites previously selected rows.\n   * @param rowIds Array of row ids that needs to be selected.\n   */\n\n\n  MDCDataTable.prototype.setSelectedRowIds = function (rowIds) {\n    this.foundation_.setSelectedRowIds(rowIds);\n  };\n\n  MDCDataTable.prototype.destroy = function () {\n    this.headerRow_.removeEventListener('change', this.handleHeaderRowCheckboxChange_);\n    this.content_.removeEventListener('change', this.handleRowCheckboxChange_);\n    this.headerRowCheckbox_.destroy();\n    this.rowCheckboxList_.forEach(function (checkbox) {\n      return checkbox.destroy();\n    });\n  };\n\n  MDCDataTable.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      addClassAtRowIndex: function (rowIndex, className) {\n        return _this.getRows()[rowIndex].classList.add(className);\n      },\n      getRowCount: function () {\n        return _this.getRows().length;\n      },\n      getRowElements: function () {\n        return [].slice.call(_this.root_.querySelectorAll(strings.ROW_SELECTOR));\n      },\n      getRowIdAtIndex: function (rowIndex) {\n        return _this.getRows()[rowIndex].getAttribute(strings.DATA_ROW_ID_ATTR);\n      },\n      getRowIndexByChildElement: function (el) {\n        return _this.getRows().indexOf(closest(el, strings.ROW_SELECTOR));\n      },\n      getSelectedRowCount: function () {\n        return _this.root_.querySelectorAll(strings.ROW_SELECTED_SELECTOR).length;\n      },\n      isCheckboxAtRowIndexChecked: function (rowIndex) {\n        return _this.rowCheckboxList_[rowIndex].checked;\n      },\n      isHeaderRowCheckboxChecked: function () {\n        return _this.headerRowCheckbox_.checked;\n      },\n      isRowsSelectable: function () {\n        return !!_this.root_.querySelector(strings.ROW_CHECKBOX_SELECTOR);\n      },\n      notifyRowSelectionChanged: function (data) {\n        _this.emit(events.ROW_SELECTION_CHANGED, {\n          row: _this.getRowByIndex_(data.rowIndex),\n          rowId: _this.getRowIdByIndex_(data.rowIndex),\n          rowIndex: data.rowIndex,\n          selected: data.selected\n        },\n        /** shouldBubble */\n        true);\n      },\n      notifySelectedAll: function () {\n        return _this.emit(events.SELECTED_ALL, {},\n        /** shouldBubble */\n        true);\n      },\n      notifyUnselectedAll: function () {\n        return _this.emit(events.UNSELECTED_ALL, {},\n        /** shouldBubble */\n        true);\n      },\n      registerHeaderRowCheckbox: function () {\n        if (_this.headerRowCheckbox_) {\n          _this.headerRowCheckbox_.destroy();\n        }\n\n        var checkboxEl = _this.root_.querySelector(strings.HEADER_ROW_CHECKBOX_SELECTOR);\n\n        _this.headerRowCheckbox_ = _this.checkboxFactory_(checkboxEl);\n      },\n      registerRowCheckboxes: function () {\n        if (_this.rowCheckboxList_) {\n          _this.rowCheckboxList_.forEach(function (checkbox) {\n            return checkbox.destroy();\n          });\n        }\n\n        _this.rowCheckboxList_ = [];\n\n        _this.getRows().forEach(function (rowEl) {\n          var checkbox = _this.checkboxFactory_(rowEl.querySelector(strings.ROW_CHECKBOX_SELECTOR));\n\n          _this.rowCheckboxList_.push(checkbox);\n        });\n      },\n      removeClassAtRowIndex: function (rowIndex, className) {\n        _this.getRows()[rowIndex].classList.remove(className);\n      },\n      setAttributeAtRowIndex: function (rowIndex, attr, value) {\n        _this.getRows()[rowIndex].setAttribute(attr, value);\n      },\n      setHeaderRowCheckboxChecked: function (checked) {\n        _this.headerRowCheckbox_.checked = checked;\n      },\n      setHeaderRowCheckboxIndeterminate: function (indeterminate) {\n        _this.headerRowCheckbox_.indeterminate = indeterminate;\n      },\n      setRowCheckboxCheckedAtIndex: function (rowIndex, checked) {\n        _this.rowCheckboxList_[rowIndex].checked = checked;\n      }\n    };\n    return new MDCDataTableFoundation(adapter);\n  };\n\n  MDCDataTable.prototype.getRowByIndex_ = function (index) {\n    return this.getRows()[index];\n  };\n\n  MDCDataTable.prototype.getRowIdByIndex_ = function (index) {\n    return this.getRowByIndex_(index).getAttribute(strings.DATA_ROW_ID_ATTR);\n  };\n\n  return MDCDataTable;\n}(MDCComponent);\n\nexport { MDCDataTable }; //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}