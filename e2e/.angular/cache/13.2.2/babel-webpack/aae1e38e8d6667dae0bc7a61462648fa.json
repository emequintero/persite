{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { numbers } from '../constants';\nimport { MDCTopAppBarBaseFoundation } from '../foundation';\nvar INITIAL_VALUE = 0;\n\nvar MDCTopAppBarFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCTopAppBarFoundation, _super);\n  /* istanbul ignore next: optional argument is not a branch statement */\n\n\n  function MDCTopAppBarFoundation(adapter) {\n    var _this = _super.call(this, adapter) || this;\n    /**\n     * Indicates if the top app bar was docked in the previous scroll handler iteration.\n     */\n\n\n    _this.wasDocked_ = true;\n    /**\n     * Indicates if the top app bar is docked in the fully shown position.\n     */\n\n    _this.isDockedShowing_ = true;\n    /**\n     * Variable for current scroll position of the top app bar\n     */\n\n    _this.currentAppBarOffsetTop_ = 0;\n    /**\n     * Used to prevent the top app bar from being scrolled out of view during resize events\n     */\n\n    _this.isCurrentlyBeingResized_ = false;\n    /**\n     * The timeout that's used to throttle the resize events\n     */\n\n    _this.resizeThrottleId_ = INITIAL_VALUE;\n    /**\n     * The timeout that's used to debounce toggling the isCurrentlyBeingResized_ variable after a resize\n     */\n\n    _this.resizeDebounceId_ = INITIAL_VALUE;\n    _this.lastScrollPosition_ = _this.adapter_.getViewportScrollY();\n    _this.topAppBarHeight_ = _this.adapter_.getTopAppBarHeight();\n    return _this;\n  }\n\n  MDCTopAppBarFoundation.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.adapter_.setStyle('top', '');\n  };\n  /**\n   * Scroll handler for the default scroll behavior of the top app bar.\n   * @override\n   */\n\n\n  MDCTopAppBarFoundation.prototype.handleTargetScroll = function () {\n    var currentScrollPosition = Math.max(this.adapter_.getViewportScrollY(), 0);\n    var diff = currentScrollPosition - this.lastScrollPosition_;\n    this.lastScrollPosition_ = currentScrollPosition; // If the window is being resized the lastScrollPosition_ needs to be updated but the\n    // current scroll of the top app bar should stay in the same position.\n\n    if (!this.isCurrentlyBeingResized_) {\n      this.currentAppBarOffsetTop_ -= diff;\n\n      if (this.currentAppBarOffsetTop_ > 0) {\n        this.currentAppBarOffsetTop_ = 0;\n      } else if (Math.abs(this.currentAppBarOffsetTop_) > this.topAppBarHeight_) {\n        this.currentAppBarOffsetTop_ = -this.topAppBarHeight_;\n      }\n\n      this.moveTopAppBar_();\n    }\n  };\n  /**\n   * Top app bar resize handler that throttle/debounce functions that execute updates.\n   * @override\n   */\n\n\n  MDCTopAppBarFoundation.prototype.handleWindowResize = function () {\n    var _this = this; // Throttle resize events 10 p/s\n\n\n    if (!this.resizeThrottleId_) {\n      this.resizeThrottleId_ = setTimeout(function () {\n        _this.resizeThrottleId_ = INITIAL_VALUE;\n\n        _this.throttledResizeHandler_();\n      }, numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);\n    }\n\n    this.isCurrentlyBeingResized_ = true;\n\n    if (this.resizeDebounceId_) {\n      clearTimeout(this.resizeDebounceId_);\n    }\n\n    this.resizeDebounceId_ = setTimeout(function () {\n      _this.handleTargetScroll();\n\n      _this.isCurrentlyBeingResized_ = false;\n      _this.resizeDebounceId_ = INITIAL_VALUE;\n    }, numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);\n  };\n  /**\n   * Function to determine if the DOM needs to update.\n   */\n\n\n  MDCTopAppBarFoundation.prototype.checkForUpdate_ = function () {\n    var offscreenBoundaryTop = -this.topAppBarHeight_;\n    var hasAnyPixelsOffscreen = this.currentAppBarOffsetTop_ < 0;\n    var hasAnyPixelsOnscreen = this.currentAppBarOffsetTop_ > offscreenBoundaryTop;\n    var partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen; // If it's partially showing, it can't be docked.\n\n    if (partiallyShowing) {\n      this.wasDocked_ = false;\n    } else {\n      // Not previously docked and not partially showing, it's now docked.\n      if (!this.wasDocked_) {\n        this.wasDocked_ = true;\n        return true;\n      } else if (this.isDockedShowing_ !== hasAnyPixelsOnscreen) {\n        this.isDockedShowing_ = hasAnyPixelsOnscreen;\n        return true;\n      }\n    }\n\n    return partiallyShowing;\n  };\n  /**\n   * Function to move the top app bar if needed.\n   */\n\n\n  MDCTopAppBarFoundation.prototype.moveTopAppBar_ = function () {\n    if (this.checkForUpdate_()) {\n      // Once the top app bar is fully hidden we use the max potential top app bar height as our offset\n      // so the top app bar doesn't show if the window resizes and the new height > the old height.\n      var offset = this.currentAppBarOffsetTop_;\n\n      if (Math.abs(offset) >= this.topAppBarHeight_) {\n        offset = -numbers.MAX_TOP_APP_BAR_HEIGHT;\n      }\n\n      this.adapter_.setStyle('top', offset + 'px');\n    }\n  };\n  /**\n   * Throttled function that updates the top app bar scrolled values if the\n   * top app bar height changes.\n   */\n\n\n  MDCTopAppBarFoundation.prototype.throttledResizeHandler_ = function () {\n    var currentHeight = this.adapter_.getTopAppBarHeight();\n\n    if (this.topAppBarHeight_ !== currentHeight) {\n      this.wasDocked_ = false; // Since the top app bar has a different height depending on the screen width, this\n      // will ensure that the top app bar remains in the correct location if\n      // completely hidden and a resize makes the top app bar a different height.\n\n      this.currentAppBarOffsetTop_ -= this.topAppBarHeight_ - currentHeight;\n      this.topAppBarHeight_ = currentHeight;\n    }\n\n    this.handleTargetScroll();\n  };\n\n  return MDCTopAppBarFoundation;\n}(MDCTopAppBarBaseFoundation);\n\nexport { MDCTopAppBarFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTopAppBarFoundation; //# sourceMappingURL=foundation.js.map","map":null,"metadata":{},"sourceType":"module"}