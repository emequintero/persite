{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { announce } from '@material/dom/announce';\nimport { MDCChip } from '../chip/component';\nimport { MDCChipFoundation } from '../chip/foundation';\nimport { MDCChipSetFoundation } from './foundation';\nvar _a = MDCChipFoundation.strings,\n    INTERACTION_EVENT = _a.INTERACTION_EVENT,\n    SELECTION_EVENT = _a.SELECTION_EVENT,\n    REMOVAL_EVENT = _a.REMOVAL_EVENT,\n    NAVIGATION_EVENT = _a.NAVIGATION_EVENT;\nvar CHIP_SELECTOR = MDCChipSetFoundation.strings.CHIP_SELECTOR;\nvar idCounter = 0;\n\nvar MDCChipSet =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCChipSet, _super);\n\n  function MDCChipSet() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCChipSet.attachTo = function (root) {\n    return new MDCChipSet(root);\n  };\n\n  Object.defineProperty(MDCChipSet.prototype, \"chips\", {\n    get: function () {\n      return this.chips_.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipSet.prototype, \"selectedChipIds\", {\n    /**\n     * @return An array of the IDs of all selected chips.\n     */\n    get: function () {\n      return this.foundation_.getSelectedChipIds();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @param chipFactory A function which creates a new MDCChip.\n   */\n\n  MDCChipSet.prototype.initialize = function (chipFactory) {\n    if (chipFactory === void 0) {\n      chipFactory = function (el) {\n        return new MDCChip(el);\n      };\n    }\n\n    this.chipFactory_ = chipFactory;\n    this.chips_ = this.instantiateChips_(this.chipFactory_);\n  };\n\n  MDCChipSet.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.chips_.forEach(function (chip) {\n      if (chip.id && chip.selected) {\n        _this.foundation_.select(chip.id);\n      }\n    });\n\n    this.handleChipInteraction_ = function (evt) {\n      return _this.foundation_.handleChipInteraction(evt.detail);\n    };\n\n    this.handleChipSelection_ = function (evt) {\n      return _this.foundation_.handleChipSelection(evt.detail);\n    };\n\n    this.handleChipRemoval_ = function (evt) {\n      return _this.foundation_.handleChipRemoval(evt.detail);\n    };\n\n    this.handleChipNavigation_ = function (evt) {\n      return _this.foundation_.handleChipNavigation(evt.detail);\n    };\n\n    this.listen(INTERACTION_EVENT, this.handleChipInteraction_);\n    this.listen(SELECTION_EVENT, this.handleChipSelection_);\n    this.listen(REMOVAL_EVENT, this.handleChipRemoval_);\n    this.listen(NAVIGATION_EVENT, this.handleChipNavigation_);\n  };\n\n  MDCChipSet.prototype.destroy = function () {\n    this.chips_.forEach(function (chip) {\n      chip.destroy();\n    });\n    this.unlisten(INTERACTION_EVENT, this.handleChipInteraction_);\n    this.unlisten(SELECTION_EVENT, this.handleChipSelection_);\n    this.unlisten(REMOVAL_EVENT, this.handleChipRemoval_);\n    this.unlisten(NAVIGATION_EVENT, this.handleChipNavigation_);\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Adds a new chip object to the chip set from the given chip element.\n   */\n\n\n  MDCChipSet.prototype.addChip = function (chipEl) {\n    chipEl.id = chipEl.id || \"mdc-chip-\" + ++idCounter;\n    this.chips_.push(this.chipFactory_(chipEl));\n  };\n\n  MDCChipSet.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      announceMessage: function (message) {\n        announce(message);\n      },\n      focusChipPrimaryActionAtIndex: function (index) {\n        _this.chips_[index].focusPrimaryAction();\n      },\n      focusChipTrailingActionAtIndex: function (index) {\n        _this.chips_[index].focusTrailingAction();\n      },\n      getChipListCount: function () {\n        return _this.chips_.length;\n      },\n      getIndexOfChipById: function (chipId) {\n        return _this.findChipIndex_(chipId);\n      },\n      hasClass: function (className) {\n        return _this.root_.classList.contains(className);\n      },\n      isRTL: function () {\n        return window.getComputedStyle(_this.root_).getPropertyValue('direction') === 'rtl';\n      },\n      removeChipAtIndex: function (index) {\n        if (index >= 0 && index < _this.chips_.length) {\n          _this.chips_[index].destroy();\n\n          _this.chips_[index].remove();\n\n          _this.chips_.splice(index, 1);\n        }\n      },\n      removeFocusFromChipAtIndex: function (index) {\n        _this.chips_[index].removeFocus();\n      },\n      selectChipAtIndex: function (index, selected, shouldNotifyClients) {\n        if (index >= 0 && index < _this.chips_.length) {\n          _this.chips_[index].setSelectedFromChipSet(selected, shouldNotifyClients);\n        }\n      }\n    };\n    return new MDCChipSetFoundation(adapter);\n  };\n  /**\n   * Instantiates chip components on all of the chip set's child chip elements.\n   */\n\n\n  MDCChipSet.prototype.instantiateChips_ = function (chipFactory) {\n    var chipElements = [].slice.call(this.root_.querySelectorAll(CHIP_SELECTOR));\n    return chipElements.map(function (el) {\n      el.id = el.id || \"mdc-chip-\" + ++idCounter;\n      return chipFactory(el);\n    });\n  };\n  /**\n   * Returns the index of the chip with the given id, or -1 if the chip does not exist.\n   */\n\n\n  MDCChipSet.prototype.findChipIndex_ = function (chipId) {\n    for (var i = 0; i < this.chips_.length; i++) {\n      if (this.chips_[i].id === chipId) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  return MDCChipSet;\n}(MDCComponent);\n\nexport { MDCChipSet }; //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}