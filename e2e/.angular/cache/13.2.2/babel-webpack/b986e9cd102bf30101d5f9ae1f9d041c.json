{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { MDCTabIndicator } from '@material/tab-indicator/component';\nimport { MDCTabFoundation } from './foundation';\n\nvar MDCTab =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCTab, _super);\n\n  function MDCTab() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCTab.attachTo = function (root) {\n    return new MDCTab(root);\n  };\n\n  MDCTab.prototype.initialize = function (rippleFactory, tabIndicatorFactory) {\n    if (rippleFactory === void 0) {\n      rippleFactory = function (el, foundation) {\n        return new MDCRipple(el, foundation);\n      };\n    }\n\n    if (tabIndicatorFactory === void 0) {\n      tabIndicatorFactory = function (el) {\n        return new MDCTabIndicator(el);\n      };\n    }\n\n    this.id = this.root_.id;\n    var rippleSurface = this.root_.querySelector(MDCTabFoundation.strings.RIPPLE_SELECTOR);\n\n    var rippleAdapter = tslib_1.__assign({}, MDCRipple.createAdapter(this), {\n      addClass: function (className) {\n        return rippleSurface.classList.add(className);\n      },\n      removeClass: function (className) {\n        return rippleSurface.classList.remove(className);\n      },\n      updateCssVariable: function (varName, value) {\n        return rippleSurface.style.setProperty(varName, value);\n      }\n    });\n\n    var rippleFoundation = new MDCRippleFoundation(rippleAdapter);\n    this.ripple_ = rippleFactory(this.root_, rippleFoundation);\n    var tabIndicatorElement = this.root_.querySelector(MDCTabFoundation.strings.TAB_INDICATOR_SELECTOR);\n    this.tabIndicator_ = tabIndicatorFactory(tabIndicatorElement);\n    this.content_ = this.root_.querySelector(MDCTabFoundation.strings.CONTENT_SELECTOR);\n  };\n\n  MDCTab.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.handleClick_ = function () {\n      return _this.foundation_.handleClick();\n    };\n\n    this.listen('click', this.handleClick_);\n  };\n\n  MDCTab.prototype.destroy = function () {\n    this.unlisten('click', this.handleClick_);\n    this.ripple_.destroy();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  MDCTab.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      setAttr: function (attr, value) {\n        return _this.root_.setAttribute(attr, value);\n      },\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      hasClass: function (className) {\n        return _this.root_.classList.contains(className);\n      },\n      activateIndicator: function (previousIndicatorClientRect) {\n        return _this.tabIndicator_.activate(previousIndicatorClientRect);\n      },\n      deactivateIndicator: function () {\n        return _this.tabIndicator_.deactivate();\n      },\n      notifyInteracted: function () {\n        return _this.emit(MDCTabFoundation.strings.INTERACTED_EVENT, {\n          tabId: _this.id\n        }, true\n        /* bubble */\n        );\n      },\n      getOffsetLeft: function () {\n        return _this.root_.offsetLeft;\n      },\n      getOffsetWidth: function () {\n        return _this.root_.offsetWidth;\n      },\n      getContentOffsetLeft: function () {\n        return _this.content_.offsetLeft;\n      },\n      getContentOffsetWidth: function () {\n        return _this.content_.offsetWidth;\n      },\n      focus: function () {\n        return _this.root_.focus();\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    return new MDCTabFoundation(adapter);\n  };\n\n  Object.defineProperty(MDCTab.prototype, \"active\", {\n    /**\n     * Getter for the active state of the tab\n     */\n    get: function () {\n      return this.foundation_.isActive();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTab.prototype, \"focusOnActivate\", {\n    set: function (focusOnActivate) {\n      this.foundation_.setFocusOnActivate(focusOnActivate);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Activates the tab\n   */\n\n  MDCTab.prototype.activate = function (computeIndicatorClientRect) {\n    this.foundation_.activate(computeIndicatorClientRect);\n  };\n  /**\n   * Deactivates the tab\n   */\n\n\n  MDCTab.prototype.deactivate = function () {\n    this.foundation_.deactivate();\n  };\n  /**\n   * Returns the indicator's client rect\n   */\n\n\n  MDCTab.prototype.computeIndicatorClientRect = function () {\n    return this.tabIndicator_.computeContentClientRect();\n  };\n\n  MDCTab.prototype.computeDimensions = function () {\n    return this.foundation_.computeDimensions();\n  };\n  /**\n   * Focuses the tab\n   */\n\n\n  MDCTab.prototype.focus = function () {\n    this.root_.focus();\n  };\n\n  return MDCTab;\n}(MDCComponent);\n\nexport { MDCTab }; //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}