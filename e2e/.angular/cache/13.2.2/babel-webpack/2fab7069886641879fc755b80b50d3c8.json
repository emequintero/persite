{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCTabFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCTabFoundation, _super);\n\n  function MDCTabFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCTabFoundation.defaultAdapter, adapter)) || this;\n\n    _this.focusOnActivate_ = true;\n    return _this;\n  }\n\n  Object.defineProperty(MDCTabFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTabFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTabFoundation, \"defaultAdapter\", {\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return false;\n        },\n        setAttr: function () {\n          return undefined;\n        },\n        activateIndicator: function () {\n          return undefined;\n        },\n        deactivateIndicator: function () {\n          return undefined;\n        },\n        notifyInteracted: function () {\n          return undefined;\n        },\n        getOffsetLeft: function () {\n          return 0;\n        },\n        getOffsetWidth: function () {\n          return 0;\n        },\n        getContentOffsetLeft: function () {\n          return 0;\n        },\n        getContentOffsetWidth: function () {\n          return 0;\n        },\n        focus: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCTabFoundation.prototype.handleClick = function () {\n    // It's up to the parent component to keep track of the active Tab and\n    // ensure we don't activate a Tab that's already active.\n    this.adapter_.notifyInteracted();\n  };\n\n  MDCTabFoundation.prototype.isActive = function () {\n    return this.adapter_.hasClass(cssClasses.ACTIVE);\n  };\n  /**\n   * Sets whether the tab should focus itself when activated\n   */\n\n\n  MDCTabFoundation.prototype.setFocusOnActivate = function (focusOnActivate) {\n    this.focusOnActivate_ = focusOnActivate;\n  };\n  /**\n   * Activates the Tab\n   */\n\n\n  MDCTabFoundation.prototype.activate = function (previousIndicatorClientRect) {\n    this.adapter_.addClass(cssClasses.ACTIVE);\n    this.adapter_.setAttr(strings.ARIA_SELECTED, 'true');\n    this.adapter_.setAttr(strings.TABINDEX, '0');\n    this.adapter_.activateIndicator(previousIndicatorClientRect);\n\n    if (this.focusOnActivate_) {\n      this.adapter_.focus();\n    }\n  };\n  /**\n   * Deactivates the Tab\n   */\n\n\n  MDCTabFoundation.prototype.deactivate = function () {\n    // Early exit\n    if (!this.isActive()) {\n      return;\n    }\n\n    this.adapter_.removeClass(cssClasses.ACTIVE);\n    this.adapter_.setAttr(strings.ARIA_SELECTED, 'false');\n    this.adapter_.setAttr(strings.TABINDEX, '-1');\n    this.adapter_.deactivateIndicator();\n  };\n  /**\n   * Returns the dimensions of the Tab\n   */\n\n\n  MDCTabFoundation.prototype.computeDimensions = function () {\n    var rootWidth = this.adapter_.getOffsetWidth();\n    var rootLeft = this.adapter_.getOffsetLeft();\n    var contentWidth = this.adapter_.getContentOffsetWidth();\n    var contentLeft = this.adapter_.getContentOffsetLeft();\n    return {\n      contentLeft: rootLeft + contentLeft,\n      contentRight: rootLeft + contentLeft + contentWidth,\n      rootLeft: rootLeft,\n      rootRight: rootLeft + rootWidth\n    };\n  };\n\n  return MDCTabFoundation;\n}(MDCFoundation);\n\nexport { MDCTabFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTabFoundation; //# sourceMappingURL=foundation.js.map","map":null,"metadata":{},"sourceType":"module"}