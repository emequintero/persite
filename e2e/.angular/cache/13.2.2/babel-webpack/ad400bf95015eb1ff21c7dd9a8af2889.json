{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { Directive, NgZone, ElementRef, NgModule } from '@angular/core';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport { MDCComponent } from '@angular-mdc/web/base';\nimport { MDCLineRippleFoundation } from '@material/line-ripple';\n/**\n * @fileoverview added by tsickle\n * Generated from: line-ripple/line-ripple.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nlet MdcLineRipple = /*#__PURE__*/(() => {\n  class MdcLineRipple extends MDCComponent {\n    /**\n     * @param {?} _ngZone\n     * @param {?} elementRef\n     */\n    constructor(_ngZone, elementRef) {\n      super(elementRef);\n      this._ngZone = _ngZone;\n      this.elementRef = elementRef;\n      /**\n       * Emits whenever the component is destroyed.\n       */\n\n      this._destroy = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getDefaultFoundation() {\n      /** @type {?} */\n      const adapter = {\n        addClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.add(className),\n        removeClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.remove(className),\n        hasClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.contains(className),\n        setStyle:\n        /**\n        * @param {?} propertyName\n        * @param {?} value\n        * @return {?}\n        */\n        (propertyName, value) => this._getHostElement().style.setProperty(propertyName, value),\n        registerEventHandler:\n        /**\n        * @return {?}\n        */\n        () => {},\n        deregisterEventHandler:\n        /**\n        * @return {?}\n        */\n        () => {}\n      };\n      return new MDCLineRippleFoundation(adapter);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this._loadListeners();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    destroy() {\n      this._destroy.next();\n\n      this._destroy.complete();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.destroy();\n    }\n    /**\n     * Activates the line ripple\n     * @return {?}\n     */\n\n\n    activate() {\n      this._foundation.activate();\n    }\n    /**\n     * Deactivates the line ripple\n     * @return {?}\n     */\n\n\n    deactivate() {\n      this._foundation.deactivate();\n    }\n    /**\n     * Sets the transform origin given a user's click location.\n     * The `rippleCenter` is the x-coordinate of the middle of the ripple.\n     * @param {?} xCoordinate\n     * @return {?}\n     */\n\n\n    setRippleCenter(xCoordinate) {\n      this._foundation.setRippleCenter(xCoordinate);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _loadListeners() {\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => fromEvent(this._getHostElement(), 'transitionend').pipe(takeUntil(this._destroy), filter(\n      /**\n      * @param {?} e\n      * @return {?}\n      */\n      e => e.target === this._getHostElement())).subscribe(\n      /**\n      * @param {?} evt\n      * @return {?}\n      */\n      evt => this._ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => this._foundation.handleTransitionEnd(evt))));\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @private\n     * @return {?}\n     */\n\n\n    _getHostElement() {\n      return this.elementRef.nativeElement;\n    }\n\n  }\n\n  MdcLineRipple.ɵfac = function MdcLineRipple_Factory(t) {\n    return new (t || MdcLineRipple)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcLineRipple.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdcLineRipple,\n    selectors: [[\"\", \"mdcLineRipple\", \"\"], [\"mdc-line-ripple\"]],\n    hostAttrs: [1, \"mdc-line-ripple\"],\n    exportAs: [\"mdcLineRipple\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return MdcLineRipple;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: line-ripple/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MdcLineRippleModule = /*#__PURE__*/(() => {\n  class MdcLineRippleModule {}\n\n  MdcLineRippleModule.ɵfac = function MdcLineRippleModule_Factory(t) {\n    return new (t || MdcLineRippleModule)();\n  };\n\n  MdcLineRippleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdcLineRippleModule\n  });\n  MdcLineRippleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return MdcLineRippleModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdcLineRippleModule, {\n    declarations: [MdcLineRipple],\n    exports: [MdcLineRipple]\n  });\n})();\n\nexport { MdcLineRipple, MdcLineRippleModule }; //# sourceMappingURL=line-ripple.js.map","map":null,"metadata":{},"sourceType":"module"}