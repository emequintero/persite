{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Input, ContentChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MdcIcon, MdcIconModule } from '@angular-mdc/web/icon';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MdcRipple } from '@angular-mdc/web/ripple';\n/**\n * @fileoverview added by tsickle\n * Generated from: fab/fab.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular-mdc/web/ripple';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular-mdc/web/icon';\nconst _c0 = [\"mdc-fab\", \"\"];\n\nfunction MdcFab_mdc_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mdc-icon\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.icon);\n  }\n}\n\nfunction MdcFab_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 5);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.label);\n  }\n}\n\nfunction MdcFab_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 6);\n  }\n}\n\nconst _c1 = [\"*\"];\nlet MdcFabLabel = /*#__PURE__*/(() => {\n  class MdcFabLabel {}\n\n  MdcFabLabel.ɵfac = function MdcFabLabel_Factory(t) {\n    return new (t || MdcFabLabel)();\n  };\n\n  MdcFabLabel.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdcFabLabel,\n    selectors: [[\"mdc-fab-label\"], [\"\", \"mdcFabLabel\", \"\"]],\n    hostAttrs: [1, \"mdc-fab__label\"]\n  });\n  return MdcFabLabel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcFab = /*#__PURE__*/(() => {\n  class MdcFab {\n    /**\n     * @param {?} _changeDetectionRef\n     * @param {?} elementRef\n     * @param {?} _ripple\n     */\n    constructor(_changeDetectionRef, elementRef, _ripple) {\n      this._changeDetectionRef = _changeDetectionRef;\n      this.elementRef = elementRef;\n      this._ripple = _ripple;\n      this._mini = false;\n      this._touch = false;\n      this._exited = false;\n      this._extended = false;\n      this._fluid = false;\n      this._position = null;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get mini() {\n      return this._mini;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set mini(value) {\n      this._mini = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get touch() {\n      return this._touch;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set touch(value) {\n      this._touch = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get exited() {\n      return this._exited;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set exited(value) {\n      this._exited = coerceBooleanProperty(value);\n\n      this._changeDetectionRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get extended() {\n      return this._extended;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set extended(value) {\n      this._extended = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get fluid() {\n      return this._fluid;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set fluid(value) {\n      this._fluid = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get position() {\n      return this._position;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set position(value) {\n      if (this._position) {\n        this._getHostElement().classList.remove(`ngx-mdc-fab--${this._convertPosition(this._position)}`);\n      }\n\n      if (value) {\n        this._getHostElement().classList.add(`ngx-mdc-fab--${this._convertPosition(value)}`);\n      }\n\n      this._position = value;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      if (this.fabIcon) {\n        this.fabIcon.elementRef.nativeElement.classList.add('mdc-fab__icon');\n      }\n\n      this._ripple = new MdcRipple(this.elementRef);\n\n      this._ripple.init();\n    }\n    /**\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n\n\n    _convertPosition(position) {\n      switch (position) {\n        case 'bottomLeft':\n          {\n            return 'bottom-left';\n          }\n\n        case 'bottomRight':\n          {\n            return 'bottom-right';\n          }\n\n        default:\n          {\n            return null;\n          }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._ripple.destroy();\n    }\n    /**\n     * @param {?=} exited\n     * @return {?}\n     */\n\n\n    toggleExited(exited) {\n      this._exited = exited ? exited : !this._exited;\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n\n\n    focus() {\n      this._getHostElement().focus();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _getHostElement() {\n      return this.elementRef.nativeElement;\n    }\n\n  }\n\n  MdcFab.ɵfac = function MdcFab_Factory(t) {\n    return new (t || MdcFab)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MdcRipple));\n  };\n\n  MdcFab.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcFab,\n    selectors: [[\"button\", \"mdc-fab\", \"\"], [\"a\", \"mdc-fab\", \"\"]],\n    contentQueries: function MdcFab_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcIcon, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fabIcon = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mdc-fab\"],\n    hostVars: 11,\n    hostBindings: function MdcFab_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.exited ? -1 : 0);\n        ɵngcc0.ɵɵclassProp(\"mdc-fab--mini\", ctx.mini)(\"mdc-fab--exited\", ctx.exited)(\"mdc-fab--extended\", ctx.extended)(\"ngx-mdc-fab-extended--fluid\", ctx.fluid)(\"mdc-fab--touch\", ctx.touch && ctx.mini);\n      }\n    },\n    inputs: {\n      mini: \"mini\",\n      touch: \"touch\",\n      exited: \"exited\",\n      extended: \"extended\",\n      fluid: \"fluid\",\n      position: \"position\",\n      label: \"label\",\n      icon: \"icon\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MdcRipple])],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 5,\n    vars: 3,\n    consts: [[1, \"mdc-fab__ripple\"], [\"class\", \"mdc-fab__icon\", 4, \"ngIf\"], [\"class\", \"mdc-fab__label\", 4, \"ngIf\"], [\"class\", \"mdc-fab__touch\", 4, \"ngIf\"], [1, \"mdc-fab__icon\"], [1, \"mdc-fab__label\"], [1, \"mdc-fab__touch\"]],\n    template: function MdcFab_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, MdcFab_mdc_icon_2_Template, 2, 1, \"mdc-icon\", 1);\n        ɵngcc0.ɵɵtemplate(3, MdcFab_span_3_Template, 2, 1, \"span\", 2);\n        ɵngcc0.ɵɵtemplate(4, MdcFab_div_4_Template, 1, 0, \"div\", 3);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.icon);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.label);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.touch && ctx.mini);\n      }\n    },\n    directives: [ɵngcc2.NgIf, ɵngcc3.MdcIcon],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcFab;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: fab/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MdcFabModule = /*#__PURE__*/(() => {\n  class MdcFabModule {}\n\n  MdcFabModule.ɵfac = function MdcFabModule_Factory(t) {\n    return new (t || MdcFabModule)();\n  };\n\n  MdcFabModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdcFabModule\n  });\n  MdcFabModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MdcIconModule]]\n  });\n  return MdcFabModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdcFabModule, {\n    declarations: function () {\n      return [MdcFab, MdcFabLabel];\n    },\n    imports: function () {\n      return [CommonModule, MdcIconModule];\n    },\n    exports: function () {\n      return [MdcFab, MdcFabLabel];\n    }\n  });\n})();\n\nexport { MdcFab, MdcFabLabel, MdcFabModule }; //# sourceMappingURL=fab.js.map","map":null,"metadata":{},"sourceType":"module"}