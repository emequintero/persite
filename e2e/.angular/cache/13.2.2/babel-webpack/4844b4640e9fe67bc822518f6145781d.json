{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, NgZone, ElementRef, Input, ViewChild, NgModule } from '@angular/core';\nimport { supportsPassiveEventListeners, Platform } from '@angular/cdk/platform';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { takeUntil, filter } from 'rxjs/operators';\nimport { MDCComponent } from '@angular-mdc/web/base';\nimport { matches } from '@angular-mdc/web/dom';\nimport { MDCTabScrollerFoundation, util } from '@material/tab-scroller';\n/**\n * @fileoverview added by tsickle\n * Generated from: tab-scroller/tab-scroller.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst _c0 = [\"area\"];\nconst _c1 = [\"content\"];\nconst _c2 = [\"mdcTabScroller\", \"\"];\nconst _c3 = [\"*\"];\nconst SCROLLER_EVENTS = ['keydown', 'mousedown', 'pointerdown', 'touchstart', 'wheel'];\nlet MdcTabScroller = /*#__PURE__*/(() => {\n  class MdcTabScroller extends MDCComponent {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?} elementRef\n     */\n    constructor(_ngZone, _platform, elementRef) {\n      super(elementRef);\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      this.elementRef = elementRef;\n      /**\n       * Emits whenever the component is destroyed.\n       */\n\n      this._destroy = new Subject();\n      this._align = null;\n      this._scrollAreaEventsSubscription = null;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get align() {\n      return this._align;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set align(value) {\n      this.setAlign(value);\n    }\n    /**\n     * Combined stream of all of the scroll area events.\n     * @return {?}\n     */\n\n\n    get scrollAreaEvents() {\n      return merge(...SCROLLER_EVENTS.map(\n      /**\n      * @param {?} evt\n      * @return {?}\n      */\n      evt => fromEvent(this._getScrollArea(), evt, {\n        passive: supportsPassiveEventListeners()\n      })));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getDefaultFoundation() {\n      /** @type {?} */\n      const adapter = {\n        eventTargetMatchesSelector:\n        /**\n        * @param {?} evtTarget\n        * @param {?} selector\n        * @return {?}\n        */\n        (evtTarget, selector) => matches(evtTarget, selector),\n        addClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.add(className),\n        removeClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.remove(className),\n        addScrollAreaClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this.area.nativeElement.classList.add(className),\n        setScrollAreaStyleProperty:\n        /**\n        * @param {?} propName\n        * @param {?} value\n        * @return {?}\n        */\n        (propName, value) => this.area.nativeElement.style.setProperty(propName, value),\n        setScrollContentStyleProperty:\n        /**\n        * @param {?} propName\n        * @param {?} value\n        * @return {?}\n        */\n        (propName, value) => this.content.nativeElement.style.setProperty(propName, value),\n        getScrollContentStyleValue:\n        /**\n        * @param {?} propName\n        * @return {?}\n        */\n        propName => this._platform.isBrowser ? window.getComputedStyle(this.content.nativeElement).getPropertyValue(propName) : '',\n        setScrollAreaScrollLeft:\n        /**\n        * @param {?} scrollX\n        * @return {?}\n        */\n        scrollX => this.area.nativeElement.scrollLeft = scrollX,\n        getScrollAreaScrollLeft:\n        /**\n        * @return {?}\n        */\n        () => this.area.nativeElement.scrollLeft,\n        getScrollContentOffsetWidth:\n        /**\n        * @return {?}\n        */\n        () => this.content.nativeElement.offsetWidth,\n        getScrollAreaOffsetWidth:\n        /**\n        * @return {?}\n        */\n        () => this.area.nativeElement.offsetWidth,\n        computeScrollAreaClientRect:\n        /**\n        * @return {?}\n        */\n        () => this._platform.isBrowser ? this.area.nativeElement.getBoundingClientRect() : {},\n        computeScrollContentClientRect:\n        /**\n        * @return {?}\n        */\n        () => this._platform.isBrowser ? this.content.nativeElement.getBoundingClientRect() : {},\n        computeHorizontalScrollbarHeight:\n        /**\n        * @return {?}\n        */\n        () => this._platform.isBrowser ? util.computeHorizontalScrollbarHeight(document) : 0\n      };\n      return new MDCTabScrollerFoundation(adapter);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      this._foundation.init();\n\n      this._loadListeners();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._destroy.next();\n\n      this._destroy.complete();\n\n      if (this._scrollAreaEventsSubscription) {\n        this._scrollAreaEventsSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @param {?} align\n     * @return {?}\n     */\n\n\n    setAlign(align) {\n      this._getHostElement().classList.remove(`mdc-tab-scroller--align-${this._align}`);\n\n      this._align = align;\n\n      if (align) {\n        this._getHostElement().classList.add(`mdc-tab-scroller--align-${align}`);\n      }\n    }\n    /**\n     * Returns the current visual scroll position\n     * @return {?}\n     */\n\n\n    getScrollPosition() {\n      if (!this._platform.isBrowser) {\n        return -1;\n      }\n\n      return this._foundation.getScrollPosition();\n    }\n    /**\n     * Returns the width of the scroll content\n     * @return {?}\n     */\n\n\n    getScrollContentWidth() {\n      return this.content.nativeElement.offsetWidth;\n    }\n    /**\n     * Increments the scroll value by the given amount\n     * @param {?} scrollXIncrement\n     * @return {?}\n     */\n\n\n    incrementScroll(scrollXIncrement) {\n      if (!this._platform.isBrowser) {\n        return -1;\n      }\n\n      this._foundation.incrementScroll(scrollXIncrement);\n    }\n    /**\n     * Scrolls to the given pixel position\n     * @param {?} scrollX\n     * @return {?}\n     */\n\n\n    scrollTo(scrollX) {\n      this._foundation.scrollTo(scrollX);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _loadListeners() {\n      this._scrollAreaEventsSubscription = this.scrollAreaEvents.pipe().subscribe(\n      /**\n      * @return {?}\n      */\n      () => this._foundation.handleInteraction());\n\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => fromEvent(this._getScrollContent(), 'transitionend').pipe(takeUntil(this._destroy), filter(\n      /**\n      * @param {?} e\n      * @return {?}\n      */\n      e => e.target === this._getScrollContent())).subscribe(\n      /**\n      * @param {?} evt\n      * @return {?}\n      */\n      evt => this._ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => this._foundation.handleTransitionEnd(evt))));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _getScrollArea() {\n      return this.area.nativeElement;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _getScrollContent() {\n      return this.content.nativeElement;\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @private\n     * @return {?}\n     */\n\n\n    _getHostElement() {\n      return this.elementRef.nativeElement;\n    }\n\n  }\n\n  MdcTabScroller.ɵfac = function MdcTabScroller_Factory(t) {\n    return new (t || MdcTabScroller)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcTabScroller.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcTabScroller,\n    selectors: [[\"\", \"mdcTabScroller\", \"\"], [\"mdc-tab-scroller\"]],\n    viewQuery: function MdcTabScroller_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n        ɵngcc0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.area = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mdc-tab-scroller\"],\n    inputs: {\n      align: \"align\"\n    },\n    exportAs: [\"mdcTabScroller\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c2,\n    ngContentSelectors: _c3,\n    decls: 5,\n    vars: 0,\n    consts: [[1, \"mdc-tab-scroller__scroll-area\"], [\"area\", \"\"], [1, \"mdc-tab-scroller__scroll-content\"], [\"content\", \"\"]],\n    template: function MdcTabScroller_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵprojection(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcTabScroller;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: tab-scroller/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MdcTabScrollerModule = /*#__PURE__*/(() => {\n  class MdcTabScrollerModule {}\n\n  MdcTabScrollerModule.ɵfac = function MdcTabScrollerModule_Factory(t) {\n    return new (t || MdcTabScrollerModule)();\n  };\n\n  MdcTabScrollerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdcTabScrollerModule\n  });\n  MdcTabScrollerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return MdcTabScrollerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdcTabScrollerModule, {\n    declarations: [MdcTabScroller],\n    exports: [MdcTabScroller]\n  });\n})();\n\nexport { MdcTabScroller, MdcTabScrollerModule }; //# sourceMappingURL=tab-scroller.js.map","map":null,"metadata":{},"sourceType":"module"}