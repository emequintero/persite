{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, numbers, strings } from './constants';\n\nvar MDCCheckboxFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCCheckboxFoundation, _super);\n\n  function MDCCheckboxFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCCheckboxFoundation.defaultAdapter, adapter)) || this;\n\n    _this.currentCheckState_ = strings.TRANSITION_STATE_INIT;\n    _this.currentAnimationClass_ = '';\n    _this.animEndLatchTimer_ = 0;\n    _this.enableAnimationEndHandler_ = false;\n    return _this;\n  }\n\n  Object.defineProperty(MDCCheckboxFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckboxFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckboxFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckboxFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        forceLayout: function () {\n          return undefined;\n        },\n        hasNativeControl: function () {\n          return false;\n        },\n        isAttachedToDOM: function () {\n          return false;\n        },\n        isChecked: function () {\n          return false;\n        },\n        isIndeterminate: function () {\n          return false;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        removeNativeControlAttr: function () {\n          return undefined;\n        },\n        setNativeControlAttr: function () {\n          return undefined;\n        },\n        setNativeControlDisabled: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCCheckboxFoundation.prototype.init = function () {\n    this.currentCheckState_ = this.determineCheckState_();\n    this.updateAriaChecked_();\n    this.adapter_.addClass(cssClasses.UPGRADED);\n  };\n\n  MDCCheckboxFoundation.prototype.destroy = function () {\n    clearTimeout(this.animEndLatchTimer_);\n  };\n\n  MDCCheckboxFoundation.prototype.setDisabled = function (disabled) {\n    this.adapter_.setNativeControlDisabled(disabled);\n\n    if (disabled) {\n      this.adapter_.addClass(cssClasses.DISABLED);\n    } else {\n      this.adapter_.removeClass(cssClasses.DISABLED);\n    }\n  };\n  /**\n   * Handles the animationend event for the checkbox\n   */\n\n\n  MDCCheckboxFoundation.prototype.handleAnimationEnd = function () {\n    var _this = this;\n\n    if (!this.enableAnimationEndHandler_) {\n      return;\n    }\n\n    clearTimeout(this.animEndLatchTimer_);\n    this.animEndLatchTimer_ = setTimeout(function () {\n      _this.adapter_.removeClass(_this.currentAnimationClass_);\n\n      _this.enableAnimationEndHandler_ = false;\n    }, numbers.ANIM_END_LATCH_MS);\n  };\n  /**\n   * Handles the change event for the checkbox\n   */\n\n\n  MDCCheckboxFoundation.prototype.handleChange = function () {\n    this.transitionCheckState_();\n  };\n\n  MDCCheckboxFoundation.prototype.transitionCheckState_ = function () {\n    if (!this.adapter_.hasNativeControl()) {\n      return;\n    }\n\n    var oldState = this.currentCheckState_;\n    var newState = this.determineCheckState_();\n\n    if (oldState === newState) {\n      return;\n    }\n\n    this.updateAriaChecked_();\n    var TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;\n    var SELECTED = cssClasses.SELECTED;\n\n    if (newState === TRANSITION_STATE_UNCHECKED) {\n      this.adapter_.removeClass(SELECTED);\n    } else {\n      this.adapter_.addClass(SELECTED);\n    } // Check to ensure that there isn't a previously existing animation class, in case for example\n    // the user interacted with the checkbox before the animation was finished.\n\n\n    if (this.currentAnimationClass_.length > 0) {\n      clearTimeout(this.animEndLatchTimer_);\n      this.adapter_.forceLayout();\n      this.adapter_.removeClass(this.currentAnimationClass_);\n    }\n\n    this.currentAnimationClass_ = this.getTransitionAnimationClass_(oldState, newState);\n    this.currentCheckState_ = newState; // Check for parentNode so that animations are only run when the element is attached\n    // to the DOM.\n\n    if (this.adapter_.isAttachedToDOM() && this.currentAnimationClass_.length > 0) {\n      this.adapter_.addClass(this.currentAnimationClass_);\n      this.enableAnimationEndHandler_ = true;\n    }\n  };\n\n  MDCCheckboxFoundation.prototype.determineCheckState_ = function () {\n    var TRANSITION_STATE_INDETERMINATE = strings.TRANSITION_STATE_INDETERMINATE,\n        TRANSITION_STATE_CHECKED = strings.TRANSITION_STATE_CHECKED,\n        TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;\n\n    if (this.adapter_.isIndeterminate()) {\n      return TRANSITION_STATE_INDETERMINATE;\n    }\n\n    return this.adapter_.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;\n  };\n\n  MDCCheckboxFoundation.prototype.getTransitionAnimationClass_ = function (oldState, newState) {\n    var TRANSITION_STATE_INIT = strings.TRANSITION_STATE_INIT,\n        TRANSITION_STATE_CHECKED = strings.TRANSITION_STATE_CHECKED,\n        TRANSITION_STATE_UNCHECKED = strings.TRANSITION_STATE_UNCHECKED;\n    var _a = MDCCheckboxFoundation.cssClasses,\n        ANIM_UNCHECKED_CHECKED = _a.ANIM_UNCHECKED_CHECKED,\n        ANIM_UNCHECKED_INDETERMINATE = _a.ANIM_UNCHECKED_INDETERMINATE,\n        ANIM_CHECKED_UNCHECKED = _a.ANIM_CHECKED_UNCHECKED,\n        ANIM_CHECKED_INDETERMINATE = _a.ANIM_CHECKED_INDETERMINATE,\n        ANIM_INDETERMINATE_CHECKED = _a.ANIM_INDETERMINATE_CHECKED,\n        ANIM_INDETERMINATE_UNCHECKED = _a.ANIM_INDETERMINATE_UNCHECKED;\n\n    switch (oldState) {\n      case TRANSITION_STATE_INIT:\n        if (newState === TRANSITION_STATE_UNCHECKED) {\n          return '';\n        }\n\n        return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;\n\n      case TRANSITION_STATE_UNCHECKED:\n        return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;\n\n      case TRANSITION_STATE_CHECKED:\n        return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;\n\n      default:\n        // TRANSITION_STATE_INDETERMINATE\n        return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;\n    }\n  };\n\n  MDCCheckboxFoundation.prototype.updateAriaChecked_ = function () {\n    // Ensure aria-checked is set to mixed if checkbox is in indeterminate state.\n    if (this.adapter_.isIndeterminate()) {\n      this.adapter_.setNativeControlAttr(strings.ARIA_CHECKED_ATTR, strings.ARIA_CHECKED_INDETERMINATE_VALUE);\n    } else {\n      // The on/off state does not need to keep track of aria-checked, since\n      // the screenreader uses the checked property on the checkbox element.\n      this.adapter_.removeNativeControlAttr(strings.ARIA_CHECKED_ATTR);\n    }\n  };\n\n  return MDCCheckboxFoundation;\n}(MDCFoundation);\n\nexport { MDCCheckboxFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCCheckboxFoundation; //# sourceMappingURL=foundation.js.map","map":null,"metadata":{},"sourceType":"module"}