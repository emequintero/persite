{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, Direction, EventSource, jumpChipKeys, navigationKeys, strings } from './constants';\nvar emptyClientRect = {\n  bottom: 0,\n  height: 0,\n  left: 0,\n  right: 0,\n  top: 0,\n  width: 0\n};\n\nvar MDCChipFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCChipFoundation, _super);\n\n  function MDCChipFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCChipFoundation.defaultAdapter, adapter)) || this;\n    /** Whether a trailing icon click should immediately trigger exit/removal of the chip. */\n\n\n    _this.shouldRemoveOnTrailingIconClick_ = true;\n    return _this;\n  }\n\n  Object.defineProperty(MDCChipFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        addClassToLeadingIcon: function () {\n          return undefined;\n        },\n        eventTargetHasClass: function () {\n          return false;\n        },\n        focusPrimaryAction: function () {\n          return undefined;\n        },\n        focusTrailingAction: function () {\n          return undefined;\n        },\n        getAttribute: function () {\n          return null;\n        },\n        getCheckmarkBoundingClientRect: function () {\n          return emptyClientRect;\n        },\n        getComputedStyleValue: function () {\n          return '';\n        },\n        getRootBoundingClientRect: function () {\n          return emptyClientRect;\n        },\n        hasClass: function () {\n          return false;\n        },\n        hasLeadingIcon: function () {\n          return false;\n        },\n        hasTrailingAction: function () {\n          return false;\n        },\n        isRTL: function () {\n          return false;\n        },\n        notifyInteraction: function () {\n          return undefined;\n        },\n        notifyNavigation: function () {\n          return undefined;\n        },\n        notifyRemoval: function () {\n          return undefined;\n        },\n        notifySelection: function () {\n          return undefined;\n        },\n        notifyTrailingIconInteraction: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        removeClassFromLeadingIcon: function () {\n          return undefined;\n        },\n        setPrimaryActionAttr: function () {\n          return undefined;\n        },\n        setStyleProperty: function () {\n          return undefined;\n        },\n        setTrailingActionAttr: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCChipFoundation.prototype.isSelected = function () {\n    return this.adapter_.hasClass(cssClasses.SELECTED);\n  };\n\n  MDCChipFoundation.prototype.setSelected = function (selected) {\n    this.setSelected_(selected);\n    this.notifySelection_(selected);\n  };\n\n  MDCChipFoundation.prototype.setSelectedFromChipSet = function (selected, shouldNotifyClients) {\n    this.setSelected_(selected);\n\n    if (shouldNotifyClients) {\n      this.notifyIgnoredSelection_(selected);\n    }\n  };\n\n  MDCChipFoundation.prototype.getShouldRemoveOnTrailingIconClick = function () {\n    return this.shouldRemoveOnTrailingIconClick_;\n  };\n\n  MDCChipFoundation.prototype.setShouldRemoveOnTrailingIconClick = function (shouldRemove) {\n    this.shouldRemoveOnTrailingIconClick_ = shouldRemove;\n  };\n\n  MDCChipFoundation.prototype.getDimensions = function () {\n    var _this = this;\n\n    var getRootRect = function () {\n      return _this.adapter_.getRootBoundingClientRect();\n    };\n\n    var getCheckmarkRect = function () {\n      return _this.adapter_.getCheckmarkBoundingClientRect();\n    }; // When a chip has a checkmark and not a leading icon, the bounding rect changes in size depending on the current\n    // size of the checkmark.\n\n\n    if (!this.adapter_.hasLeadingIcon()) {\n      var checkmarkRect = getCheckmarkRect();\n\n      if (checkmarkRect) {\n        var rootRect = getRootRect(); // Checkmark is a square, meaning the client rect's width and height are identical once the animation completes.\n        // However, the checkbox is initially hidden by setting the width to 0.\n        // To account for an initial width of 0, we use the checkbox's height instead (which equals the end-state width)\n        // when adding it to the root client rect's width.\n\n        return {\n          bottom: rootRect.bottom,\n          height: rootRect.height,\n          left: rootRect.left,\n          right: rootRect.right,\n          top: rootRect.top,\n          width: rootRect.width + checkmarkRect.height\n        };\n      }\n    }\n\n    return getRootRect();\n  };\n  /**\n   * Begins the exit animation which leads to removal of the chip.\n   */\n\n\n  MDCChipFoundation.prototype.beginExit = function () {\n    this.adapter_.addClass(cssClasses.CHIP_EXIT);\n  };\n  /**\n   * Handles an interaction event on the root element.\n   */\n\n\n  MDCChipFoundation.prototype.handleInteraction = function (evt) {\n    if (this.shouldHandleInteraction_(evt)) {\n      this.adapter_.notifyInteraction();\n      this.focusPrimaryAction_();\n    }\n  };\n  /**\n   * Handles a transition end event on the root element.\n   */\n\n\n  MDCChipFoundation.prototype.handleTransitionEnd = function (evt) {\n    var _this = this; // Handle transition end event on the chip when it is about to be removed.\n\n\n    var shouldHandle = this.adapter_.eventTargetHasClass(evt.target, cssClasses.CHIP_EXIT);\n    var widthIsAnimating = evt.propertyName === 'width';\n    var opacityIsAnimating = evt.propertyName === 'opacity';\n\n    if (shouldHandle && opacityIsAnimating) {\n      // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5\n      var chipWidth_1 = this.adapter_.getComputedStyleValue('width'); // On the next frame (once we get the computed width), explicitly set the chip's width\n      // to its current pixel width, so we aren't transitioning out of 'auto'.\n\n      requestAnimationFrame(function () {\n        _this.adapter_.setStyleProperty('width', chipWidth_1); // To mitigate jitter, start transitioning padding and margin before width.\n\n\n        _this.adapter_.setStyleProperty('padding', '0');\n\n        _this.adapter_.setStyleProperty('margin', '0'); // On the next frame (once width is explicitly set), transition width to 0.\n\n\n        requestAnimationFrame(function () {\n          _this.adapter_.setStyleProperty('width', '0');\n        });\n      });\n      return;\n    }\n\n    if (shouldHandle && widthIsAnimating) {\n      this.removeFocus_();\n      var removedAnnouncement = this.adapter_.getAttribute(strings.REMOVED_ANNOUNCEMENT_ATTRIBUTE);\n      this.adapter_.notifyRemoval(removedAnnouncement);\n    } // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.\n\n\n    if (!opacityIsAnimating) {\n      return;\n    }\n\n    var shouldHideLeadingIcon = this.adapter_.eventTargetHasClass(evt.target, cssClasses.LEADING_ICON) && this.adapter_.hasClass(cssClasses.SELECTED);\n    var shouldShowLeadingIcon = this.adapter_.eventTargetHasClass(evt.target, cssClasses.CHECKMARK) && !this.adapter_.hasClass(cssClasses.SELECTED);\n\n    if (shouldHideLeadingIcon) {\n      return this.adapter_.addClassToLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n    }\n\n    if (shouldShowLeadingIcon) {\n      return this.adapter_.removeClassFromLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n    }\n  };\n  /**\n   * Handles an interaction event on the trailing icon element. This is used to\n   * prevent the ripple from activating on interaction with the trailing icon.\n   */\n\n\n  MDCChipFoundation.prototype.handleTrailingIconInteraction = function (evt) {\n    if (this.shouldHandleInteraction_(evt)) {\n      this.adapter_.notifyTrailingIconInteraction();\n      this.removeChip_(evt);\n    }\n  };\n  /**\n   * Handles a keydown event from the root element.\n   */\n\n\n  MDCChipFoundation.prototype.handleKeydown = function (evt) {\n    if (this.shouldRemoveChip_(evt)) {\n      return this.removeChip_(evt);\n    }\n\n    var key = evt.key; // Early exit if the key is not usable\n\n    if (!navigationKeys.has(key)) {\n      return;\n    } // Prevent default behavior for movement keys which could include scrolling\n\n\n    evt.preventDefault();\n    this.focusNextAction_(evt);\n  };\n\n  MDCChipFoundation.prototype.removeFocus = function () {\n    this.adapter_.setPrimaryActionAttr(strings.TAB_INDEX, '-1');\n    this.adapter_.setTrailingActionAttr(strings.TAB_INDEX, '-1');\n  };\n\n  MDCChipFoundation.prototype.focusPrimaryAction = function () {\n    this.focusPrimaryAction_();\n  };\n\n  MDCChipFoundation.prototype.focusTrailingAction = function () {\n    if (!this.adapter_.hasTrailingAction()) {\n      return this.focusPrimaryAction_();\n    }\n\n    this.focusTrailingAction_();\n  };\n\n  MDCChipFoundation.prototype.focusNextAction_ = function (evt) {\n    var key = evt.key;\n    var hasTrailingAction = this.adapter_.hasTrailingAction();\n    var dir = this.getDirection_(key);\n    var source = this.getEvtSource_(evt); // Early exit if the key should jump keys or the chip only has one action (i.e. no trailing action)\n\n    if (jumpChipKeys.has(key) || !hasTrailingAction) {\n      this.adapter_.notifyNavigation(key, source);\n      return;\n    }\n\n    if (source === EventSource.PRIMARY && dir === Direction.RIGHT) {\n      return this.focusTrailingAction_();\n    }\n\n    if (source === EventSource.TRAILING && dir === Direction.LEFT) {\n      return this.focusPrimaryAction_();\n    }\n\n    this.adapter_.notifyNavigation(key, EventSource.NONE);\n  };\n\n  MDCChipFoundation.prototype.getEvtSource_ = function (evt) {\n    if (this.adapter_.eventTargetHasClass(evt.target, cssClasses.PRIMARY_ACTION)) {\n      return EventSource.PRIMARY;\n    }\n\n    if (this.adapter_.eventTargetHasClass(evt.target, cssClasses.TRAILING_ACTION)) {\n      return EventSource.TRAILING;\n    }\n\n    return EventSource.NONE;\n  };\n\n  MDCChipFoundation.prototype.getDirection_ = function (key) {\n    var isRTL = this.adapter_.isRTL();\n\n    if (key === strings.ARROW_LEFT_KEY && !isRTL || key === strings.ARROW_RIGHT_KEY && isRTL) {\n      return Direction.LEFT;\n    }\n\n    return Direction.RIGHT;\n  };\n\n  MDCChipFoundation.prototype.focusPrimaryAction_ = function () {\n    this.adapter_.setPrimaryActionAttr(strings.TAB_INDEX, '0');\n    this.adapter_.focusPrimaryAction();\n    this.adapter_.setTrailingActionAttr(strings.TAB_INDEX, '-1');\n  };\n\n  MDCChipFoundation.prototype.focusTrailingAction_ = function () {\n    this.adapter_.setTrailingActionAttr(strings.TAB_INDEX, '0');\n    this.adapter_.focusTrailingAction();\n    this.adapter_.setPrimaryActionAttr(strings.TAB_INDEX, '-1');\n  };\n\n  MDCChipFoundation.prototype.removeFocus_ = function () {\n    this.adapter_.setTrailingActionAttr(strings.TAB_INDEX, '-1');\n    this.adapter_.setPrimaryActionAttr(strings.TAB_INDEX, '-1');\n  };\n\n  MDCChipFoundation.prototype.removeChip_ = function (evt) {\n    evt.stopPropagation(); // Prevent default behavior for backspace on Firefox which causes a page\n    // navigation.\n\n    evt.preventDefault();\n\n    if (this.shouldRemoveOnTrailingIconClick_) {\n      this.beginExit();\n    }\n  };\n\n  MDCChipFoundation.prototype.shouldHandleInteraction_ = function (evt) {\n    if (evt.type === 'click') {\n      return true;\n    }\n\n    var keyEvt = evt;\n    return keyEvt.key === strings.ENTER_KEY || keyEvt.key === strings.SPACEBAR_KEY;\n  };\n\n  MDCChipFoundation.prototype.shouldRemoveChip_ = function (evt) {\n    var isDeletable = this.adapter_.hasClass(cssClasses.DELETABLE);\n    return isDeletable && (evt.key === strings.BACKSPACE_KEY || evt.key === strings.DELETE_KEY);\n  };\n\n  MDCChipFoundation.prototype.setSelected_ = function (selected) {\n    if (selected) {\n      this.adapter_.addClass(cssClasses.SELECTED);\n      this.adapter_.setPrimaryActionAttr(strings.ARIA_CHECKED, 'true');\n    } else {\n      this.adapter_.removeClass(cssClasses.SELECTED);\n      this.adapter_.setPrimaryActionAttr(strings.ARIA_CHECKED, 'false');\n    }\n  };\n\n  MDCChipFoundation.prototype.notifySelection_ = function (selected) {\n    this.adapter_.notifySelection(selected, false);\n  };\n\n  MDCChipFoundation.prototype.notifyIgnoredSelection_ = function (selected) {\n    this.adapter_.notifySelection(selected, true);\n  };\n\n  return MDCChipFoundation;\n}(MDCFoundation);\n\nexport { MDCChipFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCChipFoundation; //# sourceMappingURL=foundation.js.map","map":null,"metadata":{},"sourceType":"module"}