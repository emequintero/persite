{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { getCorrectPropertyName } from '@material/animation/util';\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCLinearProgressFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCLinearProgressFoundation, _super);\n\n  function MDCLinearProgressFoundation(adapter) {\n    return _super.call(this, tslib_1.__assign({}, MDCLinearProgressFoundation.defaultAdapter, adapter)) || this;\n  }\n\n  Object.defineProperty(MDCLinearProgressFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCLinearProgressFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCLinearProgressFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        forceLayout: function () {\n          return undefined;\n        },\n        getBuffer: function () {\n          return null;\n        },\n        getPrimaryBar: function () {\n          return null;\n        },\n        hasClass: function () {\n          return false;\n        },\n        removeAttribute: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        setAttribute: function () {\n          return undefined;\n        },\n        setStyle: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCLinearProgressFoundation.prototype.init = function () {\n    this.isDeterminate_ = !this.adapter_.hasClass(cssClasses.INDETERMINATE_CLASS);\n    this.isReversed_ = this.adapter_.hasClass(cssClasses.REVERSED_CLASS);\n    this.progress_ = 0;\n    this.buffer_ = 1;\n  };\n\n  MDCLinearProgressFoundation.prototype.setDeterminate = function (isDeterminate) {\n    this.isDeterminate_ = isDeterminate;\n\n    if (this.isDeterminate_) {\n      this.adapter_.removeClass(cssClasses.INDETERMINATE_CLASS);\n      this.adapter_.setAttribute(strings.ARIA_VALUENOW, this.progress_.toString());\n      this.setScale_(this.adapter_.getPrimaryBar(), this.progress_);\n      this.setScale_(this.adapter_.getBuffer(), this.buffer_);\n    } else {\n      if (this.isReversed_) {\n        // Adding/removing REVERSED_CLASS starts a translate animation, while\n        // adding INDETERMINATE_CLASS starts a scale animation. Here, we reset\n        // the translate animation in order to keep it in sync with the new\n        // scale animation that will start from adding INDETERMINATE_CLASS\n        // below.\n        this.adapter_.removeClass(cssClasses.REVERSED_CLASS);\n        this.adapter_.forceLayout();\n        this.adapter_.addClass(cssClasses.REVERSED_CLASS);\n      }\n\n      this.adapter_.addClass(cssClasses.INDETERMINATE_CLASS);\n      this.adapter_.removeAttribute(strings.ARIA_VALUENOW);\n      this.setScale_(this.adapter_.getPrimaryBar(), 1);\n      this.setScale_(this.adapter_.getBuffer(), 1);\n    }\n  };\n\n  MDCLinearProgressFoundation.prototype.setProgress = function (value) {\n    this.progress_ = value;\n\n    if (this.isDeterminate_) {\n      this.setScale_(this.adapter_.getPrimaryBar(), value);\n      this.adapter_.setAttribute(strings.ARIA_VALUENOW, value.toString());\n    }\n  };\n\n  MDCLinearProgressFoundation.prototype.setBuffer = function (value) {\n    this.buffer_ = value;\n\n    if (this.isDeterminate_) {\n      this.setScale_(this.adapter_.getBuffer(), value);\n    }\n  };\n\n  MDCLinearProgressFoundation.prototype.setReverse = function (isReversed) {\n    this.isReversed_ = isReversed;\n\n    if (!this.isDeterminate_) {\n      // Adding INDETERMINATE_CLASS starts a scale animation, while\n      // adding/removing REVERSED_CLASS starts a translate animation. Here, we\n      // reset the scale animation in order to keep it in sync with the new\n      // translate animation that will start from adding/removing REVERSED_CLASS\n      // below.\n      this.adapter_.removeClass(cssClasses.INDETERMINATE_CLASS);\n      this.adapter_.forceLayout();\n      this.adapter_.addClass(cssClasses.INDETERMINATE_CLASS);\n    }\n\n    if (this.isReversed_) {\n      this.adapter_.addClass(cssClasses.REVERSED_CLASS);\n    } else {\n      this.adapter_.removeClass(cssClasses.REVERSED_CLASS);\n    }\n  };\n\n  MDCLinearProgressFoundation.prototype.open = function () {\n    this.adapter_.removeClass(cssClasses.CLOSED_CLASS);\n  };\n\n  MDCLinearProgressFoundation.prototype.close = function () {\n    this.adapter_.addClass(cssClasses.CLOSED_CLASS);\n  };\n\n  MDCLinearProgressFoundation.prototype.setScale_ = function (el, scaleValue) {\n    if (!el) {\n      return;\n    }\n\n    var value = \"scaleX(\" + scaleValue + \")\";\n    this.adapter_.setStyle(el, getCorrectPropertyName(window, 'transform'), value);\n  };\n\n  return MDCLinearProgressFoundation;\n}(MDCFoundation);\n\nexport { MDCLinearProgressFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCLinearProgressFoundation; //# sourceMappingURL=foundation.js.map","map":null,"metadata":{},"sourceType":"module"}