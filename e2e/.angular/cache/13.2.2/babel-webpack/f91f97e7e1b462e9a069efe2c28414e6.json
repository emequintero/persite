{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCDataTableFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCDataTableFoundation, _super);\n\n  function MDCDataTableFoundation(adapter) {\n    return _super.call(this, tslib_1.__assign({}, MDCDataTableFoundation.defaultAdapter, adapter)) || this;\n  }\n\n  Object.defineProperty(MDCDataTableFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClassAtRowIndex: function () {\n          return undefined;\n        },\n        getRowCount: function () {\n          return 0;\n        },\n        getRowElements: function () {\n          return [];\n        },\n        getRowIdAtIndex: function () {\n          return '';\n        },\n        getRowIndexByChildElement: function () {\n          return 0;\n        },\n        getSelectedRowCount: function () {\n          return 0;\n        },\n        isCheckboxAtRowIndexChecked: function () {\n          return false;\n        },\n        isHeaderRowCheckboxChecked: function () {\n          return false;\n        },\n        isRowsSelectable: function () {\n          return false;\n        },\n        notifyRowSelectionChanged: function () {\n          return undefined;\n        },\n        notifySelectedAll: function () {\n          return undefined;\n        },\n        notifyUnselectedAll: function () {\n          return undefined;\n        },\n        registerHeaderRowCheckbox: function () {\n          return undefined;\n        },\n        registerRowCheckboxes: function () {\n          return undefined;\n        },\n        removeClassAtRowIndex: function () {\n          return undefined;\n        },\n        setAttributeAtRowIndex: function () {\n          return undefined;\n        },\n        setHeaderRowCheckboxChecked: function () {\n          return undefined;\n        },\n        setHeaderRowCheckboxIndeterminate: function () {\n          return undefined;\n        },\n        setRowCheckboxCheckedAtIndex: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is synchronous.\n   */\n\n  MDCDataTableFoundation.prototype.layout = function () {\n    if (this.adapter_.isRowsSelectable()) {\n      this.adapter_.registerHeaderRowCheckbox();\n      this.adapter_.registerRowCheckboxes();\n      this.setHeaderRowCheckboxState_();\n    }\n  };\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is asynchronous.\n   */\n\n\n  MDCDataTableFoundation.prototype.layoutAsync = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.adapter_.isRowsSelectable()) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.adapter_.registerHeaderRowCheckbox()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter_.registerRowCheckboxes()];\n\n          case 2:\n            _a.sent();\n\n            this.setHeaderRowCheckboxState_();\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @return Returns array of row elements.\n   */\n\n\n  MDCDataTableFoundation.prototype.getRows = function () {\n    return this.adapter_.getRowElements();\n  };\n  /**\n   * Sets selected row ids. Overwrites previously selected rows.\n   * @param rowIds Array of row ids that needs to be selected.\n   */\n\n\n  MDCDataTableFoundation.prototype.setSelectedRowIds = function (rowIds) {\n    for (var rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      var rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n      var isSelected = false;\n\n      if (rowId && rowIds.indexOf(rowId) >= 0) {\n        isSelected = true;\n      }\n\n      this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);\n      this.selectRowAtIndex_(rowIndex, isSelected);\n    }\n\n    this.setHeaderRowCheckboxState_();\n  };\n  /**\n   * @return Returns array of selected row ids.\n   */\n\n\n  MDCDataTableFoundation.prototype.getSelectedRowIds = function () {\n    var selectedRowIds = [];\n\n    for (var rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      if (this.adapter_.isCheckboxAtRowIndexChecked(rowIndex)) {\n        selectedRowIds.push(this.adapter_.getRowIdAtIndex(rowIndex));\n      }\n    }\n\n    return selectedRowIds;\n  };\n  /**\n   * Handles header row checkbox change event.\n   */\n\n\n  MDCDataTableFoundation.prototype.handleHeaderRowCheckboxChange = function () {\n    var isHeaderChecked = this.adapter_.isHeaderRowCheckboxChecked();\n\n    for (var rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);\n      this.selectRowAtIndex_(rowIndex, isHeaderChecked);\n    }\n\n    if (isHeaderChecked) {\n      this.adapter_.notifySelectedAll();\n    } else {\n      this.adapter_.notifyUnselectedAll();\n    }\n  };\n  /**\n   * Handles change event originated from row checkboxes.\n   */\n\n\n  MDCDataTableFoundation.prototype.handleRowCheckboxChange = function (event) {\n    var rowIndex = this.adapter_.getRowIndexByChildElement(event.target);\n\n    if (rowIndex === -1) {\n      return;\n    }\n\n    var selected = this.adapter_.isCheckboxAtRowIndexChecked(rowIndex);\n    this.selectRowAtIndex_(rowIndex, selected);\n    this.setHeaderRowCheckboxState_();\n    var rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n    this.adapter_.notifyRowSelectionChanged({\n      rowId: rowId,\n      rowIndex: rowIndex,\n      selected: selected\n    });\n  };\n  /**\n   * Updates header row checkbox state based on number of rows selected.\n   */\n\n\n  MDCDataTableFoundation.prototype.setHeaderRowCheckboxState_ = function () {\n    if (this.adapter_.getSelectedRowCount() === this.adapter_.getRowCount()) {\n      this.adapter_.setHeaderRowCheckboxChecked(true);\n      this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n    } else if (this.adapter_.getSelectedRowCount() === 0) {\n      this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n      this.adapter_.setHeaderRowCheckboxChecked(false);\n    } else {\n      this.adapter_.setHeaderRowCheckboxIndeterminate(true);\n      this.adapter_.setHeaderRowCheckboxChecked(false);\n    }\n  };\n  /**\n   * Sets the attributes of row element based on selection state.\n   */\n\n\n  MDCDataTableFoundation.prototype.selectRowAtIndex_ = function (rowIndex, selected) {\n    if (selected) {\n      this.adapter_.addClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter_.setAttributeAtRowIndex(rowIndex, strings.ARIA_SELECTED, 'true');\n    } else {\n      this.adapter_.removeClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter_.setAttributeAtRowIndex(rowIndex, strings.ARIA_SELECTED, 'false');\n    }\n  };\n\n  return MDCDataTableFoundation;\n}(MDCFoundation);\n\nexport { MDCDataTableFoundation }; //# sourceMappingURL=foundation.js.map","map":null,"metadata":{},"sourceType":"module"}