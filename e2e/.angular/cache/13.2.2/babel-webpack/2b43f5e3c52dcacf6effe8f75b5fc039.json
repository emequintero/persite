{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Input, ContentChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MdcRipple } from '@angular-mdc/web/ripple';\nimport { MdcIcon } from '@angular-mdc/web/icon';\n/**\n * @fileoverview added by tsickle\n * Generated from: button/button.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular-mdc/web/ripple';\nimport * as ɵngcc2 from '@angular/common';\nconst _c0 = [\"mdc-button\", \"\"];\n\nfunction MdcButton_mdc_button_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mdc-button-label\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.label);\n  }\n}\n\nfunction MdcButton_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 3);\n  }\n}\n\nconst _c1 = [\"*\"];\nlet MdcButtonLabel = /*#__PURE__*/(() => {\n  class MdcButtonLabel {}\n\n  MdcButtonLabel.ɵfac = function MdcButtonLabel_Factory(t) {\n    return new (t || MdcButtonLabel)();\n  };\n\n  MdcButtonLabel.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdcButtonLabel,\n    selectors: [[\"mdc-button-label\"], [\"\", \"mdcButtonLabel\", \"\"]],\n    hostAttrs: [1, \"mdc-button__label\"],\n    exportAs: [\"mdcButtonLabel\"]\n  });\n  return MdcButtonLabel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcButton = /*#__PURE__*/(() => {\n  class MdcButton {\n    /**\n     * @param {?} elementRef\n     * @param {?} _ripple\n     */\n    constructor(elementRef, _ripple) {\n      this.elementRef = elementRef;\n      this._ripple = _ripple;\n      this._raised = false;\n      this._unelevated = false;\n      this._outlined = false;\n      this._touch = false;\n      this._disabled = false;\n      this._ripple = new MdcRipple(this.elementRef);\n\n      this._ripple.init();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get raised() {\n      return this._raised;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set raised(value) {\n      this._raised = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get unelevated() {\n      return this._unelevated;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set unelevated(value) {\n      this._unelevated = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get outlined() {\n      return this._outlined;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set outlined(value) {\n      this._outlined = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get touch() {\n      return this._touch;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set touch(value) {\n      this._touch = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      this.setDisabled(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (this._icon) {\n        this._icon.elementRef.nativeElement.classList.add('mdc-button__icon');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._ripple.destroy();\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n\n\n    setDisabled(disabled) {\n      this._disabled = coerceBooleanProperty(disabled);\n\n      if (this._disabled) {\n        this.getHostElement().setAttribute('disabled', 'true');\n        this.getHostElement().setAttribute('aria-disabled', 'true');\n      } else {\n        this.getHostElement().removeAttribute('disabled');\n        this.getHostElement().removeAttribute('aria-disabled');\n      }\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n\n\n    focus() {\n      this.getHostElement().focus();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getHostElement() {\n      return this.elementRef.nativeElement;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onClick(event) {\n      // A disabled button shouldn't apply any actions\n      if (this.disabled) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n      }\n    }\n\n  }\n\n  MdcButton.ɵfac = function MdcButton_Factory(t) {\n    return new (t || MdcButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MdcRipple));\n  };\n\n  MdcButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcButton,\n    selectors: [[\"button\", \"mdc-button\", \"\"], [\"a\", \"mdc-button\", \"\"]],\n    contentQueries: function MdcButton_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcIcon, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icon = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mdc-button\"],\n    hostVars: 9,\n    hostBindings: function MdcButton_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MdcButton_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.disabled ? -1 : 0);\n        ɵngcc0.ɵɵclassProp(\"mdc-button--raised\", ctx.raised)(\"mdc-button--unelevated\", ctx.unelevated)(\"mdc-button--outlined\", ctx.outlined)(\"mdc-button--touch\", ctx.touch);\n      }\n    },\n    inputs: {\n      raised: \"raised\",\n      unelevated: \"unelevated\",\n      outlined: \"outlined\",\n      touch: \"touch\",\n      disabled: \"disabled\",\n      label: \"label\"\n    },\n    exportAs: [\"mdcButton\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MdcRipple])],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"mdc-button__ripple\"], [4, \"ngIf\"], [\"class\", \"mdc-button__touch\", 4, \"ngIf\"], [1, \"mdc-button__touch\"]],\n    template: function MdcButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MdcButton_mdc_button_label_1_Template, 2, 1, \"mdc-button-label\", 1);\n        ɵngcc0.ɵɵtemplate(2, MdcButton_div_2_Template, 1, 0, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.label);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.touch);\n      }\n    },\n    directives: [ɵngcc2.NgIf, MdcButtonLabel],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: button/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MdcButtonModule = /*#__PURE__*/(() => {\n  class MdcButtonModule {}\n\n  MdcButtonModule.ɵfac = function MdcButtonModule_Factory(t) {\n    return new (t || MdcButtonModule)();\n  };\n\n  MdcButtonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdcButtonModule\n  });\n  MdcButtonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return MdcButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdcButtonModule, {\n    declarations: function () {\n      return [MdcButton, MdcButtonLabel];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [MdcButton, MdcButtonLabel];\n    }\n  });\n})();\n\nexport { MdcButton, MdcButtonLabel, MdcButtonModule }; //# sourceMappingURL=button.js.map","map":null,"metadata":{},"sourceType":"module"}