{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCFloatingLabel } from '@material/floating-label/component';\nimport { MDCLineRipple } from '@material/line-ripple/component';\nimport * as menuSurfaceConstants from '@material/menu-surface/constants';\nimport { MDCMenu } from '@material/menu/component';\nimport * as menuConstants from '@material/menu/constants';\nimport { MDCNotchedOutline } from '@material/notched-outline/component';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCSelectFoundation } from './foundation';\nimport { MDCSelectHelperText } from './helper-text/component';\nimport { MDCSelectIcon } from './icon/component';\n\nvar MDCSelect =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCSelect, _super);\n\n  function MDCSelect() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCSelect.attachTo = function (root) {\n    return new MDCSelect(root);\n  };\n\n  MDCSelect.prototype.initialize = function (labelFactory, lineRippleFactory, outlineFactory, menuFactory, iconFactory, helperTextFactory) {\n    if (labelFactory === void 0) {\n      labelFactory = function (el) {\n        return new MDCFloatingLabel(el);\n      };\n    }\n\n    if (lineRippleFactory === void 0) {\n      lineRippleFactory = function (el) {\n        return new MDCLineRipple(el);\n      };\n    }\n\n    if (outlineFactory === void 0) {\n      outlineFactory = function (el) {\n        return new MDCNotchedOutline(el);\n      };\n    }\n\n    if (menuFactory === void 0) {\n      menuFactory = function (el) {\n        return new MDCMenu(el);\n      };\n    }\n\n    if (iconFactory === void 0) {\n      iconFactory = function (el) {\n        return new MDCSelectIcon(el);\n      };\n    }\n\n    if (helperTextFactory === void 0) {\n      helperTextFactory = function (el) {\n        return new MDCSelectHelperText(el);\n      };\n    }\n\n    this.selectAnchor_ = this.root_.querySelector(strings.SELECT_ANCHOR_SELECTOR);\n    this.selectedText_ = this.root_.querySelector(strings.SELECTED_TEXT_SELECTOR);\n\n    if (!this.selectedText_) {\n      throw new Error('MDCSelect: Missing required element: The following selector must be present: ' + (\"'\" + strings.SELECTED_TEXT_SELECTOR + \"'\"));\n    }\n\n    if (this.selectedText_.hasAttribute(strings.ARIA_CONTROLS)) {\n      var helperTextElement = document.getElementById(this.selectedText_.getAttribute(strings.ARIA_CONTROLS));\n\n      if (helperTextElement) {\n        this.helperText_ = helperTextFactory(helperTextElement);\n      }\n    }\n\n    this.menuSetup_(menuFactory);\n    var labelElement = this.root_.querySelector(strings.LABEL_SELECTOR);\n    this.label_ = labelElement ? labelFactory(labelElement) : null;\n    var lineRippleElement = this.root_.querySelector(strings.LINE_RIPPLE_SELECTOR);\n    this.lineRipple_ = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;\n    var outlineElement = this.root_.querySelector(strings.OUTLINE_SELECTOR);\n    this.outline_ = outlineElement ? outlineFactory(outlineElement) : null;\n    var leadingIcon = this.root_.querySelector(strings.LEADING_ICON_SELECTOR);\n\n    if (leadingIcon) {\n      this.leadingIcon_ = iconFactory(leadingIcon);\n    }\n\n    if (!this.root_.classList.contains(cssClasses.OUTLINED)) {\n      this.ripple_ = this.createRipple_();\n    }\n  };\n  /**\n   * Initializes the select's event listeners and internal state based\n   * on the environment's state.\n   */\n\n\n  MDCSelect.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.handleChange_ = function () {\n      return _this.foundation_.handleChange();\n    };\n\n    this.handleFocus_ = function () {\n      return _this.foundation_.handleFocus();\n    };\n\n    this.handleBlur_ = function () {\n      return _this.foundation_.handleBlur();\n    };\n\n    this.handleClick_ = function (evt) {\n      _this.selectedText_.focus();\n\n      _this.foundation_.handleClick(_this.getNormalizedXCoordinate_(evt));\n    };\n\n    this.handleKeydown_ = function (evt) {\n      return _this.foundation_.handleKeydown(evt);\n    };\n\n    this.handleMenuItemAction_ = function (evt) {\n      return _this.foundation_.handleMenuItemAction(evt.detail.index);\n    };\n\n    this.handleMenuOpened_ = function () {\n      return _this.foundation_.handleMenuOpened();\n    };\n\n    this.handleMenuClosed_ = function () {\n      return _this.foundation_.handleMenuClosed();\n    };\n\n    this.selectedText_.addEventListener('focus', this.handleFocus_);\n    this.selectedText_.addEventListener('blur', this.handleBlur_);\n    this.selectedText_.addEventListener('click', this.handleClick_);\n    this.selectedText_.addEventListener('keydown', this.handleKeydown_);\n    this.menu_.listen(menuSurfaceConstants.strings.CLOSED_EVENT, this.handleMenuClosed_);\n    this.menu_.listen(menuSurfaceConstants.strings.OPENED_EVENT, this.handleMenuOpened_);\n    this.menu_.listen(menuConstants.strings.SELECTED_EVENT, this.handleMenuItemAction_);\n    this.foundation_.init(); // Sets disabled state in foundation\n\n    this.disabled = this.root_.classList.contains(cssClasses.DISABLED);\n  };\n\n  MDCSelect.prototype.destroy = function () {\n    this.selectedText_.removeEventListener('change', this.handleChange_);\n    this.selectedText_.removeEventListener('focus', this.handleFocus_);\n    this.selectedText_.removeEventListener('blur', this.handleBlur_);\n    this.selectedText_.removeEventListener('keydown', this.handleKeydown_);\n    this.selectedText_.removeEventListener('click', this.handleClick_);\n    this.menu_.unlisten(menuSurfaceConstants.strings.CLOSED_EVENT, this.handleMenuClosed_);\n    this.menu_.unlisten(menuSurfaceConstants.strings.OPENED_EVENT, this.handleMenuOpened_);\n    this.menu_.unlisten(menuConstants.strings.SELECTED_EVENT, this.handleMenuItemAction_);\n    this.menu_.destroy();\n\n    if (this.ripple_) {\n      this.ripple_.destroy();\n    }\n\n    if (this.outline_) {\n      this.outline_.destroy();\n    }\n\n    if (this.leadingIcon_) {\n      this.leadingIcon_.destroy();\n    }\n\n    if (this.helperText_) {\n      this.helperText_.destroy();\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  Object.defineProperty(MDCSelect.prototype, \"value\", {\n    get: function () {\n      return this.foundation_.getValue();\n    },\n    set: function (value) {\n      this.foundation_.setValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelect.prototype, \"selectedIndex\", {\n    get: function () {\n      return this.foundation_.getSelectedIndex();\n    },\n    set: function (selectedIndex) {\n      this.foundation_.setSelectedIndex(selectedIndex,\n      /** closeMenu */\n      true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelect.prototype, \"disabled\", {\n    get: function () {\n      return this.foundation_.getDisabled();\n    },\n    set: function (disabled) {\n      this.foundation_.setDisabled(disabled);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelect.prototype, \"leadingIconAriaLabel\", {\n    set: function (label) {\n      this.foundation_.setLeadingIconAriaLabel(label);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelect.prototype, \"leadingIconContent\", {\n    /**\n     * Sets the text content of the leading icon.\n     */\n    set: function (content) {\n      this.foundation_.setLeadingIconContent(content);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelect.prototype, \"helperTextContent\", {\n    /**\n     * Sets the text content of the helper text.\n     */\n    set: function (content) {\n      this.foundation_.setHelperTextContent(content);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelect.prototype, \"valid\", {\n    /**\n     * Checks if the select is in a valid state.\n     */\n    get: function () {\n      return this.foundation_.isValid();\n    },\n\n    /**\n     * Sets the current invalid state of the select.\n     */\n    set: function (isValid) {\n      this.foundation_.setValid(isValid);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSelect.prototype, \"required\", {\n    /**\n     * Returns whether the select is required.\n     */\n    get: function () {\n      return this.foundation_.getRequired();\n    },\n\n    /**\n     * Sets the control to the required state.\n     */\n    set: function (isRequired) {\n      this.foundation_.setRequired(isRequired);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Recomputes the outline SVG path for the outline element.\n   */\n\n  MDCSelect.prototype.layout = function () {\n    this.foundation_.layout();\n  };\n\n  MDCSelect.prototype.getDefaultFoundation = function () {\n    // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    var adapter = tslib_1.__assign({}, this.getSelectAdapterMethods_(), this.getCommonAdapterMethods_(), this.getOutlineAdapterMethods_(), this.getLabelAdapterMethods_());\n\n    return new MDCSelectFoundation(adapter, this.getFoundationMap_());\n  };\n  /**\n   * Handles setup for the menu.\n   */\n\n\n  MDCSelect.prototype.menuSetup_ = function (menuFactory) {\n    this.menuElement_ = this.root_.querySelector(strings.MENU_SELECTOR);\n    this.menu_ = menuFactory(this.menuElement_);\n  };\n\n  MDCSelect.prototype.createRipple_ = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = tslib_1.__assign({}, MDCRipple.createAdapter({\n      root_: this.selectAnchor_\n    }), {\n      registerInteractionHandler: function (evtType, handler) {\n        return _this.selectedText_.addEventListener(evtType, handler);\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        return _this.selectedText_.removeEventListener(evtType, handler);\n      }\n    }); // tslint:enable:object-literal-sort-keys\n\n\n    return new MDCRipple(this.selectAnchor_, new MDCRippleFoundation(adapter));\n  };\n\n  MDCSelect.prototype.getSelectAdapterMethods_ = function () {\n    var _this = this; // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    return {\n      getSelectedMenuItem: function () {\n        return _this.menuElement_.querySelector(strings.SELECTED_ITEM_SELECTOR);\n      },\n      getMenuItemAttr: function (menuItem, attr) {\n        return menuItem.getAttribute(attr);\n      },\n      setSelectedText: function (text) {\n        return _this.selectedText_.textContent = text;\n      },\n      isSelectedTextFocused: function () {\n        return document.activeElement === _this.selectedText_;\n      },\n      getSelectedTextAttr: function (attr) {\n        return _this.selectedText_.getAttribute(attr);\n      },\n      setSelectedTextAttr: function (attr, value) {\n        return _this.selectedText_.setAttribute(attr, value);\n      },\n      openMenu: function () {\n        return _this.menu_.open = true;\n      },\n      closeMenu: function () {\n        return _this.menu_.open = false;\n      },\n      getAnchorElement: function () {\n        return _this.root_.querySelector(strings.SELECT_ANCHOR_SELECTOR);\n      },\n      setMenuAnchorElement: function (anchorEl) {\n        return _this.menu_.setAnchorElement(anchorEl);\n      },\n      setMenuAnchorCorner: function (anchorCorner) {\n        return _this.menu_.setAnchorCorner(anchorCorner);\n      },\n      setMenuWrapFocus: function (wrapFocus) {\n        return _this.menu_.wrapFocus = wrapFocus;\n      },\n      setAttributeAtIndex: function (index, attributeName, attributeValue) {\n        return _this.menu_.items[index].setAttribute(attributeName, attributeValue);\n      },\n      removeAttributeAtIndex: function (index, attributeName) {\n        return _this.menu_.items[index].removeAttribute(attributeName);\n      },\n      focusMenuItemAtIndex: function (index) {\n        return _this.menu_.items[index].focus();\n      },\n      getMenuItemCount: function () {\n        return _this.menu_.items.length;\n      },\n      getMenuItemValues: function () {\n        return _this.menu_.items.map(function (el) {\n          return el.getAttribute(strings.VALUE_ATTR) || '';\n        });\n      },\n      getMenuItemTextAtIndex: function (index) {\n        return _this.menu_.items[index].textContent;\n      },\n      addClassAtIndex: function (index, className) {\n        return _this.menu_.items[index].classList.add(className);\n      },\n      removeClassAtIndex: function (index, className) {\n        return _this.menu_.items[index].classList.remove(className);\n      }\n    }; // tslint:enable:object-literal-sort-keys\n  };\n\n  MDCSelect.prototype.getCommonAdapterMethods_ = function () {\n    var _this = this; // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    return {\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      hasClass: function (className) {\n        return _this.root_.classList.contains(className);\n      },\n      setRippleCenter: function (normalizedX) {\n        return _this.lineRipple_ && _this.lineRipple_.setRippleCenter(normalizedX);\n      },\n      activateBottomLine: function () {\n        return _this.lineRipple_ && _this.lineRipple_.activate();\n      },\n      deactivateBottomLine: function () {\n        return _this.lineRipple_ && _this.lineRipple_.deactivate();\n      },\n      notifyChange: function (value) {\n        var index = _this.selectedIndex;\n\n        _this.emit(strings.CHANGE_EVENT, {\n          value: value,\n          index: index\n        }, true\n        /* shouldBubble  */\n        );\n      }\n    }; // tslint:enable:object-literal-sort-keys\n  };\n\n  MDCSelect.prototype.getOutlineAdapterMethods_ = function () {\n    var _this = this; // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    return {\n      hasOutline: function () {\n        return Boolean(_this.outline_);\n      },\n      notchOutline: function (labelWidth) {\n        return _this.outline_ && _this.outline_.notch(labelWidth);\n      },\n      closeOutline: function () {\n        return _this.outline_ && _this.outline_.closeNotch();\n      }\n    }; // tslint:enable:object-literal-sort-keys\n  };\n\n  MDCSelect.prototype.getLabelAdapterMethods_ = function () {\n    var _this = this; // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    return {\n      hasLabel: function () {\n        return !!_this.label_;\n      },\n      floatLabel: function (shouldFloat) {\n        return _this.label_ && _this.label_.float(shouldFloat);\n      },\n      getLabelWidth: function () {\n        return _this.label_ ? _this.label_.getWidth() : 0;\n      }\n    }; // tslint:enable:object-literal-sort-keys\n  };\n  /**\n   * Calculates where the line ripple should start based on the x coordinate within the component.\n   */\n\n\n  MDCSelect.prototype.getNormalizedXCoordinate_ = function (evt) {\n    var targetClientRect = evt.target.getBoundingClientRect();\n    var xCoordinate = this.isTouchEvent_(evt) ? evt.touches[0].clientX : evt.clientX;\n    return xCoordinate - targetClientRect.left;\n  };\n\n  MDCSelect.prototype.isTouchEvent_ = function (evt) {\n    return Boolean(evt.touches);\n  };\n  /**\n   * Returns a map of all subcomponents to subfoundations.\n   */\n\n\n  MDCSelect.prototype.getFoundationMap_ = function () {\n    return {\n      helperText: this.helperText_ ? this.helperText_.foundation : undefined,\n      leadingIcon: this.leadingIcon_ ? this.leadingIcon_.foundation : undefined\n    };\n  };\n\n  return MDCSelect;\n}(MDCComponent);\n\nexport { MDCSelect }; //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}