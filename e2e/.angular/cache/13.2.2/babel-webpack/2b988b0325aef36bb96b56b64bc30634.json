{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, ElementRef, Input, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { MDCComponent } from '@angular-mdc/web/base';\nimport { MDCFadingTabIndicatorFoundation, MDCSlidingTabIndicatorFoundation } from '@material/tab-indicator';\n/**\n * @fileoverview added by tsickle\n * Generated from: tab-indicator/tab-indicator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nconst _c0 = [\"content\"];\nconst _c1 = [\"mdcTabIndicator\", \"\"];\n\nfunction MdcTabIndicator_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.icon);\n  }\n}\n\nlet MdcTabIndicator = /*#__PURE__*/(() => {\n  class MdcTabIndicator extends MDCComponent {\n    /**\n     * @param {?} _platform\n     * @param {?} _changeDetectorRef\n     * @param {?} elementRef\n     */\n    constructor(_platform, _changeDetectorRef, elementRef) {\n      super(elementRef);\n      this._platform = _platform;\n      this._changeDetectorRef = _changeDetectorRef;\n      this.elementRef = elementRef;\n      this._isFoundationInit = false;\n      this._active = false;\n      this._fade = false;\n      this._icon = null;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get active() {\n      return this._active;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set active(value) {\n      /** @type {?} */\n      const newValue = coerceBooleanProperty(value);\n\n      if (this._active !== newValue) {\n        this._active = coerceBooleanProperty(newValue);\n        this._active ? this.activate(this.computeContentClientRect()) : this.deactivate();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get fade() {\n      return this._fade;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set fade(value) {\n      /** @type {?} */\n      const newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._fade) {\n        this._fade = newValue;\n\n        this._initFoundation();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get icon() {\n      return this._icon;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set icon(value) {\n      this._icon = value;\n\n      this._updateContentClasses();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getDefaultFoundation() {\n      /** @type {?} */\n      const adapter = {\n        addClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.add(className),\n        removeClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.remove(className),\n        computeContentClientRect:\n        /**\n        * @return {?}\n        */\n        () => {\n          if (!this._platform.isBrowser) {\n            return {\n              height: 0,\n              width: 0,\n              bottom: 0,\n              top: 0,\n              left: 0,\n              right: 0\n            };\n          }\n\n          return this.content.nativeElement.getBoundingClientRect();\n        },\n        setContentStyleProperty:\n        /**\n        * @param {?} propName\n        * @param {?} value\n        * @return {?}\n        */\n        (propName, value) => this.content.nativeElement.style.setProperty(propName, value)\n      };\n      return this._fade ? new MDCFadingTabIndicatorFoundation(adapter) : new MDCSlidingTabIndicatorFoundation(adapter);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      if (!this._isFoundationInit) {\n        this._initFoundation();\n\n        this._updateContentClasses();\n      }\n    }\n    /**\n     * @param {?} previousIndicatorClientRect\n     * @return {?}\n     */\n\n\n    activate(previousIndicatorClientRect) {\n      if (this._foundation) {\n        this._foundation.activate(previousIndicatorClientRect);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    deactivate() {\n      if (this._foundation) {\n        this._foundation.deactivate();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    computeContentClientRect() {\n      return this._foundation.computeContentClientRect();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _initFoundation() {\n      this._foundation.init();\n\n      this._isFoundationInit = true;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _updateContentClasses() {\n      this.content.nativeElement.classList.remove('mdc-tab-indicator__content--underline');\n      this.content.nativeElement.classList.remove('mdc-tab-indicator__content--icon');\n\n      if (this.icon) {\n        this.content.nativeElement.classList.add('mdc-tab-indicator__content--icon');\n        this.content.nativeElement.classList.add('material-icons');\n      } else {\n        this.content.nativeElement.classList.add('mdc-tab-indicator__content--underline');\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @private\n     * @return {?}\n     */\n\n\n    _getHostElement() {\n      return this.elementRef.nativeElement;\n    }\n\n  }\n\n  MdcTabIndicator.ɵfac = function MdcTabIndicator_Factory(t) {\n    return new (t || MdcTabIndicator)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcTabIndicator.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcTabIndicator,\n    selectors: [[\"\", \"mdcTabIndicator\", \"\"], [\"mdc-tab-indicator\"]],\n    viewQuery: function MdcTabIndicator_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mdc-tab-indicator\"],\n    hostVars: 4,\n    hostBindings: function MdcTabIndicator_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mdc-tab-indicator--active\", ctx.active)(\"mdc-tab-indicator--fade\", ctx.fade);\n      }\n    },\n    inputs: {\n      active: \"active\",\n      fade: \"fade\",\n      icon: \"icon\"\n    },\n    exportAs: [\"mdcTabIndicator\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c1,\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"mdc-tab-indicator__content\"], [\"content\", \"\"], [4, \"ngIf\"]],\n    template: function MdcTabIndicator_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0, 1);\n        ɵngcc0.ɵɵtemplate(2, MdcTabIndicator_ng_container_2_Template, 2, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.icon);\n      }\n    },\n    directives: [ɵngcc2.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcTabIndicator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: tab-indicator/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MdcTabIndicatorModule = /*#__PURE__*/(() => {\n  class MdcTabIndicatorModule {}\n\n  MdcTabIndicatorModule.ɵfac = function MdcTabIndicatorModule_Factory(t) {\n    return new (t || MdcTabIndicatorModule)();\n  };\n\n  MdcTabIndicatorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdcTabIndicatorModule\n  });\n  MdcTabIndicatorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return MdcTabIndicatorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdcTabIndicatorModule, {\n    declarations: function () {\n      return [MdcTabIndicator];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [MdcTabIndicator];\n    }\n  });\n})();\n\nexport { MdcTabIndicator, MdcTabIndicatorModule }; //# sourceMappingURL=tab-indicator.js.map","map":null,"metadata":{},"sourceType":"module"}