{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { strings } from './constants';\nimport { MDCSnackbarFoundation } from './foundation';\nimport * as util from './util';\nvar SURFACE_SELECTOR = strings.SURFACE_SELECTOR,\n    LABEL_SELECTOR = strings.LABEL_SELECTOR,\n    ACTION_SELECTOR = strings.ACTION_SELECTOR,\n    DISMISS_SELECTOR = strings.DISMISS_SELECTOR,\n    OPENING_EVENT = strings.OPENING_EVENT,\n    OPENED_EVENT = strings.OPENED_EVENT,\n    CLOSING_EVENT = strings.CLOSING_EVENT,\n    CLOSED_EVENT = strings.CLOSED_EVENT;\n\nvar MDCSnackbar =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCSnackbar, _super);\n\n  function MDCSnackbar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCSnackbar.attachTo = function (root) {\n    return new MDCSnackbar(root);\n  };\n\n  MDCSnackbar.prototype.initialize = function (announcerFactory) {\n    if (announcerFactory === void 0) {\n      announcerFactory = function () {\n        return util.announce;\n      };\n    }\n\n    this.announce_ = announcerFactory();\n  };\n\n  MDCSnackbar.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.surfaceEl_ = this.root_.querySelector(SURFACE_SELECTOR);\n    this.labelEl_ = this.root_.querySelector(LABEL_SELECTOR);\n    this.actionEl_ = this.root_.querySelector(ACTION_SELECTOR);\n\n    this.handleKeyDown_ = function (evt) {\n      return _this.foundation_.handleKeyDown(evt);\n    };\n\n    this.handleSurfaceClick_ = function (evt) {\n      var target = evt.target;\n\n      if (_this.isActionButton_(target)) {\n        _this.foundation_.handleActionButtonClick(evt);\n      } else if (_this.isActionIcon_(target)) {\n        _this.foundation_.handleActionIconClick(evt);\n      }\n    };\n\n    this.registerKeyDownHandler_(this.handleKeyDown_);\n    this.registerSurfaceClickHandler_(this.handleSurfaceClick_);\n  };\n\n  MDCSnackbar.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.deregisterKeyDownHandler_(this.handleKeyDown_);\n    this.deregisterSurfaceClickHandler_(this.handleSurfaceClick_);\n  };\n\n  MDCSnackbar.prototype.open = function () {\n    this.foundation_.open();\n  };\n  /**\n   * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the\n   *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom\n   *     client-specific values may also be used if desired.\n   */\n\n\n  MDCSnackbar.prototype.close = function (reason) {\n    if (reason === void 0) {\n      reason = '';\n    }\n\n    this.foundation_.close(reason);\n  };\n\n  MDCSnackbar.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      announce: function () {\n        return _this.announce_(_this.labelEl_);\n      },\n      notifyClosed: function (reason) {\n        return _this.emit(CLOSED_EVENT, reason ? {\n          reason: reason\n        } : {});\n      },\n      notifyClosing: function (reason) {\n        return _this.emit(CLOSING_EVENT, reason ? {\n          reason: reason\n        } : {});\n      },\n      notifyOpened: function () {\n        return _this.emit(OPENED_EVENT, {});\n      },\n      notifyOpening: function () {\n        return _this.emit(OPENING_EVENT, {});\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      }\n    };\n    return new MDCSnackbarFoundation(adapter);\n  };\n\n  Object.defineProperty(MDCSnackbar.prototype, \"timeoutMs\", {\n    get: function () {\n      return this.foundation_.getTimeoutMs();\n    },\n    set: function (timeoutMs) {\n      this.foundation_.setTimeoutMs(timeoutMs);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbar.prototype, \"closeOnEscape\", {\n    get: function () {\n      return this.foundation_.getCloseOnEscape();\n    },\n    set: function (closeOnEscape) {\n      this.foundation_.setCloseOnEscape(closeOnEscape);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbar.prototype, \"isOpen\", {\n    get: function () {\n      return this.foundation_.isOpen();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbar.prototype, \"labelText\", {\n    get: function () {\n      // This property only returns null if the node is a document, DOCTYPE, or notation.\n      // On Element nodes, it always returns a string.\n      return this.labelEl_.textContent;\n    },\n    set: function (labelText) {\n      this.labelEl_.textContent = labelText;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbar.prototype, \"actionButtonText\", {\n    get: function () {\n      return this.actionEl_.textContent;\n    },\n    set: function (actionButtonText) {\n      this.actionEl_.textContent = actionButtonText;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCSnackbar.prototype.registerKeyDownHandler_ = function (handler) {\n    this.listen('keydown', handler);\n  };\n\n  MDCSnackbar.prototype.deregisterKeyDownHandler_ = function (handler) {\n    this.unlisten('keydown', handler);\n  };\n\n  MDCSnackbar.prototype.registerSurfaceClickHandler_ = function (handler) {\n    this.surfaceEl_.addEventListener('click', handler);\n  };\n\n  MDCSnackbar.prototype.deregisterSurfaceClickHandler_ = function (handler) {\n    this.surfaceEl_.removeEventListener('click', handler);\n  };\n\n  MDCSnackbar.prototype.isActionButton_ = function (target) {\n    return Boolean(closest(target, ACTION_SELECTOR));\n  };\n\n  MDCSnackbar.prototype.isActionIcon_ = function (target) {\n    return Boolean(closest(target, DISMISS_SELECTOR));\n  };\n\n  return MDCSnackbar;\n}(MDCComponent);\n\nexport { MDCSnackbar }; //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}