{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { forwardRef, Directive, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, ElementRef, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MdcIcon, MdcIconModule } from '@angular-mdc/web/icon';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { startWith } from 'rxjs/operators';\nimport { MDCRippleFoundation } from '@material/ripple';\nimport { MDCComponent } from '@angular-mdc/web/base';\nimport { MdcRipple } from '@angular-mdc/web/ripple';\nimport { MDCIconButtonToggleFoundation } from '@material/icon-button';\n/**\n * @fileoverview added by tsickle\n * Generated from: icon-button/icon-button.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular-mdc/web/ripple';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular-mdc/web/icon';\nconst _c0 = [\"mdc-icon-button\", \"\"];\n\nfunction MdcIconButton_mdc_icon_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mdc-icon\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.icon);\n  }\n}\n\nconst _c1 = [\"*\"];\nconst MDC_ICON_BUTTON_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MdcIconButton),\n  multi: true\n};\n/**\n * Change event object emitted by MdcIconButton.\n */\n\nclass MdcIconButtonChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/** @type {?} */\n\n\nlet nextUniqueId = 0;\nlet MdcIconOn = /*#__PURE__*/(() => {\n  class MdcIconOn {}\n\n  MdcIconOn.ɵfac = function MdcIconOn_Factory(t) {\n    return new (t || MdcIconOn)();\n  };\n\n  MdcIconOn.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdcIconOn,\n    selectors: [[\"\", \"mdcIconOn\", \"\"]],\n    hostAttrs: [1, \"mdc-icon-button__icon--on\"]\n  });\n  return MdcIconOn;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcIconButton = /*#__PURE__*/(() => {\n  class MdcIconButton extends MDCComponent {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} elementRef\n     * @param {?} ripple\n     */\n    constructor(_changeDetectorRef, elementRef, ripple) {\n      super(elementRef);\n      this._changeDetectorRef = _changeDetectorRef;\n      this.elementRef = elementRef;\n      this.ripple = ripple;\n      this._uniqueId = `mdc-icon-button-${++nextUniqueId}`;\n      this.id = this._uniqueId;\n      this.name = null;\n      this.icon = null;\n      this._on = false;\n      this._disabled = false;\n      this.change = new EventEmitter();\n      /**\n       * Subscription to changes in icons.\n       */\n\n      this._changeSubscription = null;\n\n      this._onChange =\n      /**\n      * @return {?}\n      */\n      () => {};\n\n      this._onTouched =\n      /**\n      * @return {?}\n      */\n      () => {};\n\n      this._root = this.elementRef.nativeElement;\n      this.ripple = this._createRipple();\n      this.ripple.init();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get inputId() {\n      return `${this.id || this._uniqueId}`;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get on() {\n      return this._on;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set on(value) {\n      this.setOn(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      this.setDisabled(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getDefaultFoundation() {\n      /** @type {?} */\n      const adapter = {\n        addClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.add(className),\n        removeClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.remove(className),\n        hasClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.contains(className),\n        setAttr:\n        /**\n        * @param {?} name\n        * @param {?} value\n        * @return {?}\n        */\n        (name, value) => this._getHostElement().setAttribute(name, value),\n        notifyChange:\n        /**\n        * @param {?} evtData\n        * @return {?}\n        */\n        evtData => {\n          this.change.emit(new MdcIconButtonChange(this, evtData.isOn));\n\n          this._onChange(this._foundation.isOn());\n        }\n      };\n      return new MDCIconButtonToggleFoundation(adapter);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this._foundation.init();\n\n      this._foundation.toggle(this._on || this._foundation.isOn());\n\n      this._changeDetectorRef.detectChanges(); // When the icons change, re-subscribe\n\n\n      this._changeSubscription = this.icons.changes.pipe(startWith(null)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.icons.forEach(\n        /**\n        * @param {?} icon\n        * @return {?}\n        */\n        icon => {\n          icon.elementRef.nativeElement.classList.add('mdc-icon-button__icon');\n          icon.role = null;\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this._changeSubscription) {\n        this._changeSubscription.unsubscribe();\n      }\n\n      this.ripple.destroy();\n\n      this._foundation.destroy();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    writeValue(value) {\n      this._onChange(value);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * @param {?=} isOn\n     * @return {?}\n     */\n\n\n    toggle(isOn) {\n      this.on = isOn ? coerceBooleanProperty(isOn) : !this.on;\n\n      this._foundation.toggle(this.on);\n    }\n    /**\n     * @param {?} on\n     * @return {?}\n     */\n\n\n    setOn(on) {\n      this._on = coerceBooleanProperty(on);\n\n      this._foundation.toggle(this.on);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Sets the button disabled state\n     * @param {?} disabled\n     * @return {?}\n     */\n\n\n    setDisabled(disabled) {\n      this._disabled = coerceBooleanProperty(disabled);\n      this.disabled ? this._getHostElement().setAttribute('disabled', '') : this._getHostElement().removeAttribute('disabled');\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    handleClick() {\n      if (this.icons.length === 1) {\n        return;\n      }\n\n      this.on = !this.on;\n\n      this._foundation.handleClick();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _createRipple() {\n      /** @type {?} */\n      const adapter = Object.assign(Object.assign({}, MdcRipple.createAdapter(this)), {\n        isUnbounded:\n        /**\n        * @return {?}\n        */\n        () => true\n      });\n      return new MdcRipple(this.elementRef, new MDCRippleFoundation(adapter));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _getHostElement() {\n      return this.elementRef.nativeElement;\n    }\n\n  }\n\n  MdcIconButton.ɵfac = function MdcIconButton_Factory(t) {\n    return new (t || MdcIconButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MdcRipple));\n  };\n\n  MdcIconButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcIconButton,\n    selectors: [[\"\", \"mdc-icon-button\", \"\"], [\"button\", \"mdcIconButton\", \"\"], [\"a\", \"mdcIconButton\", \"\"]],\n    contentQueries: function MdcIconButton_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcIcon, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.icons = _t);\n      }\n    },\n    hostAttrs: [\"attr.aria-pressed\", \"false\", 1, \"mdc-icon-button\"],\n    hostVars: 3,\n    hostBindings: function MdcIconButton_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MdcIconButton_click_HostBindingHandler() {\n          return ctx.handleClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mdc-icon-button--on\", ctx.on);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      name: \"name\",\n      icon: \"icon\",\n      on: \"on\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    exportAs: [\"mdcIconButton\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MDC_ICON_BUTTON_CONTROL_VALUE_ACCESSOR, MdcRipple]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 1,\n    consts: [[4, \"ngIf\"]],\n    template: function MdcIconButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MdcIconButton_mdc_icon_0_Template, 2, 1, \"mdc-icon\", 0);\n        ɵngcc0.ɵɵprojection(1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.icon);\n      }\n    },\n    directives: [ɵngcc2.NgIf, ɵngcc3.MdcIcon],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcIconButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: icon-button/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst ICON_BUTTON_DECLARATIONS = [MdcIconButton, MdcIconOn];\nlet MdcIconButtonModule = /*#__PURE__*/(() => {\n  class MdcIconButtonModule {}\n\n  MdcIconButtonModule.ɵfac = function MdcIconButtonModule_Factory(t) {\n    return new (t || MdcIconButtonModule)();\n  };\n\n  MdcIconButtonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdcIconButtonModule\n  });\n  MdcIconButtonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MdcIconModule], MdcIconModule]\n  });\n  return MdcIconButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdcIconButtonModule, {\n    declarations: function () {\n      return [MdcIconButton, MdcIconOn];\n    },\n    imports: function () {\n      return [CommonModule, MdcIconModule];\n    },\n    exports: function () {\n      return [MdcIconButton, MdcIconOn, MdcIconModule];\n    }\n  });\n})();\n\nexport { MDC_ICON_BUTTON_CONTROL_VALUE_ACCESSOR, MdcIconButton, MdcIconButtonChange, MdcIconButtonModule, MdcIconOn }; //# sourceMappingURL=icon-button.js.map","map":null,"metadata":{},"sourceType":"module"}