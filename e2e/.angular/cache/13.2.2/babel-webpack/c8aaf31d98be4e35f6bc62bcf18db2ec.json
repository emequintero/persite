{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { Component, ElementRef, ChangeDetectionStrategy, ViewEncapsulation, Input, ViewChild, ChangeDetectorRef, NgZone, ContentChild, ContentChildren, NgModule, Injectable, ɵɵdefineInjectable } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, fromEvent } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\nimport { MDCComponent } from '@angular-mdc/web/base';\nimport { MDCTextFieldCharacterCounterFoundation } from '@material/textfield';\n/**\n * @fileoverview added by tsickle\n * Generated from: form-field/form-field-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"mdcCharacterCounter\", \"\"];\nconst _c1 = [\"*\"];\nconst _c2 = [\"helperText\"];\n\nfunction MdcHelperText_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 2);\n  }\n}\n\nconst _c3 = [\"*\", [[\"mdcHelperText\"], [\"mdc-helper-text\"]]];\nconst _c4 = [\"*\", \"[mdcHelperText, mdc-helper-text]\"];\n\nclass MdcFormFieldControl {\n  constructor() {\n    /**\n     * The value of the control.\n     */\n    this.value = null;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: form-field/character-counter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MdcCharacterCounter = /*#__PURE__*/(() => {\n  class MdcCharacterCounter extends MDCComponent {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      super(elementRef);\n      this.elementRef = elementRef;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get foundation() {\n      return this._foundation;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getDefaultFoundation() {\n      /** @type {?} */\n      const adapter = {\n        setContent:\n        /**\n        * @param {?} content\n        * @return {?}\n        */\n        content => this.elementRef.nativeElement.textContent = content\n      };\n      return new MDCTextFieldCharacterCounterFoundation(adapter);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.destroy();\n    }\n\n  }\n\n  MdcCharacterCounter.ɵfac = function MdcCharacterCounter_Factory(t) {\n    return new (t || MdcCharacterCounter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcCharacterCounter.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcCharacterCounter,\n    selectors: [[\"\", \"mdcCharacterCounter\", \"\"]],\n    hostAttrs: [1, \"mdc-text-field-character-counter\"],\n    exportAs: [\"mdcCharacterCounter\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MdcCharacterCounter_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return MdcCharacterCounter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: form-field/helper-text.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MdcHelperText = /*#__PURE__*/(() => {\n  class MdcHelperText {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.characterCounter = false;\n      this._persistent = false;\n      this._validation = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get persistent() {\n      return this._persistent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set persistent(value) {\n      this._persistent = coerceBooleanProperty(value);\n\n      if (this._foundation) {\n        this._foundation.setPersistent(this._persistent);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get validation() {\n      return this._validation;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set validation(value) {\n      this._validation = coerceBooleanProperty(value);\n\n      if (this._foundation) {\n        this._foundation.setValidation(this._validation);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get foundation() {\n      return this._foundation;\n    }\n    /**\n     * Sets the validity of the helper text based on inputIsValid.\n     * @param {?} inputIsValid\n     * @return {?}\n     */\n\n\n    setValidity(inputIsValid) {\n      this._foundation.setValidity(inputIsValid);\n    }\n    /**\n     * Makes the helper text visible to the screen reader.\n     * @return {?}\n     */\n\n\n    showToScreenReader() {\n      this._foundation.showToScreenReader();\n    }\n    /**\n     * @param {?} foundation\n     * @return {?}\n     */\n\n\n    init(foundation) {\n      this._foundation = new foundation(this._createAdapter());\n\n      this._foundation.setPersistent(this.persistent);\n\n      this._foundation.setValidation(this.validation);\n    }\n    /**\n     * @param {?} className\n     * @return {?}\n     */\n\n\n    addHelperTextClass(className) {\n      /** @type {?} */\n      this._helperTextElement.nativeElement.classList.add(`${className}-helper-text`);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _createAdapter() {\n      return {\n        addClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className =>\n        /** @type {?} */\n        this._helperTextElement.nativeElement.classList.add(className),\n        removeClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className =>\n        /** @type {?} */\n        this._helperTextElement.nativeElement.classList.remove(className),\n        hasClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className =>\n        /** @type {?} */\n        this._helperTextElement.nativeElement.classList.contains(className),\n        setAttr:\n        /**\n        * @param {?} attr\n        * @param {?} value\n        * @return {?}\n        */\n        (attr, value) =>\n        /** @type {?} */\n        this._helperTextElement.nativeElement.setAttribute(attr, value),\n        removeAttr:\n        /**\n        * @param {?} attr\n        * @return {?}\n        */\n        attr =>\n        /** @type {?} */\n        this._helperTextElement.nativeElement.removeAttribute(attr)\n      };\n    }\n\n  }\n\n  MdcHelperText.ɵfac = function MdcHelperText_Factory(t) {\n    return new (t || MdcHelperText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcHelperText.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcHelperText,\n    selectors: [[\"mdc-helper-text\"], [\"\", \"mdcHelperText\", \"\"], [\"mdc-text-field-helper-text\"], [\"\", \"mdcTextFieldHelperText\", \"\"]],\n    viewQuery: function MdcHelperText_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, 7);\n        ɵngcc0.ɵɵviewQuery(MdcCharacterCounter, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._helperTextElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._characterCounterElement = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mdc-text-field-helper-line\"],\n    inputs: {\n      persistent: \"persistent\",\n      validation: \"validation\",\n      id: \"id\"\n    },\n    exportAs: [\"mdcHelperText\"],\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 1,\n    consts: [[\"helperText\", \"\"], [\"mdcCharacterCounter\", \"\", 4, \"ngIf\"], [\"mdcCharacterCounter\", \"\"]],\n    template: function MdcHelperText_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", null, 0);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, MdcHelperText_div_3_Template, 1, 0, \"div\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.characterCounter);\n      }\n    },\n    directives: [ɵngcc1.NgIf, MdcCharacterCounter],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcHelperText;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: form-field/form-field.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MdcFormField = /*#__PURE__*/(() => {\n  class MdcFormField {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _ngZone\n     * @param {?} elementRef\n     */\n    constructor(_changeDetectorRef, _ngZone, elementRef) {\n      this._changeDetectorRef = _changeDetectorRef;\n      this._ngZone = _ngZone;\n      this.elementRef = elementRef;\n      /**\n       * Emits whenever the component is destroyed.\n       */\n\n      this._destroy = new Subject();\n      this._fluid = false;\n      this._alignEnd = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get fluid() {\n      return this._fluid;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set fluid(value) {\n      this._fluid = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get alignEnd() {\n      return this._alignEnd;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set alignEnd(value) {\n      this._alignEnd = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      var _a, _b;\n\n      if (this._control) {\n        /** @type {?} */\n        const control = this._control.elementRef.nativeElement;\n\n        if (((_b = (_a = control) === null || _a === void 0 ? void 0 : _a.nextElementSibling) === null || _b === void 0 ? void 0 : _b.tagName) === 'LABEL') {\n          this.label = control.nextElementSibling;\n\n          if (this.label && this._control.inputId) {\n            /** @type {?} */\n            this.label.setAttribute('for', this._control.inputId);\n\n            this._loadListeners();\n          }\n        }\n      } // When assistive elements change, initialize foundation\n\n\n      this.assistiveElements.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.assistiveElements.forEach(\n        /**\n        * @param {?} helperText\n        * @return {?}\n        */\n        helperText => this._initHelperTextFoundation(helperText));\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._destroy.next();\n\n      this._destroy.complete();\n    }\n    /**\n     * @private\n     * @param {?} helperText\n     * @return {?}\n     */\n\n\n    _initHelperTextFoundation(helperText) {\n      var _a;\n      /** @type {?} */\n\n\n      const control = this._control;\n\n      if ((_a = control) === null || _a === void 0 ? void 0 : _a.controlType) {\n        control.helperText = helperText;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _loadListeners() {\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => fromEvent(\n      /** @type {?} */\n      this.label, 'click').pipe(takeUntil(this._destroy)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => this._ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => {\n        /** @type {?} */\n        this._control.ripple.activateRipple();\n\n        if (typeof requestAnimationFrame !== 'undefined') {\n          requestAnimationFrame(\n          /**\n          * @return {?}\n          */\n          () =>\n          /** @type {?} */\n          this._control.ripple.deactivateRipple());\n        }\n      })));\n    }\n\n  }\n\n  MdcFormField.ɵfac = function MdcFormField_Factory(t) {\n    return new (t || MdcFormField)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcFormField.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcFormField,\n    selectors: [[\"mdc-form-field\"]],\n    contentQueries: function MdcFormField_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcFormFieldControl, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcHelperText, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._control = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.assistiveElements = _t);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function MdcFormField_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ngx-mdc-form-field--fluid\", ctx.fluid)(\"mdc-form-field--align-end\", ctx.alignEnd);\n      }\n    },\n    inputs: {\n      fluid: \"fluid\",\n      alignEnd: \"alignEnd\"\n    },\n    exportAs: [\"mdcFormField\"],\n    ngContentSelectors: _c4,\n    decls: 2,\n    vars: 0,\n    template: function MdcFormField_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcFormField;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: form-field/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst FORM_FIELD_DECLARATIONS = [MdcCharacterCounter, MdcFormField, MdcHelperText];\nlet MdcFormFieldModule = /*#__PURE__*/(() => {\n  class MdcFormFieldModule {}\n\n  MdcFormFieldModule.ɵfac = function MdcFormFieldModule_Factory(t) {\n    return new (t || MdcFormFieldModule)();\n  };\n\n  MdcFormFieldModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdcFormFieldModule\n  });\n  MdcFormFieldModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return MdcFormFieldModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdcFormFieldModule, {\n    declarations: function () {\n      return [MdcCharacterCounter, MdcFormField, MdcHelperText];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [MdcCharacterCounter, MdcFormField, MdcHelperText];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: form-field/error-state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n * @template T\n * @param {?} base\n * @return {?}\n */\n\n\nfunction mixinErrorState(base) {\n  return class extends base {\n    /**\n     * @param {...?} args\n     */\n    constructor(...args) {\n      super(...args);\n      /**\n       * Whether the component is in an error state.\n       */\n\n      this.errorState = false;\n      this.required = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    updateErrorState() {\n      /** @type {?} */\n      const oldState = this.errorState;\n      /** @type {?} */\n\n      const parent = this._parentFormGroup || this._parentForm;\n      /** @type {?} */\n\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      /** @type {?} */\n\n      const control = this.ngControl ?\n      /** @type {?} */\n      this.ngControl.control : null;\n      /** @type {?} */\n\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n      } // Currently there isn't a great way to determine if Validators.required\n      // has been added to the control since form validators are combined into\n      // an aggregate function at initialization.\n\n\n      if (control && !this.required) {\n        this.required = control.hasError('required');\n      }\n    }\n\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: form-field/error-state-matcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Provider that defines how form controls behave with regards to displaying error messages.\n */\n\n\nclass ErrorStateMatcher {\n  /**\n   * @param {?} control\n   * @param {?} form\n   * @return {?}\n   */\n  isErrorState(control, form) {\n    return !!(control && control.invalid && (control.touched || form && form.submitted));\n  }\n\n}\n\nErrorStateMatcher.ɵfac = function ErrorStateMatcher_Factory(t) {\n  return new (t || ErrorStateMatcher)();\n};\n\nErrorStateMatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ErrorStateMatcher,\n  factory: ErrorStateMatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nErrorStateMatcher.ɵprov21 = ɵɵdefineInjectable({\n  factory: function ErrorStateMatcher_Factory() {\n    return new ErrorStateMatcher();\n  },\n  token: ErrorStateMatcher,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nexport { ErrorStateMatcher, MdcCharacterCounter, MdcFormField, MdcFormFieldControl, MdcFormFieldModule, MdcHelperText, mixinErrorState }; //# sourceMappingURL=form-field.js.map","map":null,"metadata":{},"sourceType":"module"}