{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses as listCssClasses } from '@material/list/constants';\nimport { MDCMenuSurfaceFoundation } from '@material/menu-surface/foundation';\nimport { cssClasses, DefaultFocusState, numbers, strings } from './constants';\n\nvar MDCMenuFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCMenuFoundation, _super);\n\n  function MDCMenuFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCMenuFoundation.defaultAdapter, adapter)) || this;\n\n    _this.closeAnimationEndTimerId_ = 0;\n    _this.defaultFocusState_ = DefaultFocusState.LIST_ROOT;\n    return _this;\n  }\n\n  Object.defineProperty(MDCMenuFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCMenuFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCMenuFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCMenuFoundation, \"defaultAdapter\", {\n    /**\n     * @see {@link MDCMenuAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClassToElementAtIndex: function () {\n          return undefined;\n        },\n        removeClassFromElementAtIndex: function () {\n          return undefined;\n        },\n        addAttributeToElementAtIndex: function () {\n          return undefined;\n        },\n        removeAttributeFromElementAtIndex: function () {\n          return undefined;\n        },\n        elementContainsClass: function () {\n          return false;\n        },\n        closeSurface: function () {\n          return undefined;\n        },\n        getElementIndex: function () {\n          return -1;\n        },\n        notifySelected: function () {\n          return undefined;\n        },\n        getMenuItemCount: function () {\n          return 0;\n        },\n        focusItemAtIndex: function () {\n          return undefined;\n        },\n        focusListRoot: function () {\n          return undefined;\n        },\n        getSelectedSiblingOfItemAtIndex: function () {\n          return -1;\n        },\n        isSelectableItemAtIndex: function () {\n          return false;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCMenuFoundation.prototype.destroy = function () {\n    if (this.closeAnimationEndTimerId_) {\n      clearTimeout(this.closeAnimationEndTimerId_);\n    }\n\n    this.adapter_.closeSurface();\n  };\n\n  MDCMenuFoundation.prototype.handleKeydown = function (evt) {\n    var key = evt.key,\n        keyCode = evt.keyCode;\n    var isTab = key === 'Tab' || keyCode === 9;\n\n    if (isTab) {\n      this.adapter_.closeSurface(\n      /** skipRestoreFocus */\n      true);\n    }\n  };\n\n  MDCMenuFoundation.prototype.handleItemAction = function (listItem) {\n    var _this = this;\n\n    var index = this.adapter_.getElementIndex(listItem);\n\n    if (index < 0) {\n      return;\n    }\n\n    this.adapter_.notifySelected({\n      index: index\n    });\n    this.adapter_.closeSurface(); // Wait for the menu to close before adding/removing classes that affect styles.\n\n    this.closeAnimationEndTimerId_ = setTimeout(function () {\n      // Recompute the index in case the menu contents have changed.\n      var recomputedIndex = _this.adapter_.getElementIndex(listItem);\n\n      if (_this.adapter_.isSelectableItemAtIndex(recomputedIndex)) {\n        _this.setSelectedIndex(recomputedIndex);\n      }\n    }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);\n  };\n\n  MDCMenuFoundation.prototype.handleMenuSurfaceOpened = function () {\n    switch (this.defaultFocusState_) {\n      case DefaultFocusState.FIRST_ITEM:\n        this.adapter_.focusItemAtIndex(0);\n        break;\n\n      case DefaultFocusState.LAST_ITEM:\n        this.adapter_.focusItemAtIndex(this.adapter_.getMenuItemCount() - 1);\n        break;\n\n      case DefaultFocusState.NONE:\n        // Do nothing.\n        break;\n\n      default:\n        this.adapter_.focusListRoot();\n        break;\n    }\n  };\n  /**\n   * Sets default focus state where the menu should focus every time when menu\n   * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by\n   * default.\n   */\n\n\n  MDCMenuFoundation.prototype.setDefaultFocusState = function (focusState) {\n    this.defaultFocusState_ = focusState;\n  };\n  /**\n   * Selects the list item at `index` within the menu.\n   * @param index Index of list item within the menu.\n   */\n\n\n  MDCMenuFoundation.prototype.setSelectedIndex = function (index) {\n    this.validatedIndex_(index);\n\n    if (!this.adapter_.isSelectableItemAtIndex(index)) {\n      throw new Error('MDCMenuFoundation: No selection group at specified index.');\n    }\n\n    var prevSelectedIndex = this.adapter_.getSelectedSiblingOfItemAtIndex(index);\n\n    if (prevSelectedIndex >= 0) {\n      this.adapter_.removeAttributeFromElementAtIndex(prevSelectedIndex, strings.ARIA_CHECKED_ATTR);\n      this.adapter_.removeClassFromElementAtIndex(prevSelectedIndex, cssClasses.MENU_SELECTED_LIST_ITEM);\n    }\n\n    this.adapter_.addClassToElementAtIndex(index, cssClasses.MENU_SELECTED_LIST_ITEM);\n    this.adapter_.addAttributeToElementAtIndex(index, strings.ARIA_CHECKED_ATTR, 'true');\n  };\n  /**\n   * Sets the enabled state to isEnabled for the menu item at the given index.\n   * @param index Index of the menu item\n   * @param isEnabled The desired enabled state of the menu item.\n   */\n\n\n  MDCMenuFoundation.prototype.setEnabled = function (index, isEnabled) {\n    this.validatedIndex_(index);\n\n    if (isEnabled) {\n      this.adapter_.removeClassFromElementAtIndex(index, listCssClasses.LIST_ITEM_DISABLED_CLASS);\n      this.adapter_.addAttributeToElementAtIndex(index, strings.ARIA_DISABLED_ATTR, 'false');\n    } else {\n      this.adapter_.addClassToElementAtIndex(index, listCssClasses.LIST_ITEM_DISABLED_CLASS);\n      this.adapter_.addAttributeToElementAtIndex(index, strings.ARIA_DISABLED_ATTR, 'true');\n    }\n  };\n\n  MDCMenuFoundation.prototype.validatedIndex_ = function (index) {\n    var menuSize = this.adapter_.getMenuItemCount();\n    var isIndexInRange = index >= 0 && index < menuSize;\n\n    if (!isIndexInRange) {\n      throw new Error('MDCMenuFoundation: No list item at specified index.');\n    }\n  };\n\n  return MDCMenuFoundation;\n}(MDCFoundation);\n\nexport { MDCMenuFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCMenuFoundation; //# sourceMappingURL=foundation.js.map","map":null,"metadata":{},"sourceType":"module"}