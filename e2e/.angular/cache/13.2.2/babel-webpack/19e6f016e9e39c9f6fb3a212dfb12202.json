{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { Directive, ElementRef, Input, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, EventEmitter, NgZone, ChangeDetectorRef, Optional, Inject, Output, ContentChild, ContentChildren, forwardRef, ViewChild, Attribute, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MdcIcon, MdcIconRegistry, MDC_ICON_LOCATION, MdcIconModule } from '@angular-mdc/web/icon';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { takeUntil, startWith } from 'rxjs/operators';\nimport { MDCRippleFoundation } from '@material/ripple';\nimport { MDCComponent } from '@angular-mdc/web/base';\nimport { MdcRipple } from '@angular-mdc/web/ripple';\nimport { MDCChipFoundation, MDCChipSetFoundation } from '@material/chips';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\n/**\n * @fileoverview added by tsickle\n * Generated from: chips/chip-directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular-mdc/web/ripple';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular-mdc/web/icon';\nimport * as ɵngcc5 from '@angular/forms';\n\nfunction MdcChip_mdc_chip_checkmark_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mdc-chip-checkmark\");\n  }\n}\n\nfunction MdcChip_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 5);\n  }\n}\n\nfunction MdcChip_mdc_chip_text_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mdc-chip-text\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.label);\n  }\n}\n\nfunction MdcChip_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 2);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = [[[\"mdc-chip-icon\", \"leading\", \"\"]], \"*\", [[\"mdc-chip-icon\", \"trailing\", \"\"]]];\nconst _c1 = [\"mdc-chip-icon[leading]\", \"*\", \"mdc-chip-icon[trailing]\"];\nconst _c2 = [\"*\"];\nlet MdcChipPrimaryAction = /*#__PURE__*/(() => {\n  class MdcChipPrimaryAction {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.role = 'button';\n      this.tabIndex = null;\n      this._root = this.elementRef.nativeElement;\n    }\n\n  }\n\n  MdcChipPrimaryAction.ɵfac = function MdcChipPrimaryAction_Factory(t) {\n    return new (t || MdcChipPrimaryAction)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcChipPrimaryAction.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdcChipPrimaryAction,\n    selectors: [[\"mdc-chip-primary-action\"], [\"\", \"mdcChipPrimaryAction\", \"\"]],\n    hostAttrs: [1, \"mdc-chip__action--primary\"],\n    hostVars: 2,\n    hostBindings: function MdcChipPrimaryAction_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx.tabIndex);\n      }\n    },\n    inputs: {\n      role: \"role\",\n      tabIndex: \"tabIndex\"\n    }\n  });\n  /** @nocollapse */\n\n  return MdcChipPrimaryAction;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcChipText = /*#__PURE__*/(() => {\n  class MdcChipText {}\n\n  MdcChipText.ɵfac = function MdcChipText_Factory(t) {\n    return new (t || MdcChipText)();\n  };\n\n  MdcChipText.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdcChipText,\n    selectors: [[\"mdc-chip-text\"], [\"\", \"mdcChipText\", \"\"]],\n    hostAttrs: [1, \"mdc-chip__text\"]\n  });\n  return MdcChipText;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: chips/chip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token used to provide the parent MdcChipSet component to MdcChip.\n * @type {?}\n */\n\n\nconst MDC_CHIPSET_PARENT_COMPONENT = new InjectionToken('MDC_CHIPSET_PARENT_COMPONENT');\n/** @type {?} */\n\nlet nextUniqueId = 0;\nlet MdcChipCheckmark = /*#__PURE__*/(() => {\n  class MdcChipCheckmark {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n\n  }\n\n  MdcChipCheckmark.ɵfac = function MdcChipCheckmark_Factory(t) {\n    return new (t || MdcChipCheckmark)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcChipCheckmark.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcChipCheckmark,\n    selectors: [[\"mdc-chip-checkmark\"]],\n    hostAttrs: [1, \"mdc-chip__checkmark\"],\n    exportAs: [\"mdcChipCheckmark\"],\n    decls: 2,\n    vars: 0,\n    consts: [[\"viewBox\", \"-2 -3 30 30\", \"focusable\", \"false\", 1, \"mdc-chip__checkmark-svg\"], [\"fill\", \"none\", \"stroke\", \"black\", \"d\", \"M1.73,12.91 8.1,19.28 22.79,4.59\", 1, \"mdc-chip__checkmark-path\"]],\n    template: function MdcChipCheckmark_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵelement(1, \"path\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcChipCheckmark;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcChip = /*#__PURE__*/(() => {\n  class MdcChip extends MDCComponent {\n    /**\n     * @param {?} _platform\n     * @param {?} _ngZone\n     * @param {?} _changeDetectorRef\n     * @param {?} _ripple\n     * @param {?} elementRef\n     * @param {?} _parent\n     */\n    constructor(_platform, _ngZone, _changeDetectorRef, _ripple, elementRef, _parent) {\n      super(elementRef);\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._ripple = _ripple;\n      this.elementRef = elementRef;\n      this._parent = _parent;\n      /**\n       * Emits whenever the component is destroyed.\n       */\n\n      this._destroyed = new Subject();\n      this._id = `mdc-chip-${nextUniqueId++}`;\n      this._filter = false;\n      this._choice = false;\n      this._input = false;\n      this._removable = true;\n      this._touch = false;\n      this._disableRipple = false;\n      /**\n       * Emitted when the chip is interacted with.\n       */\n\n      this.interactionEvent = new EventEmitter();\n      /**\n       * Emitted when the chip is selected or deselected.\n       */\n\n      this.selectionChange = new EventEmitter();\n      /**\n       * Emitted as chip navigation event.\n       */\n\n      this.navigationEvent = new EventEmitter();\n      /**\n       * Emitted when trailing icon is interacted with.\n       */\n\n      this.trailingIconInteraction = new EventEmitter();\n      /**\n       * Emitted when a chip is to be removed.\n       */\n\n      this.removalEvent = new EventEmitter();\n      this._root = this.elementRef.nativeElement;\n      this._ripple = this._createRipple();\n\n      this._ripple.init();\n    }\n    /**\n     * The unique ID of the chip.\n     * @return {?}\n     */\n\n\n    get id() {\n      return this._id;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get leadingIcon() {\n      return this._icons.find(\n      /**\n      * @param {?} _\n      * @return {?}\n      */\n      _ => _.leading);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get trailingIcon() {\n      return this._icons.find(\n      /**\n      * @param {?} _\n      * @return {?}\n      */\n      _ => _.trailing);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get filter() {\n      return this._filter;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set filter(value) {\n      /** @type {?} */\n      const newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._filter) {\n        this._filter = newValue;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get choice() {\n      return this._choice;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set choice(value) {\n      this._choice = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get input() {\n      return this._input;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set input(value) {\n      this._input = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n\n\n    get removable() {\n      return this._removable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set removable(value) {\n      /** @type {?} */\n      const newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._removable) {\n        this._removable = value;\n\n        this._foundation.setShouldRemoveOnTrailingIconClick(this._removable);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get touch() {\n      return this._touch;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set touch(value) {\n      this._touch = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the chip ripple is disabled.\n     * @return {?}\n     */\n\n\n    get disableRipple() {\n      return this._disableRipple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disableRipple(value) {\n      this._disableRipple = coerceBooleanProperty(value);\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mdc-chip>` tags.\n     * @return {?}\n     */\n\n\n    get value() {\n      var _a, _b;\n\n      return _b = (_a = this._value, _a !== null && _a !== void 0 ? _a : this._root.textContent), _b !== null && _b !== void 0 ? _b : undefined;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set value(value) {\n      this._value = value;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getDefaultFoundation() {\n      /** @type {?} */\n      const adapter = {\n        addClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._root.classList.add(className),\n        removeClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._root.classList.remove(className),\n        hasClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._root.classList.contains(className),\n        addClassToLeadingIcon:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => {\n          var _a, _b, _c, _d;\n\n          return (_d = (_c = (_b = (_a = this.leadingIcon) === null || _a === void 0 ? void 0 : _a.elementRef) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.classList) === null || _d === void 0 ? void 0 : _d.add(className);\n        },\n        removeClassFromLeadingIcon:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => {\n          var _a, _b, _c, _d;\n\n          return (_d = (_c = (_b = (_a = this.leadingIcon) === null || _a === void 0 ? void 0 : _a.elementRef) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.classList) === null || _d === void 0 ? void 0 : _d.remove(className);\n        },\n        eventTargetHasClass:\n        /**\n        * @param {?} target\n        * @param {?} className\n        * @return {?}\n        */\n        (target, className) => target &&\n        /** @type {?} */\n        target.classList ?\n        /** @type {?} */\n        target.classList.contains(className) : false,\n        focusPrimaryAction:\n        /**\n        * @return {?}\n        */\n        () => this._primaryAction._root.focus(),\n        focusTrailingAction:\n        /**\n        * @return {?}\n        */\n        () => {\n          var _a, _b, _c;\n\n          return (_c = (_b = (_a = this.trailingIcon) === null || _a === void 0 ? void 0 : _a.elementRef) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.focus();\n        },\n        notifyInteraction:\n        /**\n        * @return {?}\n        */\n        () => this.interactionEvent.emit({\n          chipId: this._id,\n          value: this._value\n        }),\n        notifySelection:\n        /**\n        * @param {?} selected\n        * @param {?} chipSetShouldIgnore\n        * @return {?}\n        */\n        (selected, chipSetShouldIgnore) => this.selectionChange.emit({\n          chipId: this._id,\n          selected: selected,\n          value: selected ? this._value : undefined,\n          shouldIgnore: chipSetShouldIgnore\n        }),\n        notifyNavigation:\n        /**\n        * @param {?} key\n        * @param {?} source\n        * @return {?}\n        */\n        (key, source) => this.navigationEvent.emit({\n          chipId: this.id,\n          value: this._value,\n          key: key,\n          source: source\n        }),\n        notifyTrailingIconInteraction:\n        /**\n        * @return {?}\n        */\n        () => this.trailingIconInteraction.emit({\n          chipId: this.id,\n          value: this._value\n        }),\n        notifyRemoval:\n        /**\n        * @return {?}\n        */\n        () => this.removalEvent.emit({\n          chipId: this.id,\n          value: this._value,\n          removedAnnouncement: null\n        }),\n        getComputedStyleValue:\n        /**\n        * @param {?} propertyName\n        * @return {?}\n        */\n        propertyName => this._platform.isBrowser ? window.getComputedStyle(this._root).getPropertyValue(propertyName) : '',\n        setStyleProperty:\n        /**\n        * @param {?} propertyName\n        * @param {?} value\n        * @return {?}\n        */\n        (propertyName, value) =>\n        /** @type {?} */\n        this._root.style.setProperty(propertyName, value),\n        setTrailingActionAttr:\n        /**\n        * @param {?} attr\n        * @param {?} value\n        * @return {?}\n        */\n        (attr, value) => {\n          var _a, _b, _c;\n\n          return (_c = (_b = (_a = this.trailingIcon) === null || _a === void 0 ? void 0 : _a.elementRef) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.setAttribute(attr, value);\n        },\n        hasLeadingIcon:\n        /**\n        * @return {?}\n        */\n        () => !!this.leadingIcon,\n        hasTrailingAction:\n        /**\n        * @return {?}\n        */\n        () => !!this.trailingIcon,\n        setPrimaryActionAttr:\n        /**\n        * @param {?} attr\n        * @param {?} value\n        * @return {?}\n        */\n        (attr, value) => this._primaryAction._root.setAttribute(attr, value),\n        getRootBoundingClientRect:\n        /**\n        * @return {?}\n        */\n        () => this._root.getBoundingClientRect(),\n        getCheckmarkBoundingClientRect:\n        /**\n        * @return {?}\n        */\n        () => {\n          var _a, _b, _c, _d;\n\n          return _d = (_c = (_b = (_a = this._checkmark) === null || _a === void 0 ? void 0 : _a.elementRef) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect(), _d !== null && _d !== void 0 ? _d : null;\n        },\n        isRTL:\n        /**\n        * @return {?}\n        */\n        () => typeof window !== 'undefined' ? window.getComputedStyle(this._root).getPropertyValue('direction') === 'rtl' : false,\n        getAttribute:\n        /**\n        * @param {?} attr\n        * @return {?}\n        */\n        attr => this._root.getAttribute(attr)\n      };\n      return new MDCChipFoundation(adapter);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      this._foundation.init();\n\n      this._setVariantFromChipSet();\n\n      this._loadListeners();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      var _a, _b;\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      (_a = this._ripple) === null || _a === void 0 ? void 0 : _a.destroy();\n      (_b = this._foundation) === null || _b === void 0 ? void 0 : _b.destroy();\n    }\n    /**\n     * @param {?} selected\n     * @param {?} shouldNotifyClients\n     * @return {?}\n     */\n\n\n    setSelectedFromChipSet(selected, shouldNotifyClients) {\n      this._foundation.setSelectedFromChipSet(selected, shouldNotifyClients);\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n\n\n    focus() {\n      this.focusPrimaryAction();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    focusPrimaryAction() {\n      this._foundation.focusPrimaryAction();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    focusTrailingAction() {\n      this._foundation.focusTrailingAction();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    removeFocus() {\n      this._foundation.removeFocus();\n    }\n    /**\n     * Allows for programmatic removal of the chip.\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n\n\n    remove() {\n      if (this.removable) {\n        this._foundation.beginExit();\n      }\n    }\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n\n\n    _handleInteraction(evt) {\n      this._foundation.handleInteraction(evt);\n    }\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n\n\n    _onKeydown(evt) {\n      this._foundation.handleInteraction(evt);\n\n      this._foundation.handleKeydown(evt);\n    }\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n\n\n    _handleTrailingIconInteraction(evt) {\n      this._foundation.handleTrailingIconInteraction(evt);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _createRipple() {\n      /** @type {?} */\n      const adapter = Object.assign(Object.assign({}, MdcRipple.createAdapter(this)), {\n        computeBoundingRect:\n        /**\n        * @return {?}\n        */\n        () => this._foundation.getDimensions(),\n        isSurfaceDisabled:\n        /**\n        * @return {?}\n        */\n        () => this._disableRipple\n      });\n      return new MdcRipple(this.elementRef, new MDCRippleFoundation(adapter));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _setVariantFromChipSet() {\n      if (this._parent) {\n        this.input = this._parent.input;\n        this.filter = this._parent.filter;\n        this.choice = this._parent.choice;\n\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _loadListeners() {\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => fromEvent(this._root, 'transitionend').pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @param {?} evt\n      * @return {?}\n      */\n      evt => this._ngZone.run(\n      /**\n      * @return {?}\n      */\n      () => this._foundation.handleTransitionEnd(evt))));\n    }\n\n  }\n\n  MdcChip.ɵfac = function MdcChip_Factory(t) {\n    return new (t || MdcChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MdcRipple), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MDC_CHIPSET_PARENT_COMPONENT, 8));\n  };\n\n  MdcChip.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcChip,\n    selectors: [[\"mdc-chip\"]],\n    contentQueries: function MdcChip_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcChipCheckmark, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcChipIcon, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._checkmark = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icons = _t);\n      }\n    },\n    viewQuery: function MdcChip_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MdcChipPrimaryAction, 7);\n        ɵngcc0.ɵɵviewQuery(MdcChipText, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._primaryAction = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._chipText = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"row\", 1, \"mdc-chip\"],\n    hostVars: 5,\n    hostBindings: function MdcChip_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MdcChip_click_HostBindingHandler($event) {\n          return ctx._handleInteraction($event);\n        })(\"keydown\", function MdcChip_keydown_HostBindingHandler($event) {\n          return ctx._onKeydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mdc-chip--selected\", ctx.selected)(\"mdc-chip--touch\", ctx.touch);\n      }\n    },\n    inputs: {\n      filter: \"filter\",\n      choice: \"choice\",\n      input: \"input\",\n      removable: \"removable\",\n      touch: \"touch\",\n      disableRipple: \"disableRipple\",\n      value: \"value\",\n      selected: \"selected\",\n      label: \"label\"\n    },\n    outputs: {\n      interactionEvent: \"interactionEvent\",\n      selectionChange: \"selectionChange\",\n      navigationEvent: \"navigationEvent\",\n      trailingIconInteraction: \"trailingIconInteraction\",\n      removalEvent: \"removalEvent\"\n    },\n    exportAs: [\"mdcChip\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MdcRipple]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 9,\n    vars: 4,\n    consts: [[1, \"mdc-chip__ripple\"], [4, \"ngIf\"], [\"role\", \"gridcell\"], [\"class\", \"mdc-chip__touch\", 4, \"ngIf\"], [\"role\", \"gridcell\", 4, \"ngIf\"], [1, \"mdc-chip__touch\"]],\n    template: function MdcChip_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, MdcChip_mdc_chip_checkmark_2_Template, 1, 0, \"mdc-chip-checkmark\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"span\", 2);\n        ɵngcc0.ɵɵelementStart(4, \"mdc-chip-primary-action\");\n        ɵngcc0.ɵɵtemplate(5, MdcChip_div_5_Template, 1, 0, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(6, MdcChip_mdc_chip_text_6_Template, 2, 1, \"mdc-chip-text\", 1);\n        ɵngcc0.ɵɵprojection(7, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MdcChip_span_8_Template, 2, 0, \"span\", 4);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.filter);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.touch);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.label);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !!ctx.trailingIcon);\n      }\n    },\n    directives: [ɵngcc3.NgIf, MdcChipCheckmark, MdcChipPrimaryAction, MdcChipText],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcChip;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcChipIcon = /*#__PURE__*/(() => {\n  class MdcChipIcon extends MdcIcon {\n    /**\n     * @param {?} _parentChip\n     * @param {?} elementRef\n     * @param {?} iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} location\n     */\n    constructor(_parentChip, elementRef, iconRegistry, ariaHidden, location) {\n      super(elementRef, iconRegistry, ariaHidden, location);\n      this._parentChip = _parentChip;\n      this._leading = false;\n      this._trailing = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get leading() {\n      return this._leading;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set leading(value) {\n      this._leading = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get trailing() {\n      return this._trailing;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set trailing(value) {\n      this._trailing = coerceBooleanProperty(value);\n    }\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n\n\n    _onIconInteraction(evt) {\n      if (this.trailing) {\n        this._parentChip._handleTrailingIconInteraction(evt);\n      }\n    }\n\n  }\n\n  MdcChipIcon.ɵfac = function MdcChipIcon_Factory(t) {\n    return new (t || MdcChipIcon)(ɵngcc0.ɵɵdirectiveInject(MdcChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.MdcIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MDC_ICON_LOCATION));\n  };\n\n  MdcChipIcon.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcChipIcon,\n    selectors: [[\"mdc-chip-icon\"], [\"\", \"mdcChipIcon\", \"\"]],\n    hostAttrs: [1, \"mdc-chip__icon\", \"ngx-mdc-icon\"],\n    hostVars: 8,\n    hostBindings: function MdcChipIcon_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MdcChipIcon_click_HostBindingHandler($event) {\n          return ctx._onIconInteraction($event);\n        })(\"keydown\", function MdcChipIcon_keydown_HostBindingHandler($event) {\n          return ctx._onIconInteraction($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.trailing ? \"button\" : \"img\")(\"tabindex\", ctx.trailing ? 1 : -1);\n        ɵngcc0.ɵɵclassProp(\"mdc-chip__icon--leading\", ctx.leading)(\"mdc-chip__icon--trailing\", ctx.trailing)(\"mdc-chip__trailing-action\", ctx.trailing);\n      }\n    },\n    inputs: {\n      leading: \"leading\",\n      trailing: \"trailing\"\n    },\n    exportAs: [\"mdcChipIcon\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c2,\n    decls: 1,\n    vars: 0,\n    template: function MdcChipIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcChipIcon;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: chips/chip-set.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass MdcChipSetChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n\nlet MdcChipSet = /*#__PURE__*/(() => {\n  class MdcChipSet extends MDCComponent {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} elementRef\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_changeDetectorRef, elementRef, _parentForm, _parentFormGroup, ngControl) {\n      super(elementRef);\n      this._changeDetectorRef = _changeDetectorRef;\n      this.elementRef = elementRef;\n      this.ngControl = ngControl;\n      /**\n       * Emits whenever the component is destroyed.\n       */\n\n      this._destroyed = new Subject();\n      this._choice = false;\n      this._filter = false;\n      this._input = false;\n      /**\n       * A function to compare the option values with the selected values. The first argument\n       * is a value from an option. The second is a value from the selection. A boolean\n       * should be returned.\n       */\n\n      this._compareWith =\n      /**\n      * @param {?} o1\n      * @param {?} o2\n      * @return {?}\n      */\n      (o1, o2) => o1 === o2;\n\n      this.change = new EventEmitter();\n      this.interaction = new EventEmitter();\n      /**\n       * Function when touched\n       */\n\n      this._onTouched =\n      /**\n      * @return {?}\n      */\n      () => {};\n      /**\n       * Function when changed\n       */\n\n\n      this._onChange =\n      /**\n      * @return {?}\n      */\n      () => {};\n      /**\n       * Subscription to selection events in chips.\n       */\n\n\n      this._chipSelectionSubscription = null;\n      /**\n       * Subscription to removal changes.\n       */\n\n      this._chipRemovalSubscription = null;\n      /**\n       * Subscription to interaction events in chips.\n       */\n\n      this._chipInteractionSubscription = null;\n      /**\n       * Subscription to navigation events.\n       */\n\n      this._navigationSubscription = null;\n\n      if (this.ngControl) {\n        this.ngControl.valueAccessor = this;\n      }\n    }\n    /**\n     * Indicates that the chips in the set are choice chips, which allow a single selection from a set of options.\n     * @return {?}\n     */\n\n\n    get choice() {\n      return this._choice;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set choice(value) {\n      this._choice = coerceBooleanProperty(value);\n    }\n    /**\n     * Indicates that the chips in the set are filter chips, which allow multiple selection from a set of options.\n     * @return {?}\n     */\n\n\n    get filter() {\n      return this._filter;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set filter(value) {\n      this._filter = coerceBooleanProperty(value);\n    }\n    /**\n     * Indicates that the chips in the set are input chips, which enable user input by converting text into chips.\n     * @return {?}\n     */\n\n\n    get input() {\n      return this._input;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set input(value) {\n      this._input = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get value() {\n      return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set value(value) {\n      this._value = value;\n      this.writeValue(value);\n    }\n    /**\n     * Combined stream of all of the chip selection events.\n     * @return {?}\n     */\n\n\n    get chipSelections() {\n      return merge(...this.chips.map(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      chip => chip.selectionChange));\n    }\n    /**\n     * Combined stream of all of the chip interaction events.\n     * @return {?}\n     */\n\n\n    get chipInteractions() {\n      return merge(...this.chips.map(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      chip => chip.interactionEvent));\n    }\n    /**\n     * Combined stream of all of the chip removal events.\n     * @return {?}\n     */\n\n\n    get chipRemovalChanges() {\n      return merge(...this.chips.map(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      chip => chip.removalEvent));\n    }\n    /**\n     * Combined stream of all of the chip navigation events.\n     * @return {?}\n     */\n\n\n    get chipNavigations() {\n      return merge(...this.chips.map(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      chip => chip.navigationEvent));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getDefaultFoundation() {\n      /** @type {?} */\n      const adapter = {\n        hasClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._getHostElement().classList.contains(className),\n        focusChipPrimaryActionAtIndex:\n        /**\n        * @param {?} index\n        * @return {?}\n        */\n        index => this.chips.toArray()[index].focusPrimaryAction(),\n        focusChipTrailingActionAtIndex:\n        /**\n        * @param {?} index\n        * @return {?}\n        */\n        index => this.chips.toArray()[index].focusTrailingAction(),\n        getChipListCount:\n        /**\n        * @return {?}\n        */\n        () => this.chips.length,\n        getIndexOfChipById:\n        /**\n        * @param {?} chipId\n        * @return {?}\n        */\n        chipId => this._findChipIndex(chipId),\n        removeChipAtIndex:\n        /**\n        * @param {?} index\n        * @return {?}\n        */\n        index => {\n          if (index >= 0 && index < this.chips.length) {\n            this.chips.toArray()[index].destroy();\n            this.chips.toArray()[index].remove();\n            this.chips.toArray().splice(index, 1);\n          }\n        },\n        removeFocusFromChipAtIndex:\n        /**\n        * @param {?} index\n        * @return {?}\n        */\n        index => this.chips.toArray()[index].removeFocus(),\n        selectChipAtIndex:\n        /**\n        * @param {?} index\n        * @param {?} selected\n        * @param {?} shouldNotifyClients\n        * @return {?}\n        */\n        (index, selected, shouldNotifyClients) => {\n          if (index >= 0 && index < this.chips.length) {\n            this.chips.toArray()[index].setSelectedFromChipSet(selected, shouldNotifyClients);\n          }\n        },\n        announceMessage:\n        /**\n        * @return {?}\n        */\n        () => {},\n        isRTL:\n        /**\n        * @return {?}\n        */\n        () => typeof window !== 'undefined' ? window.getComputedStyle(this._getHostElement()).getPropertyValue('direction') === 'rtl' : false\n      };\n      return new MDCChipSetFoundation(adapter);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      // When chips change, re-subscribe\n      this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      () => {\n        this._resetChipSet();\n\n        if (this.chips.length >= 0) {\n          this._initializeSelection();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      var _a, _b;\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._dropSubscriptions();\n\n      (_a = this._chipRemovalSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      (_b = this._foundation) === null || _b === void 0 ? void 0 : _b.destroy();\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    writeValue(value) {\n      this.selectByValue(value, true);\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getSelectedChipIds() {\n      return this._foundation.getSelectedChipIds();\n    }\n    /**\n     * @param {?} chipId\n     * @return {?}\n     */\n\n\n    select(chipId) {\n      this._foundation.select(chipId);\n    }\n    /**\n     * @param {?} value\n     * @param {?=} shouldIgnore\n     * @return {?}\n     */\n\n\n    selectByValue(value, shouldIgnore = true) {\n      if (!this.chips) {\n        return;\n      }\n\n      if (Array.isArray(value)) {\n        value.forEach(\n        /**\n        * @param {?} currentValue\n        * @return {?}\n        */\n        currentValue => this._selectValue(currentValue, shouldIgnore));\n      } else {\n        this._selectValue(value, shouldIgnore);\n      }\n\n      this._value = value;\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} shouldIgnore\n     * @return {?} Chip that has the corresponding value.\n     */\n\n\n    _selectValue(value, shouldIgnore = true) {\n      /** @type {?} */\n      const correspondingChip = this.chips.find(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      chip => chip.value != null && this._compareWith(chip.value, value));\n\n      if (correspondingChip) {\n        if (this.choice) {\n          this.select(correspondingChip.id);\n        } else {\n          correspondingChip.setSelectedFromChipSet(true, shouldIgnore);\n        }\n      }\n\n      return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _initializeSelection() {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(\n      /**\n      * @return {?}\n      */\n      () => {\n        var _a, _b;\n\n        if (this.ngControl || this._value) {\n          this.selectByValue((_b = (_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.value, _b !== null && _b !== void 0 ? _b : this._value), false);\n        }\n      });\n    }\n    /**\n     * @private\n     * @param {?} evt\n     * @return {?}\n     */\n\n\n    _propagateChanges(evt) {\n      this._value = evt.value;\n      this.change.emit(new MdcChipSetChange(this, evt));\n\n      this._onChange(this._value);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @private\n     * @param {?} chipId\n     * @return {?}\n     */\n\n\n    _findChipIndex(chipId) {\n      return this.chips.toArray().findIndex(\n      /**\n      * @param {?} _\n      * @return {?}\n      */\n      _ => _.id === chipId);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _resetChipSet() {\n      this._dropSubscriptions();\n\n      this._listenToChipEvents();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _dropSubscriptions() {\n      var _a, _b, _c, _d;\n\n      (_a = this._chipSelectionSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      (_b = this._chipInteractionSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();\n      (_c = this._chipRemovalSubscription) === null || _c === void 0 ? void 0 : _c.unsubscribe();\n      (_d = this._navigationSubscription) === null || _d === void 0 ? void 0 : _d.unsubscribe();\n    }\n    /**\n     * Listens to selected events on each chip.\n     * @private\n     * @return {?}\n     */\n\n\n    _listenToChipEvents() {\n      this._chipSelectionSubscription = this.chipSelections.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        this._foundation.handleChipSelection(event);\n\n        this._propagateChanges(event);\n      });\n      this._chipInteractionSubscription = this.chipInteractions.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        this._foundation.handleChipInteraction(event);\n\n        this.interaction.emit(event);\n      });\n      this._chipRemovalSubscription = this.chipRemovalChanges.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => this._foundation.handleChipRemoval(event));\n      this._navigationSubscription = this.chipNavigations.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => this._foundation.handleChipNavigation(event));\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @private\n     * @return {?}\n     */\n\n\n    _getHostElement() {\n      return this.elementRef.nativeElement;\n    }\n\n  }\n\n  MdcChipSet.ɵfac = function MdcChipSet_Factory(t) {\n    return new (t || MdcChipSet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.NgControl, 8));\n  };\n\n  MdcChipSet.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcChipSet,\n    selectors: [[\"mdc-chip-set\"]],\n    contentQueries: function MdcChipSet_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcChip, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"grid\", 1, \"mdc-chip-set\"],\n    hostVars: 6,\n    hostBindings: function MdcChipSet_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mdc-chip-set--choice\", ctx.choice)(\"mdc-chip-set--filter\", ctx.filter)(\"mdc-chip-set--input\", ctx.input);\n      }\n    },\n    inputs: {\n      choice: \"choice\",\n      filter: \"filter\",\n      input: \"input\",\n      value: \"value\"\n    },\n    outputs: {\n      change: \"change\",\n      interaction: \"interaction\"\n    },\n    exportAs: [\"mdcChipSet\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: MDC_CHIPSET_PARENT_COMPONENT,\n      useExisting: MdcChipSet\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c2,\n    decls: 1,\n    vars: 0,\n    template: function MdcChipSet_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcChipSet;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: chips/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst CHIP_DECLARATIONS = [MdcChip, MdcChipCheckmark, MdcChipIcon, MdcChipPrimaryAction, MdcChipSet, MdcChipText];\nlet MdcChipsModule = /*#__PURE__*/(() => {\n  class MdcChipsModule {}\n\n  MdcChipsModule.ɵfac = function MdcChipsModule_Factory(t) {\n    return new (t || MdcChipsModule)();\n  };\n\n  MdcChipsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdcChipsModule\n  });\n  MdcChipsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MdcIconModule]]\n  });\n  return MdcChipsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdcChipsModule, {\n    declarations: function () {\n      return [MdcChip, MdcChipCheckmark, MdcChipIcon, MdcChipPrimaryAction, MdcChipSet, MdcChipText];\n    },\n    imports: function () {\n      return [CommonModule, MdcIconModule];\n    },\n    exports: function () {\n      return [MdcChip, MdcChipCheckmark, MdcChipIcon, MdcChipPrimaryAction, MdcChipSet, MdcChipText];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: chips/constants.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {number} */\n\n\nconst EventSource = {\n  PRIMARY: 0,\n  TRAILING: 1,\n  NONE: 2\n};\nEventSource[EventSource.PRIMARY] = 'PRIMARY';\nEventSource[EventSource.TRAILING] = 'TRAILING';\nEventSource[EventSource.NONE] = 'NONE';\nexport { CHIP_DECLARATIONS, EventSource, MDC_CHIPSET_PARENT_COMPONENT, MdcChip, MdcChipCheckmark, MdcChipIcon, MdcChipPrimaryAction, MdcChipSet, MdcChipSetChange, MdcChipText, MdcChipsModule }; //# sourceMappingURL=chips.js.map","map":null,"metadata":{},"sourceType":"module"}