{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest, matches } from '@material/dom/ponyfill';\nimport { cssClasses, strings } from './constants';\nimport { MDCListFoundation } from './foundation';\n\nvar MDCList =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCList, _super);\n\n  function MDCList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MDCList.prototype, \"vertical\", {\n    set: function (value) {\n      this.foundation_.setVerticalOrientation(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"listElements\", {\n    get: function () {\n      return [].slice.call(this.root_.querySelectorAll(\".\" + cssClasses.LIST_ITEM_CLASS));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"wrapFocus\", {\n    set: function (value) {\n      this.foundation_.setWrapFocus(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"singleSelection\", {\n    set: function (isSingleSelectionList) {\n      this.foundation_.setSingleSelection(isSingleSelectionList);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"selectedIndex\", {\n    get: function () {\n      return this.foundation_.getSelectedIndex();\n    },\n    set: function (index) {\n      this.foundation_.setSelectedIndex(index);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCList.attachTo = function (root) {\n    return new MDCList(root);\n  };\n\n  MDCList.prototype.initialSyncWithDOM = function () {\n    this.handleClick_ = this.handleClickEvent_.bind(this);\n    this.handleKeydown_ = this.handleKeydownEvent_.bind(this);\n    this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);\n    this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);\n    this.listen('keydown', this.handleKeydown_);\n    this.listen('click', this.handleClick_);\n    this.listen('focusin', this.focusInEventListener_);\n    this.listen('focusout', this.focusOutEventListener_);\n    this.layout();\n    this.initializeListType();\n  };\n\n  MDCList.prototype.destroy = function () {\n    this.unlisten('keydown', this.handleKeydown_);\n    this.unlisten('click', this.handleClick_);\n    this.unlisten('focusin', this.focusInEventListener_);\n    this.unlisten('focusout', this.focusOutEventListener_);\n  };\n\n  MDCList.prototype.layout = function () {\n    var direction = this.root_.getAttribute(strings.ARIA_ORIENTATION);\n    this.vertical = direction !== strings.ARIA_ORIENTATION_HORIZONTAL; // List items need to have at least tabindex=-1 to be focusable.\n\n    [].slice.call(this.root_.querySelectorAll('.mdc-list-item:not([tabindex])')).forEach(function (el) {\n      el.setAttribute('tabindex', '-1');\n    }); // Child button/a elements are not tabbable until the list item is focused.\n\n    [].slice.call(this.root_.querySelectorAll(strings.FOCUSABLE_CHILD_ELEMENTS)).forEach(function (el) {\n      return el.setAttribute('tabindex', '-1');\n    });\n    this.foundation_.layout();\n  };\n  /**\n   * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.\n   */\n\n\n  MDCList.prototype.initializeListType = function () {\n    var _this = this;\n\n    var checkboxListItems = this.root_.querySelectorAll(strings.ARIA_ROLE_CHECKBOX_SELECTOR);\n    var singleSelectedListItem = this.root_.querySelector(\"\\n      .\" + cssClasses.LIST_ITEM_ACTIVATED_CLASS + \",\\n      .\" + cssClasses.LIST_ITEM_SELECTED_CLASS + \"\\n    \");\n    var radioSelectedListItem = this.root_.querySelector(strings.ARIA_CHECKED_RADIO_SELECTOR);\n\n    if (checkboxListItems.length) {\n      var preselectedItems = this.root_.querySelectorAll(strings.ARIA_CHECKED_CHECKBOX_SELECTOR);\n      this.selectedIndex = [].map.call(preselectedItems, function (listItem) {\n        return _this.listElements.indexOf(listItem);\n      });\n    } else if (singleSelectedListItem) {\n      if (singleSelectedListItem.classList.contains(cssClasses.LIST_ITEM_ACTIVATED_CLASS)) {\n        this.foundation_.setUseActivatedClass(true);\n      }\n\n      this.singleSelection = true;\n      this.selectedIndex = this.listElements.indexOf(singleSelectedListItem);\n    } else if (radioSelectedListItem) {\n      this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);\n    }\n  };\n  /**\n   * Updates the list item at itemIndex to the desired isEnabled state.\n   * @param itemIndex Index of the list item\n   * @param isEnabled Sets the list item to enabled or disabled.\n   */\n\n\n  MDCList.prototype.setEnabled = function (itemIndex, isEnabled) {\n    this.foundation_.setEnabled(itemIndex, isEnabled);\n  };\n\n  MDCList.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClassForElementIndex: function (index, className) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.classList.add(className);\n        }\n      },\n      focusItemAtIndex: function (index) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.focus();\n        }\n      },\n      getAttributeForElementIndex: function (index, attr) {\n        return _this.listElements[index].getAttribute(attr);\n      },\n      getFocusedElementIndex: function () {\n        return _this.listElements.indexOf(document.activeElement);\n      },\n      getListItemCount: function () {\n        return _this.listElements.length;\n      },\n      hasCheckboxAtIndex: function (index) {\n        var listItem = _this.listElements[index];\n        return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);\n      },\n      hasRadioAtIndex: function (index) {\n        var listItem = _this.listElements[index];\n        return !!listItem.querySelector(strings.RADIO_SELECTOR);\n      },\n      isCheckboxCheckedAtIndex: function (index) {\n        var listItem = _this.listElements[index];\n        var toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);\n        return toggleEl.checked;\n      },\n      isFocusInsideList: function () {\n        return _this.root_.contains(document.activeElement);\n      },\n      isRootFocused: function () {\n        return document.activeElement === _this.root_;\n      },\n      listItemAtIndexHasClass: function (index, className) {\n        return _this.listElements[index].classList.contains(className);\n      },\n      notifyAction: function (index) {\n        _this.emit(strings.ACTION_EVENT, {\n          index: index\n        },\n        /** shouldBubble */\n        true);\n      },\n      removeClassForElementIndex: function (index, className) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.classList.remove(className);\n        }\n      },\n      setAttributeForElementIndex: function (index, attr, value) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.setAttribute(attr, value);\n        }\n      },\n      setCheckedCheckboxOrRadioAtIndex: function (index, isChecked) {\n        var listItem = _this.listElements[index];\n        var toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);\n        toggleEl.checked = isChecked;\n        var event = document.createEvent('Event');\n        event.initEvent('change', true, true);\n        toggleEl.dispatchEvent(event);\n      },\n      setTabIndexForListItemChildren: function (listItemIndex, tabIndexValue) {\n        var element = _this.listElements[listItemIndex];\n        var listItemChildren = [].slice.call(element.querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));\n        listItemChildren.forEach(function (el) {\n          return el.setAttribute('tabindex', tabIndexValue);\n        });\n      }\n    };\n    return new MDCListFoundation(adapter);\n  };\n  /**\n   * Used to figure out which list item this event is targetting. Or returns -1 if\n   * there is no list item\n   */\n\n\n  MDCList.prototype.getListItemIndex_ = function (evt) {\n    var eventTarget = evt.target;\n    var nearestParent = closest(eventTarget, \".\" + cssClasses.LIST_ITEM_CLASS + \", .\" + cssClasses.ROOT); // Get the index of the element if it is a list item.\n\n    if (nearestParent && matches(nearestParent, \".\" + cssClasses.LIST_ITEM_CLASS)) {\n      return this.listElements.indexOf(nearestParent);\n    }\n\n    return -1;\n  };\n  /**\n   * Used to figure out which element was clicked before sending the event to the foundation.\n   */\n\n\n  MDCList.prototype.handleFocusInEvent_ = function (evt) {\n    var index = this.getListItemIndex_(evt);\n    this.foundation_.handleFocusIn(evt, index);\n  };\n  /**\n   * Used to figure out which element was clicked before sending the event to the foundation.\n   */\n\n\n  MDCList.prototype.handleFocusOutEvent_ = function (evt) {\n    var index = this.getListItemIndex_(evt);\n    this.foundation_.handleFocusOut(evt, index);\n  };\n  /**\n   * Used to figure out which element was focused when keydown event occurred before sending the event to the\n   * foundation.\n   */\n\n\n  MDCList.prototype.handleKeydownEvent_ = function (evt) {\n    var index = this.getListItemIndex_(evt);\n    var target = evt.target;\n    this.foundation_.handleKeydown(evt, target.classList.contains(cssClasses.LIST_ITEM_CLASS), index);\n  };\n  /**\n   * Used to figure out which element was clicked before sending the event to the foundation.\n   */\n\n\n  MDCList.prototype.handleClickEvent_ = function (evt) {\n    var index = this.getListItemIndex_(evt);\n    var target = evt.target; // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.\n\n    var toggleCheckbox = !matches(target, strings.CHECKBOX_RADIO_SELECTOR);\n    this.foundation_.handleClick(index, toggleCheckbox);\n  };\n\n  return MDCList;\n}(MDCComponent);\n\nexport { MDCList }; //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}