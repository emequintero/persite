{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCIconButtonToggleFoundation } from './foundation';\nvar strings = MDCIconButtonToggleFoundation.strings;\n\nvar MDCIconButtonToggle =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCIconButtonToggle, _super);\n\n  function MDCIconButtonToggle() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.ripple_ = _this.createRipple_();\n    return _this;\n  }\n\n  MDCIconButtonToggle.attachTo = function (root) {\n    return new MDCIconButtonToggle(root);\n  };\n\n  MDCIconButtonToggle.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.handleClick_ = function () {\n      return _this.foundation_.handleClick();\n    };\n\n    this.listen('click', this.handleClick_);\n  };\n\n  MDCIconButtonToggle.prototype.destroy = function () {\n    this.unlisten('click', this.handleClick_);\n    this.ripple_.destroy();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  MDCIconButtonToggle.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      hasClass: function (className) {\n        return _this.root_.classList.contains(className);\n      },\n      notifyChange: function (evtData) {\n        return _this.emit(strings.CHANGE_EVENT, evtData);\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      setAttr: function (attrName, attrValue) {\n        return _this.root_.setAttribute(attrName, attrValue);\n      }\n    };\n    return new MDCIconButtonToggleFoundation(adapter);\n  };\n\n  Object.defineProperty(MDCIconButtonToggle.prototype, \"ripple\", {\n    get: function () {\n      return this.ripple_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCIconButtonToggle.prototype, \"on\", {\n    get: function () {\n      return this.foundation_.isOn();\n    },\n    set: function (isOn) {\n      this.foundation_.toggle(isOn);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCIconButtonToggle.prototype.createRipple_ = function () {\n    var ripple = new MDCRipple(this.root_);\n    ripple.unbounded = true;\n    return ripple;\n  };\n\n  return MDCIconButtonToggle;\n}(MDCComponent);\n\nexport { MDCIconButtonToggle }; //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}