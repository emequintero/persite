{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { strings } from './constants';\nimport { MDCSliderFoundation } from './foundation';\n\nvar MDCSlider =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCSlider, _super);\n\n  function MDCSlider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCSlider.attachTo = function (root) {\n    return new MDCSlider(root);\n  };\n\n  Object.defineProperty(MDCSlider.prototype, \"value\", {\n    get: function () {\n      return this.foundation_.getValue();\n    },\n    set: function (value) {\n      this.foundation_.setValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSlider.prototype, \"min\", {\n    get: function () {\n      return this.foundation_.getMin();\n    },\n    set: function (min) {\n      this.foundation_.setMin(min);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSlider.prototype, \"max\", {\n    get: function () {\n      return this.foundation_.getMax();\n    },\n    set: function (max) {\n      this.foundation_.setMax(max);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSlider.prototype, \"step\", {\n    get: function () {\n      return this.foundation_.getStep();\n    },\n    set: function (step) {\n      this.foundation_.setStep(step);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSlider.prototype, \"disabled\", {\n    get: function () {\n      return this.foundation_.isDisabled();\n    },\n    set: function (disabled) {\n      this.foundation_.setDisabled(disabled);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCSlider.prototype.initialize = function () {\n    this.thumbContainer_ = this.root_.querySelector(strings.THUMB_CONTAINER_SELECTOR);\n    this.track_ = this.root_.querySelector(strings.TRACK_SELECTOR);\n    this.pinValueMarker_ = this.root_.querySelector(strings.PIN_VALUE_MARKER_SELECTOR);\n    this.trackMarkerContainer_ = this.root_.querySelector(strings.TRACK_MARKER_CONTAINER_SELECTOR);\n  };\n\n  MDCSlider.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take\n    // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any\n    // methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same\n    // order as the adapter interface.\n\n\n    var adapter = {\n      hasClass: function (className) {\n        return _this.root_.classList.contains(className);\n      },\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      getAttribute: function (name) {\n        return _this.root_.getAttribute(name);\n      },\n      setAttribute: function (name, value) {\n        return _this.root_.setAttribute(name, value);\n      },\n      removeAttribute: function (name) {\n        return _this.root_.removeAttribute(name);\n      },\n      computeBoundingRect: function () {\n        return _this.root_.getBoundingClientRect();\n      },\n      getTabIndex: function () {\n        return _this.root_.tabIndex;\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        return _this.listen(evtType, handler, applyPassive());\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        return _this.unlisten(evtType, handler, applyPassive());\n      },\n      registerThumbContainerInteractionHandler: function (evtType, handler) {\n        _this.thumbContainer_.addEventListener(evtType, handler, applyPassive());\n      },\n      deregisterThumbContainerInteractionHandler: function (evtType, handler) {\n        _this.thumbContainer_.removeEventListener(evtType, handler, applyPassive());\n      },\n      registerBodyInteractionHandler: function (evtType, handler) {\n        return document.body.addEventListener(evtType, handler);\n      },\n      deregisterBodyInteractionHandler: function (evtType, handler) {\n        return document.body.removeEventListener(evtType, handler);\n      },\n      registerResizeHandler: function (handler) {\n        return window.addEventListener('resize', handler);\n      },\n      deregisterResizeHandler: function (handler) {\n        return window.removeEventListener('resize', handler);\n      },\n      notifyInput: function () {\n        return _this.emit(strings.INPUT_EVENT, _this);\n      },\n      notifyChange: function () {\n        return _this.emit(strings.CHANGE_EVENT, _this);\n      },\n      setThumbContainerStyleProperty: function (propertyName, value) {\n        _this.thumbContainer_.style.setProperty(propertyName, value);\n      },\n      setTrackStyleProperty: function (propertyName, value) {\n        return _this.track_.style.setProperty(propertyName, value);\n      },\n      setMarkerValue: function (value) {\n        return _this.pinValueMarker_.innerText = value.toLocaleString();\n      },\n      setTrackMarkers: function (step, max, min) {\n        var stepStr = step.toLocaleString();\n        var maxStr = max.toLocaleString();\n        var minStr = min.toLocaleString(); // keep calculation in css for better rounding/subpixel behavior\n\n        var markerAmount = \"((\" + maxStr + \" - \" + minStr + \") / \" + stepStr + \")\";\n        var markerWidth = \"2px\";\n        var markerBkgdImage = \"linear-gradient(to right, currentColor \" + markerWidth + \", transparent 0)\";\n        var markerBkgdLayout = \"0 center / calc((100% - \" + markerWidth + \") / \" + markerAmount + \") 100% repeat-x\";\n        var markerBkgdShorthand = markerBkgdImage + \" \" + markerBkgdLayout;\n\n        _this.trackMarkerContainer_.style.setProperty('background', markerBkgdShorthand);\n      },\n      isRTL: function () {\n        return getComputedStyle(_this.root_).direction === 'rtl';\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    return new MDCSliderFoundation(adapter);\n  };\n\n  MDCSlider.prototype.initialSyncWithDOM = function () {\n    var origValueNow = this.parseFloat_(this.root_.getAttribute(strings.ARIA_VALUENOW), this.value);\n    var min = this.parseFloat_(this.root_.getAttribute(strings.ARIA_VALUEMIN), this.min);\n    var max = this.parseFloat_(this.root_.getAttribute(strings.ARIA_VALUEMAX), this.max); // min and max need to be set in the right order to avoid throwing an error\n    // when the new min is greater than the default max.\n\n    if (min >= this.max) {\n      this.max = max;\n      this.min = min;\n    } else {\n      this.min = min;\n      this.max = max;\n    }\n\n    this.step = this.parseFloat_(this.root_.getAttribute(strings.STEP_DATA_ATTR), this.step);\n    this.value = origValueNow;\n    this.disabled = this.root_.hasAttribute(strings.ARIA_DISABLED) && this.root_.getAttribute(strings.ARIA_DISABLED) !== 'false';\n    this.foundation_.setupTrackMarker();\n  };\n\n  MDCSlider.prototype.layout = function () {\n    this.foundation_.layout();\n  };\n\n  MDCSlider.prototype.stepUp = function (amount) {\n    if (amount === void 0) {\n      amount = this.step || 1;\n    }\n\n    this.value += amount;\n  };\n\n  MDCSlider.prototype.stepDown = function (amount) {\n    if (amount === void 0) {\n      amount = this.step || 1;\n    }\n\n    this.value -= amount;\n  };\n\n  MDCSlider.prototype.parseFloat_ = function (str, defaultValue) {\n    var num = parseFloat(str); // tslint:disable-line:ban\n\n    var isNumeric = typeof num === 'number' && isFinite(num);\n    return isNumeric ? num : defaultValue;\n  };\n\n  return MDCSlider;\n}(MDCComponent);\n\nexport { MDCSlider }; //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}