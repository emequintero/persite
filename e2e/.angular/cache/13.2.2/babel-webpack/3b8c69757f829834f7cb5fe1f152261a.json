{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { Direction, EventSource, jumpChipKeys, navigationKeys, strings as chipStrings } from '../chip/constants';\nimport { cssClasses, strings } from './constants';\n\nvar MDCChipSetFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCChipSetFoundation, _super);\n\n  function MDCChipSetFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCChipSetFoundation.defaultAdapter, adapter)) || this;\n    /**\n     * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.\n     */\n\n\n    _this.selectedChipIds_ = [];\n    return _this;\n  }\n\n  Object.defineProperty(MDCChipSetFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipSetFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipSetFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        announceMessage: function () {\n          return undefined;\n        },\n        focusChipPrimaryActionAtIndex: function () {\n          return undefined;\n        },\n        focusChipTrailingActionAtIndex: function () {\n          return undefined;\n        },\n        getChipListCount: function () {\n          return -1;\n        },\n        getIndexOfChipById: function () {\n          return -1;\n        },\n        hasClass: function () {\n          return false;\n        },\n        isRTL: function () {\n          return false;\n        },\n        removeChipAtIndex: function () {\n          return undefined;\n        },\n        removeFocusFromChipAtIndex: function () {\n          return undefined;\n        },\n        selectChipAtIndex: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns an array of the IDs of all selected chips.\n   */\n\n  MDCChipSetFoundation.prototype.getSelectedChipIds = function () {\n    return this.selectedChipIds_.slice();\n  };\n  /**\n   * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.\n   * Does not notify clients of the updated selection state.\n   */\n\n\n  MDCChipSetFoundation.prototype.select = function (chipId) {\n    this.select_(chipId, false);\n  };\n  /**\n   * Handles a chip interaction event\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipInteraction = function (_a) {\n    var chipId = _a.chipId;\n    var index = this.adapter_.getIndexOfChipById(chipId);\n    this.removeFocusFromChipsExcept_(index);\n\n    if (this.adapter_.hasClass(cssClasses.CHOICE) || this.adapter_.hasClass(cssClasses.FILTER)) {\n      this.toggleSelect_(chipId);\n    }\n  };\n  /**\n   * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipSelection = function (_a) {\n    var chipId = _a.chipId,\n        selected = _a.selected,\n        shouldIgnore = _a.shouldIgnore; // Early exit if we should ignore the event\n\n    if (shouldIgnore) {\n      return;\n    }\n\n    var chipIsSelected = this.selectedChipIds_.indexOf(chipId) >= 0;\n\n    if (selected && !chipIsSelected) {\n      this.select(chipId);\n    } else if (!selected && chipIsSelected) {\n      this.deselect_(chipId);\n    }\n  };\n  /**\n   * Handles the event when a chip is removed.\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipRemoval = function (_a) {\n    var chipId = _a.chipId,\n        removedAnnouncement = _a.removedAnnouncement;\n\n    if (removedAnnouncement) {\n      this.adapter_.announceMessage(removedAnnouncement);\n    }\n\n    var index = this.adapter_.getIndexOfChipById(chipId);\n    this.deselectAndNotifyClients_(chipId);\n    this.adapter_.removeChipAtIndex(index);\n    var maxIndex = this.adapter_.getChipListCount() - 1;\n    var nextIndex = Math.min(index, maxIndex);\n    this.removeFocusFromChipsExcept_(nextIndex); // After removing a chip, we should focus the trailing action for the next chip.\n\n    this.adapter_.focusChipTrailingActionAtIndex(nextIndex);\n  };\n  /**\n   * Handles a chip navigation event.\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipNavigation = function (_a) {\n    var chipId = _a.chipId,\n        key = _a.key,\n        source = _a.source;\n    var maxIndex = this.adapter_.getChipListCount() - 1;\n    var index = this.adapter_.getIndexOfChipById(chipId); // Early exit if the index is out of range or the key is unusable\n\n    if (index === -1 || !navigationKeys.has(key)) {\n      return;\n    }\n\n    var isRTL = this.adapter_.isRTL();\n    var shouldIncrement = key === chipStrings.ARROW_RIGHT_KEY && !isRTL || key === chipStrings.ARROW_LEFT_KEY && isRTL || key === chipStrings.ARROW_DOWN_KEY;\n    var isHome = key === chipStrings.HOME_KEY;\n    var isEnd = key === chipStrings.END_KEY;\n\n    if (shouldIncrement) {\n      index++;\n    } else if (isHome) {\n      index = 0;\n    } else if (isEnd) {\n      index = maxIndex;\n    } else {\n      index--;\n    } // Early exit if the index is out of bounds\n\n\n    if (index < 0 || index > maxIndex) {\n      return;\n    }\n\n    this.removeFocusFromChipsExcept_(index);\n    this.focusChipAction_(index, key, source);\n  };\n\n  MDCChipSetFoundation.prototype.focusChipAction_ = function (index, key, source) {\n    var shouldJumpChips = jumpChipKeys.has(key);\n\n    if (shouldJumpChips && source === EventSource.PRIMARY) {\n      return this.adapter_.focusChipPrimaryActionAtIndex(index);\n    }\n\n    if (shouldJumpChips && source === EventSource.TRAILING) {\n      return this.adapter_.focusChipTrailingActionAtIndex(index);\n    }\n\n    var dir = this.getDirection_(key);\n\n    if (dir === Direction.LEFT) {\n      return this.adapter_.focusChipTrailingActionAtIndex(index);\n    }\n\n    if (dir === Direction.RIGHT) {\n      return this.adapter_.focusChipPrimaryActionAtIndex(index);\n    }\n  };\n\n  MDCChipSetFoundation.prototype.getDirection_ = function (key) {\n    var isRTL = this.adapter_.isRTL();\n\n    if (key === chipStrings.ARROW_LEFT_KEY && !isRTL || key === chipStrings.ARROW_RIGHT_KEY && isRTL) {\n      return Direction.LEFT;\n    }\n\n    return Direction.RIGHT;\n  };\n  /**\n   * Deselects the chip with the given id and optionally notifies clients.\n   */\n\n\n  MDCChipSetFoundation.prototype.deselect_ = function (chipId, shouldNotifyClients) {\n    if (shouldNotifyClients === void 0) {\n      shouldNotifyClients = false;\n    }\n\n    var index = this.selectedChipIds_.indexOf(chipId);\n\n    if (index >= 0) {\n      this.selectedChipIds_.splice(index, 1);\n      var chipIndex = this.adapter_.getIndexOfChipById(chipId);\n      this.adapter_.selectChipAtIndex(chipIndex,\n      /** isSelected */\n      false, shouldNotifyClients);\n    }\n  };\n  /**\n   * Deselects the chip with the given id and notifies clients.\n   */\n\n\n  MDCChipSetFoundation.prototype.deselectAndNotifyClients_ = function (chipId) {\n    this.deselect_(chipId, true);\n  };\n  /**\n   * Toggles selection of the chip with the given id.\n   */\n\n\n  MDCChipSetFoundation.prototype.toggleSelect_ = function (chipId) {\n    if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n      this.deselectAndNotifyClients_(chipId);\n    } else {\n      this.selectAndNotifyClients_(chipId);\n    }\n  };\n\n  MDCChipSetFoundation.prototype.removeFocusFromChipsExcept_ = function (index) {\n    var chipCount = this.adapter_.getChipListCount();\n\n    for (var i = 0; i < chipCount; i++) {\n      if (i !== index) {\n        this.adapter_.removeFocusFromChipAtIndex(i);\n      }\n    }\n  };\n\n  MDCChipSetFoundation.prototype.selectAndNotifyClients_ = function (chipId) {\n    this.select_(chipId, true);\n  };\n\n  MDCChipSetFoundation.prototype.select_ = function (chipId, shouldNotifyClients) {\n    if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n      return;\n    }\n\n    if (this.adapter_.hasClass(cssClasses.CHOICE) && this.selectedChipIds_.length > 0) {\n      var previouslySelectedChip = this.selectedChipIds_[0];\n      var previouslySelectedIndex = this.adapter_.getIndexOfChipById(previouslySelectedChip);\n      this.selectedChipIds_ = [];\n      this.adapter_.selectChipAtIndex(previouslySelectedIndex,\n      /** isSelected */\n      false, shouldNotifyClients);\n    }\n\n    this.selectedChipIds_.push(chipId);\n    var index = this.adapter_.getIndexOfChipById(chipId);\n    this.adapter_.selectChipAtIndex(index,\n    /** isSelected */\n    true, shouldNotifyClients);\n  };\n\n  return MDCChipSetFoundation;\n}(MDCFoundation);\n\nexport { MDCChipSetFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCChipSetFoundation; //# sourceMappingURL=foundation.js.map","map":null,"metadata":{},"sourceType":"module"}