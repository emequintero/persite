{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Optional, Inject, Input, Output, ViewChild, forwardRef, ContentChildren, NgModule } from '@angular/core';\nimport { MdcFormFieldControl, MdcFormField, MdcFormFieldModule } from '@angular-mdc/web/form-field';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { supportsPassiveEventListeners } from '@angular/cdk/platform';\nimport { MDCRippleFoundation } from '@material/ripple';\nimport { MDCRadioFoundation } from '@material/radio';\nimport { MdcRipple } from '@angular-mdc/web/ripple';\nimport { MDCComponent } from '@angular-mdc/web/base';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n/**\n * @fileoverview added by tsickle\n * Generated from: radio/radio.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token used to provide the parent MdcRadioGroup component to MdcRadio.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular-mdc/web/ripple';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular-mdc/web/form-field';\nconst _c0 = [\"input\"];\nconst _c1 = [\"*\"];\nconst MDC_RADIO_GROUP_PARENT_COMPONENT = new InjectionToken('MDC_RADIO_GROUP_PARENT_COMPONENT');\n/**\n * Change event object emitted by MdcRadio.\n */\n\nclass MdcRadioChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/** @type {?} */\n\n\nlet nextUniqueId = 0;\nlet MdcRadio = /*#__PURE__*/(() => {\n  class MdcRadio extends MDCComponent {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} elementRef\n     * @param {?} ripple\n     * @param {?} _radioDispatcher\n     * @param {?} radioGroup\n     * @param {?} _parentFormField\n     */\n    constructor(_changeDetectorRef, elementRef, ripple, _radioDispatcher, radioGroup, _parentFormField) {\n      super(elementRef);\n      this._changeDetectorRef = _changeDetectorRef;\n      this.elementRef = elementRef;\n      this.ripple = ripple;\n      this._radioDispatcher = _radioDispatcher;\n      this.radioGroup = radioGroup;\n      this._parentFormField = _parentFormField;\n      this._uniqueId = `mdc-radio-${++nextUniqueId}`;\n      this._initialized = false;\n      /**\n       * The unique ID for the radio button.\n       */\n\n      this.id = this._uniqueId;\n      this.tabIndex = 0;\n      this._touch = false;\n      this._checked = false;\n      this._disabled = false;\n      this._required = false;\n      this.change = new EventEmitter();\n      /**\n       * Unregister function for _radioDispatcher\n       */\n\n      this._removeUniqueSelectionListener =\n      /**\n      * @return {?}\n      */\n      () => {};\n\n      if (this._parentFormField) {\n        _parentFormField.elementRef.nativeElement.classList.add('mdc-form-field');\n      }\n\n      this._root = elementRef.nativeElement;\n      this.ripple = this._createRipple();\n      this._removeUniqueSelectionListener = _radioDispatcher.listen(\n      /**\n      * @param {?} id\n      * @param {?} name\n      * @return {?}\n      */\n      (id, name) => {\n        if (id !== this.id && name === this.name) {\n          // Get the checked state from native radio button. The native radio buttons with the same\n          // name have separate unique selection in different form containers.\n          this.checked = this.input.nativeElement.checked;\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get inputId() {\n      return `${this.id || this._uniqueId}-input`;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get touch() {\n      return this._touch;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set touch(value) {\n      this._touch = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get value() {\n      return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n\n\n    set value(newValue) {\n      this.setValue(newValue);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get checked() {\n      return this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set checked(value) {\n      this.setChecked(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      /** @type {?} */\n      const newDisabledState = coerceBooleanProperty(value);\n\n      if (this._disabled !== newDisabledState) {\n        this._disabled = newDisabledState;\n\n        this._foundation.setDisabled(this._disabled);\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get required() {\n      return this._required || this.radioGroup && this.radioGroup.required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getDefaultFoundation() {\n      /** @type {?} */\n      const adapter = {\n        addClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._root.classList.add(className),\n        removeClass:\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        className => this._root.classList.remove(className),\n        setNativeControlDisabled:\n        /**\n        * @param {?} disabled\n        * @return {?}\n        */\n        disabled => this.disabled = disabled\n      };\n      return new MDCRadioFoundation(adapter);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      this._initialized = true;\n\n      this._foundation.init();\n\n      if (this.radioGroup) {\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        () => {\n          // If the radio is inside a radio group, determine if it should be checked\n          this.checked = this.radioGroup.value === this._value; // Copy name from parent radio group\n\n          this.name = this.radioGroup.name;\n          this.setChecked(this.checked);\n\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._removeUniqueSelectionListener();\n\n      this.ripple.destroy();\n\n      this._foundation.destroy();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onInputClick(event) {\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onInputChange(event) {\n      this.ripple.init();\n      event.stopPropagation();\n      /** @type {?} */\n\n      const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n      this.checked = true;\n\n      this._emitChangeEvent();\n\n      if (this.radioGroup) {\n        this.radioGroup._controlValueAccessorChangeFn(this.value);\n\n        if (groupValueChanged) {\n          this.radioGroup.emitChangeEvent();\n        }\n      }\n    }\n    /**\n     * @param {?} checked\n     * @return {?}\n     */\n\n\n    setChecked(checked) {\n      if (!this._initialized) {\n        return;\n      }\n      /** @type {?} */\n\n\n      const newCheckedState = coerceBooleanProperty(checked);\n\n      if (this._checked !== newCheckedState) {\n        this._checked = newCheckedState;\n        this.input.nativeElement.checked = newCheckedState;\n\n        if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n          this.radioGroup.selected = this;\n        } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n          // When unchecking the selected radio button, update the selected radio\n          // property on the group.\n          this.radioGroup.selected = null;\n        }\n\n        this._changeDetectorRef.markForCheck();\n\n        if (newCheckedState) {\n          // Notify all radio buttons with the same name to un-check.\n          this._radioDispatcher.notify(this.id, this.name);\n        }\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    setValue(value) {\n      this._value = value;\n      this.input.nativeElement.value = this._value;\n\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    focus() {\n      this.input.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    markForCheck() {\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _createRipple() {\n      /** @type {?} */\n      const adapter = Object.assign(Object.assign({}, MdcRipple.createAdapter(this)), {\n        isSurfaceActive:\n        /**\n        * @return {?}\n        */\n        () => false,\n        isUnbounded:\n        /**\n        * @return {?}\n        */\n        () => true,\n        deregisterInteractionHandler:\n        /**\n        * @param {?} evtType\n        * @param {?} handler\n        * @return {?}\n        */\n        (evtType, handler) => this.input.nativeElement.removeEventListener(evtType, handler, supportsPassiveEventListeners()),\n        registerInteractionHandler:\n        /**\n        * @param {?} evtType\n        * @param {?} handler\n        * @return {?}\n        */\n        (evtType, handler) => this.input.nativeElement.addEventListener(evtType, handler, supportsPassiveEventListeners())\n      });\n      return new MdcRipple(this.elementRef, new MDCRippleFoundation(adapter));\n    }\n    /**\n     * Dispatch change event with current value.\n     * @private\n     * @return {?}\n     */\n\n\n    _emitChangeEvent() {\n      this.change.emit(new MdcRadioChange(this, this._value));\n    }\n\n  }\n\n  MdcRadio.ɵfac = function MdcRadio_Factory(t) {\n    return new (t || MdcRadio)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MdcRipple), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(MDC_RADIO_GROUP_PARENT_COMPONENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.MdcFormField, 8));\n  };\n\n  MdcRadio.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcRadio,\n    selectors: [[\"mdc-radio\"]],\n    viewQuery: function MdcRadio_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mdc-radio\"],\n    hostVars: 5,\n    hostBindings: function MdcRadio_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MdcRadio_focus_HostBindingHandler() {\n          return ctx.input.nativeElement.focus();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", -1)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mdc-radio--touch\", ctx.touch);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      tabIndex: \"tabIndex\",\n      checked: \"checked\",\n      touch: \"touch\",\n      value: \"value\",\n      disabled: \"disabled\",\n      required: \"required\",\n      name: \"name\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n    },\n    outputs: {\n      change: \"change\"\n    },\n    exportAs: [\"mdcRadio\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MdcRipple, {\n      provide: MdcFormFieldControl,\n      useExisting: MdcRadio\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 6,\n    vars: 9,\n    consts: [[\"type\", \"radio\", 1, \"mdc-radio__native-control\", 3, \"id\", \"tabIndex\", \"disabled\", \"required\", \"checked\", \"click\", \"change\"], [\"input\", \"\"], [1, \"mdc-radio__background\"], [1, \"mdc-radio__outer-circle\"], [1, \"mdc-radio__inner-circle\"], [1, \"mdc-radio__ripple\"]],\n    template: function MdcRadio_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"input\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MdcRadio_Template_input_click_0_listener($event) {\n          return ctx.onInputClick($event);\n        })(\"change\", function MdcRadio_Template_input_change_0_listener($event) {\n          return ctx.onInputChange($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(5, \"div\", 5);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"tabIndex\", ctx.tabIndex)(\"disabled\", ctx.disabled)(\"required\", ctx.required)(\"checked\", ctx.checked);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcRadio;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: radio/radio-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Provider Expression that allows mdc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @type {?}\n */\n\n\nconst MDC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  () => MdcRadioGroup),\n  multi: true\n};\n/** @type {?} */\n\nlet nextUniqueId$1 = 0;\nlet MdcRadioGroup = /*#__PURE__*/(() => {\n  class MdcRadioGroup {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} elementRef\n     */\n    constructor(_changeDetectorRef, elementRef) {\n      this._changeDetectorRef = _changeDetectorRef;\n      this.elementRef = elementRef;\n      this._name = `mdc-radio-group-${nextUniqueId$1++}`;\n      /**\n       * Selected value for the radio group.\n       */\n\n      this._value = null;\n      /**\n       * Whether the `value` has been set to its initial value.\n       */\n\n      this._isInitialized = false;\n      this._selected = null;\n      this._required = false;\n      this._disabled = false;\n      /**\n       * The method to be called in order to update ngModel\n       */\n\n      this._controlValueAccessorChangeFn =\n      /**\n      * @return {?}\n      */\n      () => {};\n      /**\n       * onTouch function registered via registerOnTouch (ControlValueAccessor).\n       */\n\n\n      this.onTouched =\n      /**\n      * @return {?}\n      */\n      () => {};\n\n      this.change = new EventEmitter();\n    }\n    /**\n     * Name of the radio button group. All radio buttons inside this group will use this name.\n     * @return {?}\n     */\n\n\n    get name() {\n      return this._name;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set name(value) {\n      this._name = value;\n\n      this._updateRadioButtonNames();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     * @return {?}\n     */\n\n\n    get value() {\n      return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n\n\n    set value(newValue) {\n      if (this._value !== newValue) {\n        // Set this before proceeding to ensure no circular loop occurs with selection.\n        this._value = newValue;\n\n        this._updateSelectedRadioFromValue();\n\n        this._checkSelectedRadioButton();\n      }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     * @return {?}\n     */\n\n\n    get selected() {\n      return this._selected;\n    }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n\n\n    set selected(selected) {\n      this._selected = selected;\n      this.value = selected ? selected.value : null;\n\n      this._checkSelectedRadioButton();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get required() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._updateDisableRadioState(this._disabled);\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _checkSelectedRadioButton() {\n      if (this._selected && !this._selected.checked) {\n        this._selected.checked = true;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _touch() {\n      if (this.onTouched) {\n        this.onTouched();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _updateRadioButtonNames() {\n      if (this._radios) {\n        this._radios.forEach(\n        /**\n        * @param {?} radio\n        * @return {?}\n        */\n        radio => {\n          radio.name = this.name;\n          radio.markForCheck();\n        });\n      }\n    }\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @private\n     * @return {?}\n     */\n\n\n    _updateSelectedRadioFromValue() {\n      // If the value already matches the selected radio, do nothing.\n\n      /** @type {?} */\n      const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n      if (this._radios && !isAlreadySelected) {\n        this._selected = null;\n\n        this._radios.forEach(\n        /**\n        * @param {?} radio\n        * @return {?}\n        */\n        radio => {\n          radio.checked = this.value === radio.value;\n\n          if (radio.checked) {\n            this._selected = radio;\n          }\n        });\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _markRadiosForCheck() {\n      if (this._radios) {\n        this._radios.forEach(\n        /**\n        * @param {?} radio\n        * @return {?}\n        */\n        radio => radio.markForCheck());\n      }\n    }\n    /**\n     * @private\n     * @param {?} disabled\n     * @return {?}\n     */\n\n\n    _updateDisableRadioState(disabled) {\n      if (this._radios) {\n        this._radios.forEach(\n        /**\n        * @param {?} radio\n        * @return {?}\n        */\n        radio => radio.disabled = disabled);\n      }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    writeValue(value) {\n      this.value = value;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = coerceBooleanProperty(isDisabled);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n\n\n    emitChangeEvent() {\n      if (this._isInitialized) {\n        this.change.emit(new MdcRadioChange(\n        /** @type {?} */\n        this._selected, this._value));\n      }\n    }\n\n  }\n\n  MdcRadioGroup.ɵfac = function MdcRadioGroup_Factory(t) {\n    return new (t || MdcRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcRadioGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcRadioGroup,\n    selectors: [[\"mdc-radio-group\"], [\"\", \"mdcRadioGroup\", \"\"]],\n    contentQueries: function MdcRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcRadio, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"radiogroup\"],\n    hostVars: 1,\n    hostBindings: function MdcRadioGroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"name\", null);\n      }\n    },\n    inputs: {\n      name: \"name\",\n      value: \"value\",\n      selected: \"selected\",\n      required: \"required\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    exportAs: [\"mdcRadioGroup\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MDC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n      provide: MDC_RADIO_GROUP_PARENT_COMPONENT,\n      useExisting: MdcRadioGroup\n    }])],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MdcRadioGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcRadioGroup;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: radio/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MdcRadioModule = /*#__PURE__*/(() => {\n  class MdcRadioModule {}\n\n  MdcRadioModule.ɵfac = function MdcRadioModule_Factory(t) {\n    return new (t || MdcRadioModule)();\n  };\n\n  MdcRadioModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdcRadioModule\n  });\n  MdcRadioModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[MdcFormFieldModule]]\n  });\n  return MdcRadioModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdcRadioModule, {\n    declarations: function () {\n      return [MdcRadioGroup, MdcRadio];\n    },\n    imports: function () {\n      return [MdcFormFieldModule];\n    },\n    exports: function () {\n      return [MdcRadioGroup, MdcRadio];\n    }\n  });\n})();\n\nexport { MDC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MDC_RADIO_GROUP_PARENT_COMPONENT, MdcRadio, MdcRadioChange, MdcRadioGroup, MdcRadioModule }; //# sourceMappingURL=radio.js.map","map":null,"metadata":{},"sourceType":"module"}