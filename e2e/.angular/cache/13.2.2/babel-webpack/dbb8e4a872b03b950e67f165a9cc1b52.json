{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCTabScroller } from '@material/tab-scroller/component';\nimport { MDCTab } from '@material/tab/component';\nimport { MDCTabFoundation } from '@material/tab/foundation';\nimport { MDCTabBarFoundation } from './foundation';\nvar strings = MDCTabBarFoundation.strings;\nvar tabIdCounter = 0;\n\nvar MDCTabBar =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCTabBar, _super);\n\n  function MDCTabBar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCTabBar.attachTo = function (root) {\n    return new MDCTabBar(root);\n  };\n\n  Object.defineProperty(MDCTabBar.prototype, \"focusOnActivate\", {\n    set: function (focusOnActivate) {\n      this.tabList_.forEach(function (tab) {\n        return tab.focusOnActivate = focusOnActivate;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTabBar.prototype, \"useAutomaticActivation\", {\n    set: function (useAutomaticActivation) {\n      this.foundation_.setUseAutomaticActivation(useAutomaticActivation);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCTabBar.prototype.initialize = function (tabFactory, tabScrollerFactory) {\n    if (tabFactory === void 0) {\n      tabFactory = function (el) {\n        return new MDCTab(el);\n      };\n    }\n\n    if (tabScrollerFactory === void 0) {\n      tabScrollerFactory = function (el) {\n        return new MDCTabScroller(el);\n      };\n    }\n\n    this.tabList_ = this.instantiateTabs_(tabFactory);\n    this.tabScroller_ = this.instantiateTabScroller_(tabScrollerFactory);\n  };\n\n  MDCTabBar.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.handleTabInteraction_ = function (evt) {\n      return _this.foundation_.handleTabInteraction(evt);\n    };\n\n    this.handleKeyDown_ = function (evt) {\n      return _this.foundation_.handleKeyDown(evt);\n    };\n\n    this.listen(MDCTabFoundation.strings.INTERACTED_EVENT, this.handleTabInteraction_);\n    this.listen('keydown', this.handleKeyDown_);\n\n    for (var i = 0; i < this.tabList_.length; i++) {\n      if (this.tabList_[i].active) {\n        this.scrollIntoView(i);\n        break;\n      }\n    }\n  };\n\n  MDCTabBar.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.unlisten(MDCTabFoundation.strings.INTERACTED_EVENT, this.handleTabInteraction_);\n    this.unlisten('keydown', this.handleKeyDown_);\n    this.tabList_.forEach(function (tab) {\n      return tab.destroy();\n    });\n\n    if (this.tabScroller_) {\n      this.tabScroller_.destroy();\n    }\n  };\n\n  MDCTabBar.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      scrollTo: function (scrollX) {\n        return _this.tabScroller_.scrollTo(scrollX);\n      },\n      incrementScroll: function (scrollXIncrement) {\n        return _this.tabScroller_.incrementScroll(scrollXIncrement);\n      },\n      getScrollPosition: function () {\n        return _this.tabScroller_.getScrollPosition();\n      },\n      getScrollContentWidth: function () {\n        return _this.tabScroller_.getScrollContentWidth();\n      },\n      getOffsetWidth: function () {\n        return _this.root_.offsetWidth;\n      },\n      isRTL: function () {\n        return window.getComputedStyle(_this.root_).getPropertyValue('direction') === 'rtl';\n      },\n      setActiveTab: function (index) {\n        return _this.foundation_.activateTab(index);\n      },\n      activateTabAtIndex: function (index, clientRect) {\n        return _this.tabList_[index].activate(clientRect);\n      },\n      deactivateTabAtIndex: function (index) {\n        return _this.tabList_[index].deactivate();\n      },\n      focusTabAtIndex: function (index) {\n        return _this.tabList_[index].focus();\n      },\n      getTabIndicatorClientRectAtIndex: function (index) {\n        return _this.tabList_[index].computeIndicatorClientRect();\n      },\n      getTabDimensionsAtIndex: function (index) {\n        return _this.tabList_[index].computeDimensions();\n      },\n      getPreviousActiveTabIndex: function () {\n        for (var i = 0; i < _this.tabList_.length; i++) {\n          if (_this.tabList_[i].active) {\n            return i;\n          }\n        }\n\n        return -1;\n      },\n      getFocusedTabIndex: function () {\n        var tabElements = _this.getTabElements_();\n\n        var activeElement = document.activeElement;\n        return tabElements.indexOf(activeElement);\n      },\n      getIndexOfTabById: function (id) {\n        for (var i = 0; i < _this.tabList_.length; i++) {\n          if (_this.tabList_[i].id === id) {\n            return i;\n          }\n        }\n\n        return -1;\n      },\n      getTabListLength: function () {\n        return _this.tabList_.length;\n      },\n      notifyTabActivated: function (index) {\n        return _this.emit(strings.TAB_ACTIVATED_EVENT, {\n          index: index\n        }, true);\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    return new MDCTabBarFoundation(adapter);\n  };\n  /**\n   * Activates the tab at the given index\n   * @param index The index of the tab\n   */\n\n\n  MDCTabBar.prototype.activateTab = function (index) {\n    this.foundation_.activateTab(index);\n  };\n  /**\n   * Scrolls the tab at the given index into view\n   * @param index THe index of the tab\n   */\n\n\n  MDCTabBar.prototype.scrollIntoView = function (index) {\n    this.foundation_.scrollIntoView(index);\n  };\n  /**\n   * Returns all the tab elements in a nice clean array\n   */\n\n\n  MDCTabBar.prototype.getTabElements_ = function () {\n    return [].slice.call(this.root_.querySelectorAll(strings.TAB_SELECTOR));\n  };\n  /**\n   * Instantiates tab components on all child tab elements\n   */\n\n\n  MDCTabBar.prototype.instantiateTabs_ = function (tabFactory) {\n    return this.getTabElements_().map(function (el) {\n      el.id = el.id || \"mdc-tab-\" + ++tabIdCounter;\n      return tabFactory(el);\n    });\n  };\n  /**\n   * Instantiates tab scroller component on the child tab scroller element\n   */\n\n\n  MDCTabBar.prototype.instantiateTabScroller_ = function (tabScrollerFactory) {\n    var tabScrollerElement = this.root_.querySelector(strings.TAB_SCROLLER_SELECTOR);\n\n    if (tabScrollerElement) {\n      return tabScrollerFactory(tabScrollerElement);\n    }\n\n    return null;\n  };\n\n  return MDCTabBar;\n}(MDCComponent);\n\nexport { MDCTabBar }; //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}