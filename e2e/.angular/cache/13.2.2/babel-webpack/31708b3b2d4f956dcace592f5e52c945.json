{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { Directive, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MdcRipple } from '@angular-mdc/web/ripple';\n/**\n * @fileoverview added by tsickle\n * Generated from: card/card.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular-mdc/web/ripple';\nconst _c0 = [\"*\"];\nlet MdcCardMediaContent = /*#__PURE__*/(() => {\n  class MdcCardMediaContent {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n\n  }\n\n  MdcCardMediaContent.ɵfac = function MdcCardMediaContent_Factory(t) {\n    return new (t || MdcCardMediaContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcCardMediaContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdcCardMediaContent,\n    selectors: [[\"mdc-card-media-content\"], [\"\", \"mdcCardMediaContent\", \"\"]],\n    hostAttrs: [1, \"mdc-card__media-content\"],\n    exportAs: [\"mdcCardMediaContent\"]\n  });\n  /** @nocollapse */\n\n  return MdcCardMediaContent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcCardMedia = /*#__PURE__*/(() => {\n  class MdcCardMedia {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this._square = false;\n      this._wide = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get square() {\n      return this._square;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set square(value) {\n      this._square = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get wide() {\n      return this._wide;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set wide(value) {\n      this._wide = coerceBooleanProperty(value);\n    }\n\n  }\n\n  MdcCardMedia.ɵfac = function MdcCardMedia_Factory(t) {\n    return new (t || MdcCardMedia)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcCardMedia.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcCardMedia,\n    selectors: [[\"mdc-card-media\"], [\"\", \"mdcCardMedia\", \"\"]],\n    hostAttrs: [1, \"mdc-card__media\"],\n    hostVars: 4,\n    hostBindings: function MdcCardMedia_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mdc-card__media--square\", ctx.square)(\"mdc-card__media--16-9\", ctx.wide);\n      }\n    },\n    inputs: {\n      square: \"square\",\n      wide: \"wide\"\n    },\n    exportAs: [\"mdcCardMedia\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MdcCardMedia_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcCardMedia;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcCardPrimaryAction = /*#__PURE__*/(() => {\n  class MdcCardPrimaryAction {\n    /**\n     * @param {?} _ripple\n     * @param {?} elementRef\n     */\n    constructor(_ripple, elementRef) {\n      this._ripple = _ripple;\n      this.elementRef = elementRef;\n      this._ripple = new MdcRipple(this.elementRef);\n\n      this._ripple.init();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._ripple.destroy();\n    }\n\n  }\n\n  MdcCardPrimaryAction.ɵfac = function MdcCardPrimaryAction_Factory(t) {\n    return new (t || MdcCardPrimaryAction)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MdcRipple), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcCardPrimaryAction.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcCardPrimaryAction,\n    selectors: [[\"mdc-card-primary-action\"], [\"\", \"mdcCardPrimaryAction\", \"\"]],\n    hostAttrs: [1, \"mdc-card__primary-action\"],\n    exportAs: [\"mdcCardPrimaryAction\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([MdcRipple])],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MdcCardPrimaryAction_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcCardPrimaryAction;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcCardActions = /*#__PURE__*/(() => {\n  class MdcCardActions {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this._fullBleed = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get fullBleed() {\n      return this._fullBleed;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set fullBleed(value) {\n      this._fullBleed = coerceBooleanProperty(value);\n    }\n\n  }\n\n  MdcCardActions.ɵfac = function MdcCardActions_Factory(t) {\n    return new (t || MdcCardActions)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcCardActions.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcCardActions,\n    selectors: [[\"mdc-card-actions\"], [\"\", \"mdcCardActions\", \"\"]],\n    hostAttrs: [1, \"mdc-card__actions\"],\n    hostVars: 2,\n    hostBindings: function MdcCardActions_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mdc-card__actions--full-bleed\", ctx.fullBleed);\n      }\n    },\n    inputs: {\n      fullBleed: \"fullBleed\"\n    },\n    exportAs: [\"mdcCardActions\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MdcCardActions_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcCardActions;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcCardActionButtons = /*#__PURE__*/(() => {\n  class MdcCardActionButtons {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n\n  }\n\n  MdcCardActionButtons.ɵfac = function MdcCardActionButtons_Factory(t) {\n    return new (t || MdcCardActionButtons)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcCardActionButtons.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdcCardActionButtons,\n    selectors: [[\"mdc-card-action-buttons\"], [\"\", \"mdcCardActionButtons\", \"\"]],\n    hostAttrs: [1, \"mdc-card__action-buttons\"],\n    exportAs: [\"mdcCardActionButtons\"]\n  });\n  /** @nocollapse */\n\n  return MdcCardActionButtons;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcCardActionIcons = /*#__PURE__*/(() => {\n  class MdcCardActionIcons {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n\n  }\n\n  MdcCardActionIcons.ɵfac = function MdcCardActionIcons_Factory(t) {\n    return new (t || MdcCardActionIcons)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcCardActionIcons.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdcCardActionIcons,\n    selectors: [[\"mdc-card-action-icons\"], [\"\", \"mdcCardActionIcons\", \"\"]],\n    hostAttrs: [1, \"mdc-card__action-icons\"],\n    exportAs: [\"mdcCardActionIcons\"]\n  });\n  /** @nocollapse */\n\n  return MdcCardActionIcons;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcCardAction = /*#__PURE__*/(() => {\n  class MdcCardAction {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this._action = '';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get action() {\n      return this._action;\n    }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n\n\n    set action(action) {\n      // If the directive is set without a name (updated programatically), then this setter will\n      // trigger with an empty string and should not overwrite the programatically set value.\n      if (!action) {\n        return;\n      }\n\n      if (action === 'button') {\n        this.elementRef.nativeElement.classList.remove('mdc-card__action--icon');\n        this.elementRef.nativeElement.classList.add('mdc-card__action--button');\n      } else if (action === 'icon') {\n        this.elementRef.nativeElement.classList.remove('mdc-card__action--button');\n        this.elementRef.nativeElement.classList.add('mdc-card__action--icon');\n        this.elementRef.nativeElement.setAttribute('tabIndex', '0');\n        this.elementRef.nativeElement.setAttribute('role', 'button');\n      }\n\n      this._action = action;\n    }\n\n  }\n\n  MdcCardAction.ɵfac = function MdcCardAction_Factory(t) {\n    return new (t || MdcCardAction)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcCardAction.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MdcCardAction,\n    selectors: [[\"\", \"mdcCardAction\", \"\"]],\n    hostAttrs: [1, \"mdc-card__action\"],\n    inputs: {\n      action: [\"mdcCardAction\", \"action\"]\n    }\n  });\n  /** @nocollapse */\n\n  return MdcCardAction;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MdcCard = /*#__PURE__*/(() => {\n  class MdcCard {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this._outlined = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get outlined() {\n      return this._outlined;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set outlined(value) {\n      this._outlined = coerceBooleanProperty(value);\n    }\n\n  }\n\n  MdcCard.ɵfac = function MdcCard_Factory(t) {\n    return new (t || MdcCard)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MdcCard.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MdcCard,\n    selectors: [[\"mdc-card\"]],\n    hostAttrs: [1, \"mdc-card\"],\n    hostVars: 2,\n    hostBindings: function MdcCard_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mdc-card--outlined\", ctx.outlined);\n      }\n    },\n    inputs: {\n      outlined: \"outlined\"\n    },\n    exportAs: [\"mdcCard\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MdcCard_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MdcCard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: card/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst CARD_DECLARATIONS = [MdcCard, MdcCardAction, MdcCardActionButtons, MdcCardActionIcons, MdcCardActions, MdcCardMedia, MdcCardMediaContent, MdcCardPrimaryAction];\nlet MdcCardModule = /*#__PURE__*/(() => {\n  class MdcCardModule {}\n\n  MdcCardModule.ɵfac = function MdcCardModule_Factory(t) {\n    return new (t || MdcCardModule)();\n  };\n\n  MdcCardModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MdcCardModule\n  });\n  MdcCardModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return MdcCardModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MdcCardModule, {\n    declarations: [MdcCard, MdcCardAction, MdcCardActionButtons, MdcCardActionIcons, MdcCardActions, MdcCardMedia, MdcCardMediaContent, MdcCardPrimaryAction],\n    exports: [MdcCard, MdcCardAction, MdcCardActionButtons, MdcCardActionIcons, MdcCardActions, MdcCardMedia, MdcCardMediaContent, MdcCardPrimaryAction]\n  });\n})();\n\nexport { MdcCard, MdcCardAction, MdcCardActionButtons, MdcCardActionIcons, MdcCardActions, MdcCardMedia, MdcCardMediaContent, MdcCardModule, MdcCardPrimaryAction }; //# sourceMappingURL=card.js.map","map":null,"metadata":{},"sourceType":"module"}