{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { getCorrectEventName } from '@material/animation/util';\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { matches } from '@material/dom/ponyfill';\nimport { MDCRipple } from '@material/ripple/component';\nimport { MDCRippleFoundation } from '@material/ripple/foundation';\nimport { MDCCheckboxFoundation } from './foundation';\nvar CB_PROTO_PROPS = ['checked', 'indeterminate'];\n\nvar MDCCheckbox =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCCheckbox, _super);\n\n  function MDCCheckbox() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.ripple_ = _this.createRipple_();\n    return _this;\n  }\n\n  MDCCheckbox.attachTo = function (root) {\n    return new MDCCheckbox(root);\n  };\n\n  Object.defineProperty(MDCCheckbox.prototype, \"ripple\", {\n    get: function () {\n      return this.ripple_;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"checked\", {\n    get: function () {\n      return this.nativeControl_.checked;\n    },\n    set: function (checked) {\n      this.nativeControl_.checked = checked;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"indeterminate\", {\n    get: function () {\n      return this.nativeControl_.indeterminate;\n    },\n    set: function (indeterminate) {\n      this.nativeControl_.indeterminate = indeterminate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"disabled\", {\n    get: function () {\n      return this.nativeControl_.disabled;\n    },\n    set: function (disabled) {\n      this.foundation_.setDisabled(disabled);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCCheckbox.prototype, \"value\", {\n    get: function () {\n      return this.nativeControl_.value;\n    },\n    set: function (value) {\n      this.nativeControl_.value = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCCheckbox.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.handleChange_ = function () {\n      return _this.foundation_.handleChange();\n    };\n\n    this.handleAnimationEnd_ = function () {\n      return _this.foundation_.handleAnimationEnd();\n    };\n\n    this.nativeControl_.addEventListener('change', this.handleChange_);\n    this.listen(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);\n    this.installPropertyChangeHooks_();\n  };\n\n  MDCCheckbox.prototype.destroy = function () {\n    this.ripple_.destroy();\n    this.nativeControl_.removeEventListener('change', this.handleChange_);\n    this.unlisten(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);\n    this.uninstallPropertyChangeHooks_();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  MDCCheckbox.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      forceLayout: function () {\n        return _this.root_.offsetWidth;\n      },\n      hasNativeControl: function () {\n        return !!_this.nativeControl_;\n      },\n      isAttachedToDOM: function () {\n        return Boolean(_this.root_.parentNode);\n      },\n      isChecked: function () {\n        return _this.checked;\n      },\n      isIndeterminate: function () {\n        return _this.indeterminate;\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      },\n      removeNativeControlAttr: function (attr) {\n        return _this.nativeControl_.removeAttribute(attr);\n      },\n      setNativeControlAttr: function (attr, value) {\n        return _this.nativeControl_.setAttribute(attr, value);\n      },\n      setNativeControlDisabled: function (disabled) {\n        return _this.nativeControl_.disabled = disabled;\n      }\n    };\n    return new MDCCheckboxFoundation(adapter);\n  };\n\n  MDCCheckbox.prototype.createRipple_ = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = tslib_1.__assign({}, MDCRipple.createAdapter(this), {\n      deregisterInteractionHandler: function (evtType, handler) {\n        return _this.nativeControl_.removeEventListener(evtType, handler, applyPassive());\n      },\n      isSurfaceActive: function () {\n        return matches(_this.nativeControl_, ':active');\n      },\n      isUnbounded: function () {\n        return true;\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        return _this.nativeControl_.addEventListener(evtType, handler, applyPassive());\n      }\n    });\n\n    return new MDCRipple(this.root_, new MDCRippleFoundation(adapter));\n  };\n\n  MDCCheckbox.prototype.installPropertyChangeHooks_ = function () {\n    var _this = this;\n\n    var nativeCb = this.nativeControl_;\n    var cbProto = Object.getPrototypeOf(nativeCb);\n    CB_PROTO_PROPS.forEach(function (controlState) {\n      var desc = Object.getOwnPropertyDescriptor(cbProto, controlState); // We have to check for this descriptor, since some browsers (Safari) don't support its return.\n      // See: https://bugs.webkit.org/show_bug.cgi?id=49739\n\n      if (!validDescriptor(desc)) {\n        return;\n      } // Type cast is needed for compatibility with Closure Compiler.\n\n\n      var nativeGetter = desc.get;\n      var nativeCbDesc = {\n        configurable: desc.configurable,\n        enumerable: desc.enumerable,\n        get: nativeGetter,\n        set: function (state) {\n          desc.set.call(nativeCb, state);\n\n          _this.foundation_.handleChange();\n        }\n      };\n      Object.defineProperty(nativeCb, controlState, nativeCbDesc);\n    });\n  };\n\n  MDCCheckbox.prototype.uninstallPropertyChangeHooks_ = function () {\n    var nativeCb = this.nativeControl_;\n    var cbProto = Object.getPrototypeOf(nativeCb);\n    CB_PROTO_PROPS.forEach(function (controlState) {\n      var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);\n\n      if (!validDescriptor(desc)) {\n        return;\n      }\n\n      Object.defineProperty(nativeCb, controlState, desc);\n    });\n  };\n\n  Object.defineProperty(MDCCheckbox.prototype, \"nativeControl_\", {\n    get: function () {\n      var NATIVE_CONTROL_SELECTOR = MDCCheckboxFoundation.strings.NATIVE_CONTROL_SELECTOR;\n      var el = this.root_.querySelector(NATIVE_CONTROL_SELECTOR);\n\n      if (!el) {\n        throw new Error(\"Checkbox component requires a \" + NATIVE_CONTROL_SELECTOR + \" element\");\n      }\n\n      return el;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MDCCheckbox;\n}(MDCComponent);\n\nexport { MDCCheckbox };\n\nfunction validDescriptor(inputPropDesc) {\n  return !!inputPropDesc && typeof inputPropDesc.set === 'function';\n} //# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module"}