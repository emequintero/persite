{"ast":null,"code":"/**\n * @license\n * Copyright (c) Dominic Carretto\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/trimox/angular-mdc-web/blob/master/LICENSE\n */\nimport { Directive, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, ContentChild, EventEmitter, Output, ContentChildren, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\nimport { Subject, merge } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { MDCComponent } from '@angular-mdc/web/base';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MdcCheckbox } from '@angular-mdc/web/checkbox';\nimport { closest } from '@angular-mdc/web/dom';\nimport { MDCDataTableFoundation, strings } from '@material/data-table';\n/**\n * @fileoverview added by tsickle\n * Generated from: data-table/data-table.directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"mdcDataTableHeaderCell\", \"\"];\nconst _c1 = [\"*\"];\nconst _c2 = [\"mdcDataTableRow\", \"\"];\nconst _c3 = [\"mdcDataTableCell\", \"\"];\nlet uniqueIdCounter = 0;\nlet MDCDataTableTable = /*#__PURE__*/(() => {\n  class MDCDataTableTable {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n\n  }\n\n  MDCDataTableTable.ɵfac = function MDCDataTableTable_Factory(t) {\n    return new (t || MDCDataTableTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MDCDataTableTable.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MDCDataTableTable,\n    selectors: [[\"\", \"mdcDataTableTable\", \"\"]],\n    hostAttrs: [1, \"mdc-data-table__table\"],\n    exportAs: [\"mdcDataTableTable\"]\n  });\n  /** @nocollapse */\n\n  return MDCDataTableTable;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MDCDataTableHeaderRow = /*#__PURE__*/(() => {\n  class MDCDataTableHeaderRow {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n\n  }\n\n  MDCDataTableHeaderRow.ɵfac = function MDCDataTableHeaderRow_Factory(t) {\n    return new (t || MDCDataTableHeaderRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MDCDataTableHeaderRow.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MDCDataTableHeaderRow,\n    selectors: [[\"\", \"mdcDataTableHeaderRow\", \"\"]],\n    hostAttrs: [1, \"mdc-data-table__header-row\"],\n    exportAs: [\"mdcDataTableHeaderRow\"]\n  });\n  /** @nocollapse */\n\n  return MDCDataTableHeaderRow;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MDCDataTableHeaderCell = /*#__PURE__*/(() => {\n  class MDCDataTableHeaderCell {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this._numeric = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get numeric() {\n      return this._numeric;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set numeric(value) {\n      this._numeric = coerceBooleanProperty(value);\n    }\n\n  }\n\n  MDCDataTableHeaderCell.ɵfac = function MDCDataTableHeaderCell_Factory(t) {\n    return new (t || MDCDataTableHeaderCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MDCDataTableHeaderCell.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MDCDataTableHeaderCell,\n    selectors: [[\"\", \"mdcDataTableHeaderCell\", \"\"]],\n    contentQueries: function MDCDataTableHeaderCell_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcCheckbox, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._checkbox = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"columnheader\", \"scope\", \"col\", 1, \"mdc-data-table__header-cell\"],\n    hostVars: 4,\n    hostBindings: function MDCDataTableHeaderCell_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mdc-data-table__header-cell--checkbox\", !!ctx._checkbox)(\"mdc-data-table__header-cell--numeric\", ctx.numeric);\n      }\n    },\n    inputs: {\n      numeric: \"numeric\"\n    },\n    exportAs: [\"mdcDataTableHeaderCell\"],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MDCDataTableHeaderCell_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MDCDataTableHeaderCell;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MDCDataTableContent = /*#__PURE__*/(() => {\n  class MDCDataTableContent {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n\n  }\n\n  MDCDataTableContent.ɵfac = function MDCDataTableContent_Factory(t) {\n    return new (t || MDCDataTableContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MDCDataTableContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MDCDataTableContent,\n    selectors: [[\"\", \"mdcDataTableContent\", \"\"]],\n    hostAttrs: [1, \"mdc-data-table__content\"],\n    exportAs: [\"mdcDataTableContent\"]\n  });\n  /** @nocollapse */\n\n  return MDCDataTableContent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MDCDataTableRow = /*#__PURE__*/(() => {\n  class MDCDataTableRow {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this._id = `mdc-data-table-row-${uniqueIdCounter++}`;\n      this._selected = false;\n    }\n    /**\n     * The unique ID of the row.\n     * @return {?}\n     */\n\n\n    get id() {\n      return this._id;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get selected() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set selected(value) {\n      this._selected = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getNativeElement() {\n      return this.elementRef.nativeElement;\n    }\n\n  }\n\n  MDCDataTableRow.ɵfac = function MDCDataTableRow_Factory(t) {\n    return new (t || MDCDataTableRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MDCDataTableRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MDCDataTableRow,\n    selectors: [[\"\", \"mdcDataTableRow\", \"\"]],\n    contentQueries: function MDCDataTableRow_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MdcCheckbox, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._checkbox = _t.first);\n      }\n    },\n    hostAttrs: [1, \"mdc-data-table__row\"],\n    hostVars: 5,\n    hostBindings: function MDCDataTableRow_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-row-id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"mdc-data-table__row-checkbox\", !!ctx._checkbox)(\"mdc-data-table__row--selected\", ctx.selected);\n      }\n    },\n    inputs: {\n      selected: \"selected\"\n    },\n    exportAs: [\"mdcDataTableRow\"],\n    attrs: _c2,\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MDCDataTableRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MDCDataTableRow;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MDCDataTableCell = /*#__PURE__*/(() => {\n  class MDCDataTableCell {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this._checkbox = false;\n      this._numeric = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get checkbox() {\n      return this._checkbox;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set checkbox(value) {\n      this._checkbox = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get numeric() {\n      return this._numeric;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set numeric(value) {\n      this._numeric = coerceBooleanProperty(value);\n    }\n\n  }\n\n  MDCDataTableCell.ɵfac = function MDCDataTableCell_Factory(t) {\n    return new (t || MDCDataTableCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MDCDataTableCell.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MDCDataTableCell,\n    selectors: [[\"\", \"mdcDataTableCell\", \"\"]],\n    hostAttrs: [1, \"mdc-data-table__cell\"],\n    hostVars: 4,\n    hostBindings: function MDCDataTableCell_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mdc-data-table__cell--checkbox\", ctx.checkbox)(\"mdc-data-table__cell--numeric\", ctx.numeric);\n      }\n    },\n    inputs: {\n      checkbox: \"checkbox\",\n      numeric: \"numeric\"\n    },\n    exportAs: [\"mdcDataTableCell\"],\n    attrs: _c3,\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MDCDataTableCell_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MDCDataTableCell;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: data-table/data-table.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet MDCDataTable = /*#__PURE__*/(() => {\n  class MDCDataTable extends MDCComponent {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n      super(elementRef);\n      this.elementRef = elementRef;\n      /**\n       * Emits whenever the component is destroyed.\n       */\n\n      this._destroyed = new Subject();\n      this._headerCheckboxSubscription = null;\n      /**\n       * Subscription to checkbox events in rows.\n       */\n\n      this._rowCheckboxesSubscription = null;\n      /**\n       * Emitted when all rows are selected.\n       */\n\n      this.selectedAll = new EventEmitter();\n      /**\n       * Emitted when all rows are unselected.\n       */\n\n      this.unselectedAll = new EventEmitter();\n      /**\n       * Emitted when a row is selected.\n       */\n\n      this.selectionChanged = new EventEmitter();\n    }\n    /**\n     * Combined stream of all checkbox row change events.\n     * @return {?}\n     */\n\n\n    get rowCheckboxChanges() {\n      return merge(...this.rows.map(\n      /**\n      * @param {?} row\n      * @return {?}\n      */\n      row =>\n      /** @type {?} */\n      row._checkbox.change));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getDefaultFoundation() {\n      /** @type {?} */\n      const adapter = {\n        addClassAtRowIndex:\n        /**\n        * @param {?} rowIndex\n        * @param {?} className\n        * @return {?}\n        */\n        (rowIndex, className) => this.getRows()[rowIndex].getNativeElement().classList.add(className),\n        getRowCount:\n        /**\n        * @return {?}\n        */\n        () => this.getRows().length,\n        getRowElements:\n        /**\n        * @return {?}\n        */\n        () => [].slice.call(this.elementRef.nativeElement.querySelectorAll(strings.ROW_SELECTOR)),\n        getRowIdAtIndex:\n        /**\n        * @param {?} rowIndex\n        * @return {?}\n        */\n        rowIndex => this.getRows()[rowIndex].getNativeElement().getAttribute(strings.DATA_ROW_ID_ATTR),\n        getRowIndexByChildElement:\n        /**\n        * @param {?} el\n        * @return {?}\n        */\n        el => this.getRows().findIndex(\n        /**\n        * @param {?} _\n        * @return {?}\n        */\n        _ => _.getNativeElement() ===\n        /** @type {?} */\n        closest(el, strings.ROW_SELECTOR)),\n        getSelectedRowCount:\n        /**\n        * @return {?}\n        */\n        () => this.elementRef.nativeElement.querySelectorAll(strings.ROW_SELECTED_SELECTOR).length,\n        isCheckboxAtRowIndexChecked:\n        /**\n        * @param {?} rowIndex\n        * @return {?}\n        */\n        rowIndex => this.rows.length > 0 && this.getRows()[rowIndex] && this.getRows()[rowIndex]._checkbox !== undefined &&\n        /** @type {?} */\n        this.getRows()[rowIndex]._checkbox.checked ? true : false,\n        isHeaderRowCheckboxChecked:\n        /**\n        * @return {?}\n        */\n        () => this._headerCheckbox ? this._headerCheckbox.checked : false,\n        isRowsSelectable:\n        /**\n        * @return {?}\n        */\n        () => !!this.elementRef.nativeElement.querySelector(strings.ROW_CHECKBOX_SELECTOR),\n        notifyRowSelectionChanged:\n        /**\n        * @param {?} data\n        * @return {?}\n        */\n        data => this.selectionChanged.emit({\n          index: data.rowIndex,\n          id: data.rowId,\n          selected: data.selected\n        }),\n        notifySelectedAll:\n        /**\n        * @return {?}\n        */\n        () => this.selectedAll.emit(),\n        notifyUnselectedAll:\n        /**\n        * @return {?}\n        */\n        () => this.unselectedAll.emit(),\n        registerHeaderRowCheckbox:\n        /**\n        * @return {?}\n        */\n        () => this._registerHeaderCheckbox(),\n        registerRowCheckboxes:\n        /**\n        * @return {?}\n        */\n        () => this._registerRowCheckboxes(),\n        removeClassAtRowIndex:\n        /**\n        * @param {?} rowIndex\n        * @param {?} className\n        * @return {?}\n        */\n        (rowIndex, className) => this.getRows()[rowIndex].getNativeElement().classList.remove(className),\n        setAttributeAtRowIndex:\n        /**\n        * @param {?} rowIndex\n        * @param {?} attr\n        * @param {?} value\n        * @return {?}\n        */\n        (rowIndex, attr, value) => this.getRows()[rowIndex].getNativeElement().setAttribute(attr, value),\n        setHeaderRowCheckboxChecked:\n        /**\n        * @param {?} checked\n        * @return {?}\n        */\n        checked =>\n        /** @type {?} */\n        this._headerCheckbox.checked = checked,\n        setHeaderRowCheckboxIndeterminate:\n        /**\n        * @param {?} indeterminate\n        * @return {?}\n        */\n        indeterminate =>\n        /** @type {?} */\n        this._headerCheckbox.indeterminate = indeterminate,\n        setRowCheckboxCheckedAtIndex:\n        /**\n        * @param {?} rowIndex\n        * @param {?} checked\n        * @return {?}\n        */\n        (rowIndex, checked) => this.getRows()[rowIndex]._checkbox ?\n        /** @type {?} */\n        this.getRows()[rowIndex]._checkbox.toggle(checked) : null\n      };\n      return new MDCDataTableFoundation(adapter);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      this._foundation.init();\n\n      this.layoutAsync();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._unsubscribeHeaderCheckbox();\n\n      this._unsubscribeRowCheckboxes();\n\n      if (this._foundation) {\n        this._foundation.destroy();\n      }\n    }\n    /**\n     * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n     * Use this if registering checkbox is asynchronous.\n     * @return {?}\n     */\n\n\n    layoutAsync() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this._foundation.layoutAsync();\n      });\n    }\n    /**\n     * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n     * Use this if registering checkbox is synchronous.\n     * @return {?}\n     */\n\n\n    layout() {\n      this._foundation.layout();\n    }\n    /**\n     * @return {?} Returns array of selected row ids.\n     */\n\n\n    getSelectedRowIds() {\n      return this._foundation.getSelectedRowIds();\n    }\n    /**\n     * Sets selected row ids. Overwrites previously selected rows.\n     * @param {?} rowIds Array of row ids that needs to be selected.\n     * @return {?}\n     */\n\n\n    setSelectedRowIds(rowIds) {\n      return this._foundation.setSelectedRowIds(rowIds);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getRows() {\n      return this.rows.toArray();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getHeaderCheckbox() {\n      return this._headerCheckbox;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _unsubscribeHeaderCheckbox() {\n      if (this._headerCheckboxSubscription) {\n        this._headerCheckboxSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _unsubscribeRowCheckboxes() {\n      if (this._rowCheckboxesSubscription) {\n        this._rowCheckboxesSubscription.unsubscribe();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _registerHeaderCheckbox() {\n      this._unsubscribeHeaderCheckbox();\n      /** @type {?} */\n\n\n      const headerRowCheckboxIndex = this.headerCells.toArray().findIndex(\n      /**\n      * @param {?} _\n      * @return {?}\n      */\n      _ => _._checkbox !== undefined);\n      this._headerCheckbox = this.headerCells.toArray()[headerRowCheckboxIndex]._checkbox;\n      this._headerCheckboxSubscription =\n      /** @type {?} */\n      this._headerCheckbox.change.pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @param {?} _\n      * @return {?}\n      */\n      _ => this._foundation.handleHeaderRowCheckboxChange());\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    _registerRowCheckboxes() {\n      this._unsubscribeRowCheckboxes();\n\n      this._rowCheckboxesSubscription = this.rowCheckboxChanges.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        this._foundation.handleRowCheckboxChange(\n        /** @type {?} */\n\n        /** @type {?} */\n        {\n          target: event.source._inputElement.nativeElement\n        });\n      });\n    }\n\n  }\n\n  MDCDataTable.ɵfac = function MDCDataTable_Factory(t) {\n    return new (t || MDCDataTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  MDCDataTable.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MDCDataTable,\n    selectors: [[\"mdc-data-table\"]],\n    contentQueries: function MDCDataTable_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MDCDataTableRow, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MDCDataTableHeaderCell, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rows = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCells = _t);\n      }\n    },\n    hostAttrs: [1, \"mdc-data-table\"],\n    outputs: {\n      selectedAll: \"selectedAll\",\n      unselectedAll: \"unselectedAll\",\n      selectionChanged: \"selectionChanged\"\n    },\n    exportAs: [\"mdcDataTable\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MDCDataTable_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MDCDataTable;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: data-table/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst DATA_TABLE_DECLARATIONS = [MDCDataTable, MDCDataTableCell, MDCDataTableContent, MDCDataTableHeaderCell, MDCDataTableHeaderRow, MDCDataTableRow, MDCDataTableTable];\nlet MDCDataTableModule = /*#__PURE__*/(() => {\n  class MDCDataTableModule {}\n\n  MDCDataTableModule.ɵfac = function MDCDataTableModule_Factory(t) {\n    return new (t || MDCDataTableModule)();\n  };\n\n  MDCDataTableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MDCDataTableModule\n  });\n  MDCDataTableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return MDCDataTableModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MDCDataTableModule, {\n    declarations: function () {\n      return [MDCDataTable, MDCDataTableCell, MDCDataTableContent, MDCDataTableHeaderCell, MDCDataTableHeaderRow, MDCDataTableRow, MDCDataTableTable];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [MDCDataTable, MDCDataTableCell, MDCDataTableContent, MDCDataTableHeaderCell, MDCDataTableHeaderRow, MDCDataTableRow, MDCDataTableTable];\n    }\n  });\n})();\n\nexport { MDCDataTable, MDCDataTableCell, MDCDataTableContent, MDCDataTableHeaderCell, MDCDataTableHeaderRow, MDCDataTableModule, MDCDataTableRow, MDCDataTableTable }; //# sourceMappingURL=data-table.js.map","map":null,"metadata":{},"sourceType":"module"}